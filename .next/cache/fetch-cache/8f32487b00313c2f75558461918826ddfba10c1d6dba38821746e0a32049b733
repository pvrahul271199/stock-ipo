{"kind":"FETCH","data":{"headers":{"connection":"keep-alive, Transfer-Encoding","content-encoding":"br","content-security-policy":"frame-ancestors self, font-src *; default-src 'self' *; img-src * data: https://www.google.co.in https://www.google-analytics.com www.google-analytics.com https://nse-widget.interface.ai; style-src * 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.youtube.com *.gstatic.com https://www.google.com/ *.cloudflare.com *.googletagmanager.com *.highcharts.com *.go-mpulse.net https://stats.g.doubleclick.net/ https://www.google.com/ *.doubleclick.net https://nse-uat-widget.interface.ai/widget-loader.js www.google-analytics.com *.g.doubleclick.net/ https://analytics.google.com/ https://nse-widget.interface.ai","content-type":"text/html; charset=utf-8","date":"Fri, 06 Dec 2024 16:36:03 GMT","server":"Apache","server-timing":"cdn-cache; desc=MISS, edge; dur=30, origin; dur=65, ak_p; desc=\"1733502961904_824991583_2011967434_9486_19514_20_1524_-\";dur=1","set-cookie":"bm_sz=28AAE4849A0D6E4A70AC7E1330972FEA~YAAQX18sMfFkvDGTAQAAnA/UnBpbezMIqQWv4QZgbfT/421dHsLnE7CGEkAUia8jopJnns3KG4GDq/wVA5J2IBpg8N1BU+B9s5W1iF3XjXexsDFgl5MtoCK76vS1FPS1xshz1KicLzF5O+HL+nohFM8t+t2TTEt576EVDhYDSwD0JJ7WPfoAAjyalrZQ35pDkWJRI2Yp35/3ryUm9Kkabhli8pQxxjmkZUptaFOpDB2agFHxJPNdeR1+LMGfgnGGV0SSr0GFzJJtBEEXga+FtiNV0S5+3l62sxmTCm+ichGcC9ZXdQ53kux2nn2vhWfKb0WFTHZgq+w8sdGbXycsUWgfZzRlaLHIKlooTn0h~4338485~3752759; Domain=.nseindia.com; Path=/; Expires=Fri, 06 Dec 2024 20:36:03 GMT; Max-Age=14400","strict-transport-security":"max-age=31536000 ; includeSubDomains ; preload","transfer-encoding":"chunked","vary":"Accept-Encoding","x-akamai-transformed":"9 - 0 pmb=mTOE,3mRUM,2","x-content-security-policy":"font-src *; default-src 'self' *; img-src * data: https://www.google.co.in https://www.google-analytics.com www.google-analytics.com https://nse-widget.interface.ai; style-src * 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.youtube.com *.gstatic.com https://www.google.com/ *.cloudflare.com *.googletagmanager.com *.highcharts.com *.go-mpulse.net https://stats.g.doubleclick.net/ https://www.google.com/ *.doubleclick.net https://nse-uat-widget.interface.ai/widget-loader.js www.google-analytics.com *.g.doubleclick.net/ https://analytics.google.com/ https://nse-widget.interface.ai","x-content-type-options":"nosniff","x-dns-prefetch-control":"off","x-download-options":"noopen","x-frame-options":"SAMEORIGIN","x-webkit-csp":"font-src *; default-src 'self' *; img-src * data: https://www.google.co.in https://www.google-analytics.com www.google-analytics.com https://nse-widget.interface.ai; style-src * 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.youtube.com *.gstatic.com https://www.google.com/ *.cloudflare.com *.googletagmanager.com *.highcharts.com *.go-mpulse.net https://stats.g.doubleclick.net/ https://www.google.com/ *.doubleclick.net https://nse-uat-widget.interface.ai/widget-loader.js www.google-analytics.com *.g.doubleclick.net/ https://analytics.google.com/ https://nse-widget.interface.ai","x-xss-protection":"1; mode=block"},"body":"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
<title>
    NSE - National Stock Exchange of India Ltd: Live Share/Stock Market News &amp; Updates, Quotes- Nseindia.com
</title>
<meta name="description" content="NSE India (National Stock Exchange of India Ltd) – LIVE Share/Stock Market Updates Today. Get all latest share market news, live charts, analysis, ipo, stock/share tips, indices, equity, currency and commodity market, derivatives, finance, budget, mutual fund, bond and corporate announcements more on NSEindia.com." />
<meta name="keywords" content="NSE, National Stock Exchange, NSE India, Stock Exchange in India, stock exchange, share markets, stock markets, currency market, currency exchange, interest rate, live stock market, share market in india, share market news, live charts, analysis, ipo, stock/share tips, indices, equity market, currency market, commodity market, derivatives, finance, budget, mutual fund, bond, corporate announcements, NSEindia.com" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="/assets/images/favicon.ico" type="image/x-icon" />
<meta property="og:title" content="NSE - National Stock Exchange of India Ltd: Live Share/Stock Market News &amp; Updates, Quotes- Nseindia.com" />
<meta property="og:description" content="NSE India (National Stock Exchange of India Ltd) – LIVE Share/Stock Market Updates Today. Get all latest share market news, live charts, analysis, ipo, stock/share tips, indices, equity, currency and commodity market, derivatives, finance, budget, mutual fund, bond and corporate announcements more on NSEindia.com." />
<meta property="og:image" content="https://www.nseindia.com/assets/images/nse-thumbnail.jpg?09082024" />
<meta property="og:url" content="" />
<meta property="og:site_name" content="NSE India" />
<meta property="og:locale" content="en_US" />
<meta property="og:type" content="website" />
<meta property="og:image:width" content="1084"/>
<meta property="og:image:height" content="492"/>
<meta name="twitter:card" content="summary" />
<meta name="twitter:title" content="NSE - National Stock Exchange of India Ltd: Live Share/Stock Market News &amp; Updates, Quotes- Nseindia.com" />
<meta name="twitter:description" content="NSE India (National Stock Exchange of India Ltd) – LIVE Share/Stock Market Updates Today. Get all latest share market news, live charts, analysis, ipo, stock/share tips, indices, equity, currency and commodity market, derivatives, finance, budget, mutual fund, bond and corporate announcements more on NSEindia.com." />
<meta name="twitter:domain" content="NSE India" />
<meta name="twitter:image" content="https://www.nseindia.com/assets/images/nse-thumbnail.jpg?09082024" />
<meta property="twitter:site" content="@NSEIndia" />
<meta itemprop="name" content="NSE - National Stock Exchange of India Ltd: Live Share/Stock Market News &amp; Updates, Quotes- Nseindia.com" />
<meta itemprop="description" content="NSE India (National Stock Exchange of India Ltd) – LIVE Share/Stock Market Updates Today. Get all latest share market news, live charts, analysis, ipo, stock/share tips, indices, equity, currency and commodity market, derivatives, finance, budget, mutual fund, bond and corporate announcements more on NSEindia.com." />
<meta itemprop="image" content="https://static.nseindia.com/nse-india.png">
<meta property="fb:app_id" content="XXX" />
<meta name="author" content="NSE India">
<meta name="apple-itunes-app" content="app-id=XXX">
<meta name="google-play-app" content="app-id= XXX">
<meta name="msApplication-ID" content="App" />
<meta name="msApplication-PackageFamilyName" content="XXX" />
<meta name="msapplication-TileImage" content="XXX" />
<meta name="HandheldFriendly" content="true" />
<meta http-equiv="content-language" content="en-in" />
<META NAME="geo.position" CONTENT=" 19.0705638;72.8556971 ">
<META NAME="geo.placename" CONTENT="Mumbai">
<META NAME="geo.region" CONTENT="IN-MH">
<meta name="ahrefs-site-verification" content="7864f660fc98a53e5653b37c31643652415febf5b2a3fd9813c79c27e0c7bb7f">
<meta name="google-site-verification" content="ozKdXdMsYpDsSgPpIM8Tc-uhBk-b_Sd1TEr6s6SZYHk" />
<link rel="canonical" href="http://www.nseindia.com/" />
<link rel="alternate" href="android-app:// XXX" />
<link rel="alternate" hreflang="x-default" href="http://www.nseindia.com/" />
 <!-- Home Page Css Preload Only -->
<link rel="stylesheet" type="text/css"media="print" onload="this.media='all'" href="https://fonts.googleapis.com/css?family=Montserrat:300,400,500,600,700|Roboto:300,400,500,700">
<link rel="preload" type="text/css" media="all" as="style" href="/assets/css/bootstrap.min.css">
<link rel="preload" type="text/css" media="all" as="style" href="/assets/css/slick.css">
<link rel="preload" as="image" href="/assets/images/NSE_Logo.svg">
<link rel="preconnect" href="https://c.go-mpulse.net" crossorigin="anonymous"/>
<link rel="preload" href="/dist/js/static/public/assets/js/common.js" as="script" />
<link rel="preload" href="/dist/js/sections/most-active-equities.js" as="script" />
<!-- Home Page Css Preload Only -->
<!-- Home Page Css Change Only -->
<script type="text/javascript" src="/assets/js/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" type="text/css" media="all" href="/assets/css/all.min.css">
<link rel="stylesheet" type="text/css" media="all" href="/assets/css/bootstrap.min.css">
<link rel="stylesheet" type="text/css" media="all" href="/assets/css/slick.css">
<link rel="stylesheet" type="text/css" media="all" href="/assets/css/style.css">
<!-- Home Page Css Change Only --> <script>
  (function () {
    if (window.BOOMR && window.BOOMR.version) { return; }
    var dom, doc, where, iframe = document.createElement("iframe"), win = window;
    function boomerangSaveLoadTime(e) {
      win.BOOMR_onload = (e && e.timeStamp) || new Date().getTime();
    }
    if (win.addEventListener) {
      win.addEventListener("load", boomerangSaveLoadTime, false);
    } else if (win.attachEvent) {
      win.attachEvent("onload", boomerangSaveLoadTime);
    }
    iframe.src = "javascript:false";
    iframe.title = "";
    iframe.role = "presentation";
    (iframe.frameElement || iframe).style.cssText = "width:0;height:0;border:0;display:none;";
    where = document.getElementsByTagName("script")[0];
    where.parentNode.insertBefore(iframe, where);
    try {
      doc = iframe.contentWindow.document;
    } catch (e) {
      dom = document.domain;
      iframe.src = "javascript:var d=document.open();d.domain='" + dom + "';void(0);";
      doc = iframe.contentWindow.document;
    }
    doc.open()._l = function () {
      var js = this.createElement("script");
      if (dom) this.domain = dom;
      js.id = "boomr-if-as";
      js.src = "https://c.go-mpulse.net/boomerang/" + "RF6LV-Y7HBS-S5S4P-HB5LE-V8XXL";
      BOOMR_lstart = new Date().getTime();
      this.body.appendChild(js);
    };
    doc.write('<body onload="document._l();">');
    doc.close();
  })();
</script>

    
    
    
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/Listing%20Web%20Banner%20%2846%29.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Enabling-A-Billion-Dreams_Website-Banner%202.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Website%20Banner.png" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Mobile%20App%20Launch%20Banner%20%28002%29.jpeg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Bull-inauguration_0_0.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Coffee-table-book_0_0.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Listing%20Web%20Banner%20%2832%29_0.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Sarthi-app-07-june-570X465%201%20%281%29.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Market_pulse_report_of_November_2024.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1st_2nd%20Position.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/3rd_3rd%20Position.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1%20%282%29.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/WTI_Web%20banner%20-%20570%20X%20466_V1.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/2%20%282%29.jpg" fetchpriority="high"> 
    
     
        
     <link rel="preload" as="image" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/570%20X%20460-SEBI%20New%20website-banner.jpg" fetchpriority="high"> 
    
     
    
    
    <meta name="appVersion" content="v3.0.12" />
    <script>
      window.headerData = {"indexDataInfo":[{"name":"NIFTY 50","indexName":"NIFTY 50","metadata":{"indexName":"NIFTY 50","open":24729.45,"high":24751.05,"low":24620.5,"previousClose":24708.4,"last":24677.8,"percChange":-0.12,"change":-30.600000000002183,"timeVal":"06-Dec-2024 15:30","yearHigh":26277.35,"yearLow":20976.8,"indicativeClose":0,"totalTradedValue":1703451.26,"totalTradedVolume":207594791},"advance":{"declines":"32","advances":"18","unchanged":"0"},"topGainers":{"data":[{"symbol":"TATAMOTORS","identifier":"TATAMOTORSEQN","lastPrice":818,"pChange":3.2111538704182765,"totalTradedVolume":19716910,"totalTradedValue":158240.03},{"symbol":"BAJAJ-AUTO","identifier":"BAJAJ-AUTOEQN","lastPrice":9100,"pChange":2.3397567462704947,"totalTradedVolume":746013,"totalTradedValue":67787.66},{"symbol":"AXISBANK","identifier":"AXISBANKEQN","lastPrice":1183.9,"pChange":1.5003429355281206,"totalTradedVolume":7542210,"totalTradedValue":89246.22},{"symbol":"BPCL","identifier":"BPCLEQN","lastPrice":300.8,"pChange":1.2794612794612832,"totalTradedVolume":9586531,"totalTradedValue":28850.67},{"symbol":"DRREDDY","identifier":"DRREDDYEQN","lastPrice":1253.55,"pChange":1.1049723756906116,"totalTradedVolume":1717216,"totalTradedValue":21421.93}],"totVol":39308880,"totVal":365546.51},"topLosers":{"data":[{"symbol":"ADANIPORTS","identifier":"ADANIPORTSEQN","lastPrice":1257.8,"pChange":-1.5073802905132925,"totalTradedVolume":2232531,"totalTradedValue":28296.21},{"symbol":"CIPLA","identifier":"CIPLAEQN","lastPrice":1477,"pChange":-1.4183213749374268,"totalTradedVolume":3768932,"totalTradedValue":55805.45},{"symbol":"BHARTIARTL","identifier":"BHARTIARTLEQN","lastPrice":1597.75,"pChange":-1.0895471569628816,"totalTradedVolume":4296866,"totalTradedValue":68990.05},{"symbol":"HDFCLIFE","identifier":"HDFCLIFEEQN","lastPrice":636.2,"pChange":-1.0806188292000205,"totalTradedVolume":6455327,"totalTradedValue":41183.05},{"symbol":"INDUSINDBK","identifier":"INDUSINDBKEQN","lastPrice":988.35,"pChange":-0.986776197154881,"totalTradedVolume":6258019,"totalTradedValue":62190.94}],"totVol":23011675,"totVal":256465.7},"topVolume":{"data":[{"symbol":"TATASTEEL","identifier":"TATASTEELEQN","lastPrice":148.1,"pChange":0.7003467736452038,"totalTradedVolume":30604899,"totalTradedValue":45154.47},{"symbol":"TATAMOTORS","identifier":"TATAMOTORSEQN","lastPrice":818,"pChange":3.2111538704182765,"totalTradedVolume":19716910,"totalTradedValue":158240.03},{"symbol":"SBIN","identifier":"SBINEQN","lastPrice":862.95,"pChange":-0.2888670633774337,"totalTradedVolume":14520568,"totalTradedValue":125851.21},{"symbol":"NTPC","identifier":"NTPCEQN","lastPrice":369.75,"pChange":0.16253555465258643,"totalTradedVolume":9736086,"totalTradedValue":36011.83},{"symbol":"BPCL","identifier":"BPCLEQN","lastPrice":300.8,"pChange":1.2794612794612832,"totalTradedVolume":9586531,"totalTradedValue":28850.67}],"totVol":84164994,"totVal":394108.21},"topValue":{"data":[{"symbol":"HDFCBANK","identifier":"HDFCBANKEQN","lastPrice":1855.45,"pChange":-0.5520568136138257,"totalTradedVolume":8891578,"totalTradedValue":165092.6},{"symbol":"TATAMOTORS","identifier":"TATAMOTORSEQN","lastPrice":818,"pChange":3.2111538704182765,"totalTradedVolume":19716910,"totalTradedValue":158240.03},{"symbol":"SBIN","identifier":"SBINEQN","lastPrice":862.95,"pChange":-0.2888670633774337,"totalTradedVolume":14520568,"totalTradedValue":125851.21},{"symbol":"ICICIBANK","identifier":"ICICIBANKEQN","lastPrice":1329,"pChange":-0.5611672278338945,"totalTradedVolume":8942672,"totalTradedValue":119350.69},{"symbol":"RELIANCE","identifier":"RELIANCEEQN","lastPrice":1311.6,"pChange":-0.7904390908059488,"totalTradedVolume":9037514,"totalTradedValue":118796.31}],"totVol":61109242,"totVal":687330.8400000001},"timestamp":"06-Dec-2024 16:00:00"},{"name":"NIFTY NEXT 50","indexName":"NIFTY NEXT 50","metadata":{"indexName":"NIFTY NEXT 50","open":72789.1,"high":73218.6,"low":72619.35,"previousClose":72487.05,"last":73040.4,"percChange":0.76,"change":553.3499999999913,"timeVal":"06-Dec-2024 15:30","yearHigh":77918,"yearLow":50102.95,"indicativeClose":0,"totalTradedValue":1407492.56,"totalTradedVolume":685952323},"advance":{"declines":"19","advances":"30","unchanged":"1"},"topGainers":{"data":[{"symbol":"VEDL","identifier":"VEDLEQN","lastPrice":501.4,"pChange":6.116402116402112,"totalTradedVolume":25827648,"totalTradedValue":128019.9},{"symbol":"IRFC","identifier":"IRFCEQN","lastPrice":158.08,"pChange":4.799787854680463,"totalTradedVolume":62323577,"totalTradedValue":97654.81},{"symbol":"NHPC","identifier":"NHPCEQN","lastPrice":84.8,"pChange":3.188123631053772,"totalTradedVolume":71149439,"totalTradedValue":60690.47},{"symbol":"INDIGO","identifier":"INDIGOEQN","lastPrice":4505,"pChange":3.123462018289817,"totalTradedVolume":546985,"totalTradedValue":24225.64},{"symbol":"RECLTD","identifier":"RECLTDEQN","lastPrice":557.5,"pChange":2.293577981651376,"totalTradedVolume":10625077,"totalTradedValue":59133.87}],"totVol":170472726,"totVal":369724.69},"topLosers":{"data":[{"symbol":"ATGL","identifier":"ATGLEQN","lastPrice":729,"pChange":-2.009543652127165,"totalTradedVolume":1260840,"totalTradedValue":9297.06},{"symbol":"ADANIENSOL","identifier":"ADANIENSOLEQN","lastPrice":807.5,"pChange":-1.8595041322313994,"totalTradedVolume":1763438,"totalTradedValue":14414.34},{"symbol":"ADANIGREEN","identifier":"ADANIGREENEQN","lastPrice":1209.5,"pChange":-1.6346779440468373,"totalTradedVolume":3815815,"totalTradedValue":46921.93},{"symbol":"DMART","identifier":"DMARTEQN","lastPrice":3806,"pChange":-1.499760607668314,"totalTradedVolume":1141350,"totalTradedValue":43750.91},{"symbol":"GODREJCP","identifier":"GODREJCPEQN","lastPrice":1230.65,"pChange":-1.1327575818437363,"totalTradedVolume":842156,"totalTradedValue":10457.89}],"totVol":8823599,"totVal":124842.13},"topVolume":{"data":[{"symbol":"NHPC","identifier":"NHPCEQN","lastPrice":84.8,"pChange":3.188123631053772,"totalTradedVolume":71149439,"totalTradedValue":60690.47},{"symbol":"IRFC","identifier":"IRFCEQN","lastPrice":158.08,"pChange":4.799787854680463,"totalTradedVolume":62323577,"totalTradedValue":97654.81},{"symbol":"CANBK","identifier":"CANBKEQN","lastPrice":109.2,"pChange":0.9522048627160961,"totalTradedVolume":59964689,"totalTradedValue":65607.37},{"symbol":"MOTHERSON","identifier":"MOTHERSONEQN","lastPrice":170.05,"pChange":1.8263473053892285,"totalTradedVolume":53262330,"totalTradedValue":91137.17},{"symbol":"PNB","identifier":"PNBEQN","lastPrice":110.08,"pChange":0.9167583425009168,"totalTradedVolume":51861042,"totalTradedValue":56933.05}],"totVol":298561077,"totVal":372022.87},"topValue":{"data":[{"symbol":"ZOMATO","identifier":"ZOMATOEQN","lastPrice":302.45,"pChange":1.035577083681298,"totalTradedVolume":49309068,"totalTradedValue":148015.96},{"symbol":"VEDL","identifier":"VEDLEQN","lastPrice":501.4,"pChange":6.116402116402112,"totalTradedVolume":25827648,"totalTradedValue":128019.9},{"symbol":"IRFC","identifier":"IRFCEQN","lastPrice":158.08,"pChange":4.799787854680463,"totalTradedVolume":62323577,"totalTradedValue":97654.81},{"symbol":"MOTHERSON","identifier":"MOTHERSONEQN","lastPrice":170.05,"pChange":1.8263473053892285,"totalTradedVolume":53262330,"totalTradedValue":91137.17},{"symbol":"TATAPOWER","identifier":"TATAPOWEREQN","lastPrice":438.95,"pChange":1.8800046419867624,"totalTradedVolume":17372298,"totalTradedValue":76075.03}],"totVol":208094921,"totVal":540902.87},"timestamp":"06-Dec-2024 16:00:00"},{"name":"NIFTY MIDCAP SELECT","indexName":"NIFTY MID SELECT","metadata":{"indexName":"NIFTY MID SELECT","open":12967.25,"high":12987.05,"low":12910.9,"previousClose":12935.6,"last":12959.55,"percChange":0.19,"change":23.94999999999891,"timeVal":"06-Dec-2024 15:30","yearHigh":13407.55,"yearLow":6054.2,"indicativeClose":0,"totalTradedValue":603375.06,"totalTradedVolume":948402142},"advance":{"declines":"11","advances":"14","unchanged":"0"},"topGainers":{"data":[{"symbol":"VOLTAS","identifier":"VOLTASEQN","lastPrice":1714,"pChange":2.7639546735415736,"totalTradedVolume":1190529,"totalTradedValue":20198.87},{"symbol":"HINDPETRO","identifier":"HINDPETROEQN","lastPrice":398.2,"pChange":1.6334864726901421,"totalTradedVolume":8107943,"totalTradedValue":32351.5},{"symbol":"PERSISTENT","identifier":"PERSISTENTEQN","lastPrice":6178,"pChange":1.2496414962920472,"totalTradedVolume":328550,"totalTradedValue":20182.7},{"symbol":"COFORGE","identifier":"COFORGEEQN","lastPrice":8901,"pChange":0.9435460092086545,"totalTradedVolume":268255,"totalTradedValue":23789.01},{"symbol":"DIXON","identifier":"DIXONEQN","lastPrice":17430,"pChange":0.7598902798211453,"totalTradedVolume":317720,"totalTradedValue":55197.97}],"totVol":10212997,"totVal":151720.05},"topLosers":{"data":[{"symbol":"BHARATFORG","identifier":"BHARATFORGEQN","lastPrice":1353,"pChange":-1.899651972157776,"totalTradedVolume":637711,"totalTradedValue":8709.41},{"symbol":"AUBANK","identifier":"AUBANKEQN","lastPrice":588,"pChange":-1.631116687578419,"totalTradedVolume":2744809,"totalTradedValue":16239.94},{"symbol":"COLPAL","identifier":"COLPALEQN","lastPrice":2884.2,"pChange":-1.0226492793411182,"totalTradedVolume":276158,"totalTradedValue":7992.7},{"symbol":"SRF","identifier":"SRFEQN","lastPrice":2297.1,"pChange":-0.9763983187843557,"totalTradedVolume":203158,"totalTradedValue":4670.26},{"symbol":"GODREJPROP","identifier":"GODREJPROPEQN","lastPrice":2834.9,"pChange":-0.900145071924213,"totalTradedVolume":1216370,"totalTradedValue":34496.62}],"totVol":5078206,"totVal":72108.93},"topVolume":{"data":[{"symbol":"IDEA","identifier":"IDEAEQN","lastPrice":8.12,"pChange":0.4950495049504845,"totalTradedVolume":427143967,"totalTradedValue":34684.09},{"symbol":"IDFCFIRSTB","identifier":"IDFCFIRSTBEQN","lastPrice":65.9,"pChange":-0.09096422073982424,"totalTradedVolume":18003859,"totalTradedValue":11873.55},{"symbol":"INDUSTOWER","identifier":"INDUSTOWEREQN","lastPrice":364.9,"pChange":0.37133819282078556,"totalTradedVolume":16816288,"totalTradedValue":61890.67},{"symbol":"FEDERALBNK","identifier":"FEDERALBNKEQN","lastPrice":213.95,"pChange":-0.4744848118342142,"totalTradedVolume":9436594,"totalTradedValue":20125.42},{"symbol":"HINDPETRO","identifier":"HINDPETROEQN","lastPrice":398.2,"pChange":1.6334864726901421,"totalTradedVolume":8107943,"totalTradedValue":32351.5}],"totVol":479508651,"totVal":160925.22999999998},"topValue":{"data":[{"symbol":"INDUSTOWER","identifier":"INDUSTOWEREQN","lastPrice":364.9,"pChange":0.37133819282078556,"totalTradedVolume":16816288,"totalTradedValue":61890.67},{"symbol":"DIXON","identifier":"DIXONEQN","lastPrice":17430,"pChange":0.7598902798211453,"totalTradedVolume":317720,"totalTradedValue":55197.97},{"symbol":"IDEA","identifier":"IDEAEQN","lastPrice":8.12,"pChange":0.4950495049504845,"totalTradedVolume":427143967,"totalTradedValue":34684.09},{"symbol":"GODREJPROP","identifier":"GODREJPROPEQN","lastPrice":2834.9,"pChange":-0.900145071924213,"totalTradedVolume":1216370,"totalTradedValue":34496.62},{"symbol":"HINDPETRO","identifier":"HINDPETROEQN","lastPrice":398.2,"pChange":1.6334864726901421,"totalTradedVolume":8107943,"totalTradedValue":32351.5}],"totVol":453602288,"totVal":218620.84999999998},"timestamp":"06-Dec-2024 16:00:00"},{"name":"NIFTY BANK","indexName":"NIFTY BANK","metadata":{"indexName":"NIFTY BANK","open":53634.2,"high":53868.5,"low":53160.65,"previousClose":53603.55,"last":53509.5,"percChange":-0.18,"change":-94.05000000000291,"timeVal":"06-Dec-2024 15:30","yearHigh":54467.35,"yearLow":44429,"indicativeClose":0,"totalTradedValue":1564416.91,"totalTradedVolume":439663770},"advance":{"declines":"7","advances":"5","unchanged":"0"},"topGainers":{"data":[{"symbol":"BANKBARODA","identifier":"BANKBARODAEQN","lastPrice":264,"pChange":1.5462727902146247,"totalTradedVolume":18607200,"totalTradedValue":49059.74},{"symbol":"AXISBANK","identifier":"AXISBANKEQN","lastPrice":1183.9,"pChange":1.5003429355281206,"totalTradedVolume":7542210,"totalTradedValue":89246.22},{"symbol":"CANBK","identifier":"CANBKEQN","lastPrice":109.2,"pChange":0.9522048627160961,"totalTradedVolume":59964689,"totalTradedValue":65607.37},{"symbol":"PNB","identifier":"PNBEQN","lastPrice":110.08,"pChange":0.9167583425009168,"totalTradedVolume":51861042,"totalTradedValue":56933.05},{"symbol":"KOTAKBANK","identifier":"KOTAKBANKEQN","lastPrice":1775.25,"pChange":0.005633326761113655,"totalTradedVolume":2595882,"totalTradedValue":46097.93}],"totVol":140571023,"totVal":306944.31},"topLosers":{"data":[{"symbol":"AUBANK","identifier":"AUBANKEQN","lastPrice":588,"pChange":-1.631116687578419,"totalTradedVolume":2744809,"totalTradedValue":16239.94},{"symbol":"INDUSINDBK","identifier":"INDUSINDBKEQN","lastPrice":988.35,"pChange":-0.986776197154881,"totalTradedVolume":6258019,"totalTradedValue":62190.94},{"symbol":"ICICIBANK","identifier":"ICICIBANKEQN","lastPrice":1329,"pChange":-0.5611672278338945,"totalTradedVolume":8942672,"totalTradedValue":119350.69},{"symbol":"HDFCBANK","identifier":"HDFCBANKEQN","lastPrice":1855.45,"pChange":-0.5520568136138257,"totalTradedVolume":8891578,"totalTradedValue":165092.6},{"symbol":"FEDERALBNK","identifier":"FEDERALBNKEQN","lastPrice":213.95,"pChange":-0.4744848118342142,"totalTradedVolume":9436594,"totalTradedValue":20125.42}],"totVol":36273672,"totVal":382999.59},"topVolume":{"data":[{"symbol":"CANBK","identifier":"CANBKEQN","lastPrice":109.2,"pChange":0.9522048627160961,"totalTradedVolume":59964689,"totalTradedValue":65607.37},{"symbol":"PNB","identifier":"PNBEQN","lastPrice":110.08,"pChange":0.9167583425009168,"totalTradedVolume":51861042,"totalTradedValue":56933.05},{"symbol":"BANKBARODA","identifier":"BANKBARODAEQN","lastPrice":264,"pChange":1.5462727902146247,"totalTradedVolume":18607200,"totalTradedValue":49059.74},{"symbol":"IDFCFIRSTB","identifier":"IDFCFIRSTBEQN","lastPrice":65.9,"pChange":-0.09096422073982424,"totalTradedVolume":18003859,"totalTradedValue":11873.55},{"symbol":"SBIN","identifier":"SBINEQN","lastPrice":862.95,"pChange":-0.2888670633774337,"totalTradedVolume":14520568,"totalTradedValue":125851.21}],"totVol":162957358,"totVal":309324.92},"topValue":{"data":[{"symbol":"HDFCBANK","identifier":"HDFCBANKEQN","lastPrice":1855.45,"pChange":-0.5520568136138257,"totalTradedVolume":8891578,"totalTradedValue":165092.6},{"symbol":"SBIN","identifier":"SBINEQN","lastPrice":862.95,"pChange":-0.2888670633774337,"totalTradedVolume":14520568,"totalTradedValue":125851.21},{"symbol":"ICICIBANK","identifier":"ICICIBANKEQN","lastPrice":1329,"pChange":-0.5611672278338945,"totalTradedVolume":8942672,"totalTradedValue":119350.69},{"symbol":"AXISBANK","identifier":"AXISBANKEQN","lastPrice":1183.9,"pChange":1.5003429355281206,"totalTradedVolume":7542210,"totalTradedValue":89246.22},{"symbol":"CANBK","identifier":"CANBKEQN","lastPrice":109.2,"pChange":0.9522048627160961,"totalTradedVolume":59964689,"totalTradedValue":65607.37}],"totVol":99861717,"totVal":565148.09},"timestamp":"06-Dec-2024 16:00:00"},{"name":"NIFTY FINANCIAL SERVICES","indexName":"NIFTY FIN SERVICE","metadata":{"indexName":"NIFTY FIN SERVICE","open":24731.85,"high":24830.85,"low":24562.9,"previousClose":24731.25,"last":24703.7,"percChange":-0.11,"change":-27.549999999999272,"timeVal":"06-Dec-2024 15:30","yearHigh":25201.95,"yearLow":19822.05,"indicativeClose":0,"totalTradedValue":1572966.47,"totalTradedVolume":133886371},"advance":{"declines":"9","advances":"11","unchanged":"0"},"topGainers":{"data":[{"symbol":"MCX","identifier":"MCXEQN","lastPrice":6904,"pChange":6.407737063152622,"totalTradedVolume":1279137,"totalTradedValue":87873.26},{"symbol":"RECLTD","identifier":"RECLTDEQN","lastPrice":557.5,"pChange":2.293577981651376,"totalTradedVolume":10625077,"totalTradedValue":59133.87},{"symbol":"AXISBANK","identifier":"AXISBANKEQN","lastPrice":1183.9,"pChange":1.5003429355281206,"totalTradedVolume":7542210,"totalTradedValue":89246.22},{"symbol":"SBILIFE","identifier":"SBILIFEEQN","lastPrice":1447,"pChange":1.0580717253902359,"totalTradedVolume":1359753,"totalTradedValue":19628.44},{"symbol":"ICICIGI","identifier":"ICICIGIEQN","lastPrice":1948.2,"pChange":0.8019868577637501,"totalTradedVolume":696971,"totalTradedValue":13568.14}],"totVol":21503148,"totVal":269449.93},"topLosers":{"data":[{"symbol":"HDFCLIFE","identifier":"HDFCLIFEEQN","lastPrice":636.2,"pChange":-1.0806188292000205,"totalTradedVolume":6455327,"totalTradedValue":41183.05},{"symbol":"CHOLAFIN","identifier":"CHOLAFINEQN","lastPrice":1278.35,"pChange":-1.0143636997173826,"totalTradedVolume":952010,"totalTradedValue":12156.98},{"symbol":"BAJAJFINSV","identifier":"BAJAJFINSVEQN","lastPrice":1630.95,"pChange":-0.7998296940575309,"totalTradedVolume":1049225,"totalTradedValue":17190.5},{"symbol":"SBICARD","identifier":"SBICARDEQN","lastPrice":718.7,"pChange":-0.7868580894533314,"totalTradedVolume":385221,"totalTradedValue":2778.06},{"symbol":"ICICIBANK","identifier":"ICICIBANKEQN","lastPrice":1329,"pChange":-0.5611672278338945,"totalTradedVolume":8942672,"totalTradedValue":119350.69}],"totVol":17784455,"totVal":192659.28},"topVolume":{"data":[{"symbol":"SBIN","identifier":"SBINEQN","lastPrice":862.95,"pChange":-0.2888670633774337,"totalTradedVolume":14520568,"totalTradedValue":125851.21},{"symbol":"RECLTD","identifier":"RECLTDEQN","lastPrice":557.5,"pChange":2.293577981651376,"totalTradedVolume":10625077,"totalTradedValue":59133.87},{"symbol":"PFC","identifier":"PFCEQN","lastPrice":513,"pChange":0.15618898867628944,"totalTradedVolume":10442708,"totalTradedValue":54014.91},{"symbol":"ICICIBANK","identifier":"ICICIBANKEQN","lastPrice":1329,"pChange":-0.5611672278338945,"totalTradedVolume":8942672,"totalTradedValue":119350.69},{"symbol":"HDFCBANK","identifier":"HDFCBANKEQN","lastPrice":1855.45,"pChange":-0.5520568136138257,"totalTradedVolume":8891578,"totalTradedValue":165092.6}],"totVol":53422603,"totVal":523443.28},"topValue":{"data":[{"symbol":"HDFCBANK","identifier":"HDFCBANKEQN","lastPrice":1855.45,"pChange":-0.5520568136138257,"totalTradedVolume":8891578,"totalTradedValue":165092.6},{"symbol":"SBIN","identifier":"SBINEQN","lastPrice":862.95,"pChange":-0.2888670633774337,"totalTradedVolume":14520568,"totalTradedValue":125851.21},{"symbol":"ICICIBANK","identifier":"ICICIBANKEQN","lastPrice":1329,"pChange":-0.5611672278338945,"totalTradedVolume":8942672,"totalTradedValue":119350.69},{"symbol":"AXISBANK","identifier":"AXISBANKEQN","lastPrice":1183.9,"pChange":1.5003429355281206,"totalTradedVolume":7542210,"totalTradedValue":89246.22},{"symbol":"MCX","identifier":"MCXEQN","lastPrice":6904,"pChange":6.407737063152622,"totalTradedVolume":1279137,"totalTradedValue":87873.26}],"totVol":41176165,"totVal":587413.98},"timestamp":"06-Dec-2024 16:00:00"}],"marketStatus":{"marketState":[{"market":"Capital Market","marketStatus":"Closed","tradeDate":"06-Dec-2024 15:30","index":"NIFTY 50","last":24677.8,"variation":-30.600000000002183,"percentChange":-0.12,"marketStatusMessage":"Normal Market has Closed"},{"market":"Currency","marketStatus":"Closed","tradeDate":"06-Dec-2024","index":"","last":"","variation":"","percentChange":"","marketStatusMessage":"Market is Closed"},{"market":"Commodity","marketStatus":"Open","tradeDate":"06-Dec-2024","index":"","last":"","variation":"","percentChange":"","marketStatusMessage":"Market is Open"},{"market":"Debt","marketStatus":"Closed","tradeDate":"06-Dec-2024","index":"","last":"","variation":"","percentChange":"","marketStatusMessage":"Market is Closed"},{"market":"currencyfuture","marketStatus":"Closed","tradeDate":"06-Dec-2024","index":"","last":"84.7725","variation":"","percentChange":"","marketStatusMessage":"Market is Closed","expiryDate":"27-Dec-2024","underlying":"USDINR","updated_time":"06-Dec-2024 17:00","tradeDateFormatted":"06-Dec-2024 17:00","slickclass":"slick-item"}],"marketcap":{"timeStamp":"06-Dec-2024","marketCapinTRDollars":5.38,"marketCapinLACCRRupees":455.5519630985396,"marketCapinCRRupees":45555196.31,"marketCapinCRRupeesFormatted":"45,555,196.31","marketCapinLACCRRupeesFormatted":"455.55","underlying":"Market Cap"},"indicativenifty50":{"dateTime":"06-Dec-2024 15:30","indicativeTime":null,"indexName":"NIFTY 50","indexLast":null,"indexPercChange":null,"indexTimeVal":null,"closingValue":24677.8,"finalClosingValue":24677.8,"change":-30.6,"perChange":-0.12,"status":"CLOSE"},"giftnifty":{"INSTRUMENTTYPE":"FUTIDX","SYMBOL":"NIFTY","EXPIRYDATE":"26-Dec-2024","OPTIONTYPE":"-","STRIKEPRICE":"-","LASTPRICE":24743,"DAYCHANGE":"-25.00","PERCHANGE":"           -0.10","CONTRACTSTRADED":40628,"TIMESTMP":"06-Dec-2024 22:05","id":"2/NIFTYFUTIDX26-Dec-2024--"}},"ejsHelpers":{"util":{}}}
      var checkDownloadFile = true;
      var downloadAnchorTag;
      var release_version =  "v1.2";    
    </script>
    <script src="/dist/js/blinkui/src/blinkui.js"></script>
    <script src="/assets/js/nse-min.js"></script>
    <!-- Google Tag Manager -->
    <!-- <script>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-NDBTGWW");
    </script> -->
    <!-- End Google Tag Manager -->

    <!-- START : Organization Schema for homepage only -->
    <script type="application/ld+json">
      { "@context" : "http://schema.org",
        "@type" : "Organization",
      "name" : "NSE India",
      "url" : "https://www.nseindia.com/",
        "contactPoint" : {
          "@type" : "ContactPoint",
          "telephone" : "022 2659 8100",
          "contactType" : "Customer Service"
        },
        "logo" : "https://www.nseindia.com/assets/images/NSE_Logo.svg",
      "sameAs" : [ "https://www.facebook.com/NationalStockExchange/",
      "https://twitter.com/NSEIndia",
      "https://in.linkedin.com/company/national-stock-exchange-of-india-limited",
      "https://www.youtube.com/user/NSEIL1india"]
      }
    </script>
    <meta name="home:release:version" content="v2.0.1">    
    <!-- END : Organization Schema for homepage only -->  
    
    <!-- Google Tag Manager -->

<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-M48PCVJL');</script>

<!-- End Google Tag Manager -->

        <!-- Google tag (gtag.js) -->
    <script async src=https://www.googletagmanager.com/gtag/js?id=G-QJZ4447QD3></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'G-87M7PJ3R97');
    </script>
  
<script>(window.BOOMR_mq=window.BOOMR_mq||[]).push(["addVar",{"rua.upush":"false","rua.cpush":"false","rua.upre":"false","rua.cpre":"false","rua.uprl":"false","rua.cprl":"false","rua.cprf":"false","rua.trans":"","rua.cook":"false","rua.ims":"false","rua.ufprl":"false","rua.cfprl":"false","rua.isuxp":"false","rua.texp":"norulematch","rua.ceh":"false","rua.ueh":"false","rua.ieh.st":"0"}]);</script>
                              <script>!function(a){var e="https://s.go-mpulse.net/boomerang/",t="addEventListener";if("False"=="True")a.BOOMR_config=a.BOOMR_config||{},a.BOOMR_config.PageParams=a.BOOMR_config.PageParams||{},a.BOOMR_config.PageParams.pci=!0,e="https://s2.go-mpulse.net/boomerang/";if(window.BOOMR_API_key="RF6LV-Y7HBS-S5S4P-HB5LE-V8XXL",function(){function n(e){a.BOOMR_onload=e&&e.timeStamp||(new Date).getTime()}if(!a.BOOMR||!a.BOOMR.version&&!a.BOOMR.snippetExecuted){a.BOOMR=a.BOOMR||{},a.BOOMR.snippetExecuted=!0;var i,_,o,r=document.createElement("iframe");if(a[t])a[t]("load",n,!1);else if(a.attachEvent)a.attachEvent("onload",n);r.src="javascript:void(0)",r.title="",r.role="presentation",(r.frameElement||r).style.cssText="width:0;height:0;border:0;display:none;",o=document.getElementsByTagName("script")[0],o.parentNode.insertBefore(r,o);try{_=r.contentWindow.document}catch(O){i=document.domain,r.src="javascript:var d=document.open();d.domain='"+i+"';void(0);",_=r.contentWindow.document}_.open()._l=function(){var a=this.createElement("script");if(i)this.domain=i;a.id="boomr-if-as",a.src=e+"RF6LV-Y7HBS-S5S4P-HB5LE-V8XXL",BOOMR_lstart=(new Date).getTime(),this.body.appendChild(a)},_.write("<bo"+'dy onload="document._l();">'),_.close()}}(),"".length>0)if(a&&"performance"in a&&a.performance&&"function"==typeof a.performance.setResourceTimingBufferSize)a.performance.setResourceTimingBufferSize();!function(){if(BOOMR=a.BOOMR||{},BOOMR.plugins=BOOMR.plugins||{},!BOOMR.plugins.AK){var e=""=="true"?1:0,t="",n="ges6fkjrfrpwgz2te7zq-f-65135b79a-clientnsv4-s.akamaihd.net",i="false"=="true"?2:1,_={"ak.v":"39","ak.cp":"53793","ak.ai":parseInt("509815",10),"ak.ol":"0","ak.cr":20,"ak.ipv":4,"ak.proto":"http/1.1","ak.rid":"77ec2fca","ak.r":29188,"ak.a2":e,"ak.m":"x","ak.n":"essl","ak.bpcip":"49.37.226.0","ak.cport":64784,"ak.gh":"49.44.95.95","ak.quicv":"","ak.tlsv":"tls1.3","ak.0rtt":"","ak.0rtt.ed":"","ak.csrc":"-","ak.acc":"reno","ak.t":"1733502963","ak.ak":"hOBiQwZUYzCg5VSAfCLimQ==u+zMyqojxSuWRFS4NrAqmUlMTbB9kmIKF7IsPWbx0eULWXwfWtCR+xD+e6WgEoNFwhpSdOdoKjbNKoVZoBV7xSNGH62J86N7yVinrmCU8o8/hqdrr4RDuLqHnFUNkMAxGEMPB/D8y5gv2tAbXqU7+CXC0X9uJ5nq2xTxZl6FxH/Y2ZZxnKFVAlhcUr9yZF2Aja5ILlq+Khha8y7Zz8dUvlgTZOhhJeaJa+Rg6YW/u4UE4ia8jvLq+LOZl5I+6K+ZvWzKzdYvlpDGzyKA57UT65vH6clZ0VBc3mHDmDiuMFzU3cbktAT9xboQV6pqT3FiY/Uyp0LvravosXfFQK7xnJxO77YvuATEV3DtDTspadaqego6gsvt+BtZ+dnH4srlDsMvG4fk2lM8gs+IKm5IPjk414YB117kfZxByZOeINA=","ak.pv":"138","ak.dpoabenc":"","ak.tf":i};if(""!==t)_["ak.ruds"]=t;var o={i:!1,av:function(e){var t="http.initiator";if(e&&(!e[t]||"spa_hard"===e[t]))_["ak.feo"]=void 0!==a.aFeoApplied?1:0,BOOMR.addVar(_)},rv:function(){var a=["ak.bpcip","ak.cport","ak.cr","ak.csrc","ak.gh","ak.ipv","ak.m","ak.n","ak.ol","ak.proto","ak.quicv","ak.tlsv","ak.0rtt","ak.0rtt.ed","ak.r","ak.acc","ak.t","ak.tf"];BOOMR.removeVar(a)}};BOOMR.plugins.AK={akVars:_,akDNSPreFetchDomain:n,init:function(){if(!o.i){var a=BOOMR.subscribe;a("before_beacon",o.av,null,null),a("onbeacon",o.rv,null,null),o.i=!0}return this},is_complete:function(){return!0}}}}()}(window);</script><script >bazadebezolkohpepadr="1479050256"</script><script type="text/javascript" src="https://www.nseindia.com/akam/13/5828864c"  defer></script></head>

  <body class="notranslate">
    <!-- Google Tag Manager (noscript) -->
    <!-- <noscript
      ><iframe title="google tag manager"
        src="https://www.googletagmanager.com/ns.html?id=GTM-NDBTGWW"
        height="0"
        width="0"
        style="display: none; visibility: hidden"
      ></iframe
    ></noscript> -->
    <!-- End Google Tag Manager (noscript) -->
    <!-- Google Tag Manager (noscript) -->

<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-M48PCVJL"
    height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    
<!-- End Google Tag Manager (noscript) -->
    
    <div id="pageLoader">
      <div class="loader-wrp">
        <div class="spin-loader" aria-hidden="true"></div>
      </div>
    </div>
    <script src="/assets/js/multilingual/library.js"></script>
<div id="betaVerBand">
    <!-- <span id="betaVderBandText">YOU ARE ON THE NEW NSE WEBSITE, ACCESS THE OLD WEBSITE ON THE URL</span>  -->
    <div class="container">
        <div class="row">
            <div class="col-md-12">
            <ul class="topband-gray d-flex justify-content-center">
            <li><a class="link" href="/option-chain">Option Chain</a></li>
            <li><a class="link" href="/market-data/new-stock-exchange-listings-today">Listings</a></li>
            <li><a class="link" href="/market-data/all-upcoming-issues-ipo">IPO</a></li>
            <li><a class="link" href="/resources/exchange-communication-circulars">Circulars</a></li>
            <li><a class="link" href="/all-reports">Daily Reports</a></li>
            <li><a class="link" href="/resources/exchange-communication-holidays">Holidays</a></li>
            <li><a class="link" href="/resources/exchange-communication-press-releases">Press Releases</a></li>
            <li><a class="link" href="/contact/contact-us">Contact Us</a></li>
            </ul>
            </div>
        </div>
    </div>
</div>
<header>
    <nav class="navbar navbar-expand-md navbar-light">
        <div class="container top_logomenu">
            <a class="navbar-brand me-auto" href="/" id="logoURL"><link rel="preload" as="image" href="/assets/images/NSE_Logo.svg"><img fetchpriority="high" src="/assets/images/NSE_Logo.svg" width="128" height="44" alt="NSE India" title="NSE India, National Stock Exchange"></a>
            <div class="middleheader">
                <div class="searchbox">
                    <div class="inputbox">
                        <input id="header-search-input" aria-expanded="false" autocomplete="off" class="typeahead" type="text" placeholder="Search by company name, symbol or keyword" aria-owns="autoComplete" aria-controls="autoComplete">
                        <button aria-label="Click to Search"><img src="/assets/images/Get_Quote_search.svg" width="24" height="24" alt="Get Quote Search" title="Get Quote Search" /></button>
                    </div>
                    <div id="autoComplete" class="searchAuto"><ul id="autoCompleteBlock"></ul></div>
                </div>
                &nbsp; &nbsp;
                <select style="width:65px;" onchange="RedirectUrl(this.value)" id="P9LngDdl" class="topLang" p9ignore="true">
                    <option value='english'>English</option>
                    <option value='hindi'>हिन्दी (Hindi)</option>
                    <option value='marathi'>मराठी (Marathi)</option>
                    <option value='gujarati'>ગુજરાતી (Gujarati)</option>
                    <option value='bengali'>বাংলা (Bengali)</option>
                    <option value='kannada'>ಕನ್ನಡ (Kannada)</option>
                    <option value='tamil'>தமிழ் (Tamil)</option>
                    <option value='telugu'>తెలుగు (Telugu)</option>
                    <option value='punjabi'>ਪੰਜਾਬੀ (Punjabi)</option>
                    <option value='malayalam'>മലയാളം (Malayalam)</option>
                    <option value='oriya'>ଓଡ଼ିଆ (Oriya)</option>
                    <option value='assamese'>অসমীয়া (Assamese)</option>
                </select>
            </div>
            
              <!--nifty 50 indicator-->
                <div id="nseMarketStatus" class="form-inline top-right ms-auto my-2 my-lg-0 niftyMarket d-none d-sm-block indicativeClosing_wrapper">
                    <div class="innerContainer">
                <div class="form-inline niftyFifty">
  <div class="logo_with_text">
    <figure class="capitalLogo">
        <a href="/market-data/live-equity-market?symbol=NIFTY%2050" target="_blank"><img src="/assets/images/logo_nifty50.png" alt="NSE - NIFTY 50" title="NSE - NIFTY 50"></a>
    </figure>
  </div>
  <div class="head-carousel">
     
      <div class="mkt_widget">
        <div id="marketStat-nifty50" class="widget_head marketStat-nifty50">
          <div class="index_val"><span class="val ltp">24,677.80</span>
                  <i class="market-up-down fa fa-caret-down cool-red"></i>
          </div>
          <span  class="per redTxt" >
             <span> -30.60</span> (<span>-0.12</span>%)</span>
        </div>
        <div class="widget_body">
            <p class="next_date"><span class="nifty50-tradedate">06-Dec-2024 15:30</span></p>
        </div>
      </div>
  </div>
</div>
                 
                <div id="slickcarousel-widget-parent" class="slick-class form-inline top-right ms-auto my-2 my-lg-0 niftyMarket d-none d-sm-block">
                  
    <div class="form-inline niftyFifty">
        <div class="mkt_widget indicative_closing px-0" style="border: 0;">
            <div id="marketStat-giftnifty" class="widget_head marketStat-giftnifty">
                <div class="giftNifty">
                    <img src="/assets/images/gift-nifty.png" alt="GiftNifty"><span class="expirydate">Futures 26-Dec-2024</span>
                </div>
                <div class="logo_with_text giftNifty_val">
                    <span><span class="lastprice">24,743.00</span>
                        <i class="market-up-down fa fa-caret-down cool-red"></i>
                        <span  class="per redTxt" >
                            <span> -25.00</span> (<span>-0.10</span>%)</span>
                    </span>
                </div>
            </div>
            <div class="widget_body" style="margin-top: -4px;">
                <p class="next_date">
                    <span class="giftnifty-tradedate">06-Dec-2024 22:05</span>
                </p>
            </div>
        </div>
    </div>
    
<div class="form-inline niftyFifty">
    <div class="logo_with_text">
    
        <figure class="USDLogo"> <a href="/currency-getquote?symbol=USDINR#inr-contracts" target="_blank">
            <span id="usdinr">USDINR</span></a> &nbsp; <span id="futures" class="darkTxt">Futures</span>
        </figure>
        <p class="darkTxt"><span class="darkTxt">27-Dec-2024</span> | <i class="fa fa-inr" aria-hidden="true"></i><span class="home-header-currencyfuturelast">84.7725 </span></p>
        <p class="greyTxt currencyfuture-tradedate"><span>06-Dec-2024 17:00</span></p>
    </div>
</div>  
<div class="form-inline niftyFifty">
    <div class="logo_with_text">
    <figure class="USDLogo"> <a href="#"><span id="marketcapitalization">Market Capitalization</span></a></figure>
    <p class="darkTxt"><i class="fa fa-inr" aria-hidden="true"></i><span class="darkTxt"> Lac Crs 455.55</span> | <span> Tn $ 5.38</span></p>
    <p class="greyTxt"><span>06-Dec-2024</span></p>
    </div>
</div>

                        </div>
                    </div>
                </div>
            
        </div>
        <div class="container-fluid d-none d-sm-block">
            <div class="container navlinks-container posrel">
                <div class="collapse navbar-collapse" id="main_navbar" role="navigation">
    <ul class="navbar-nav me-auto ">
        
        <li class="nav-item   active">
            <a  class="nav-link dd-link" href="/" id="link_0"  >Home</a>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_1" aria-expanded=false >About</a>
            
            <div class="dropdown-menu" aria-labelledby="link_1">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>About NSE</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/national-stock-exchange/about-nse-company" target="">About Us</a></li><li class="nav-item"><a class="nav-link" href="/structure-key-personnel/corporate-structure" target="">Structure &amp; Key Personnel</a></li><li class="nav-item"><a class="nav-link" href="/investor-relations/announcements" target="">Investor Relations</a></li><li class="nav-item"><a class="nav-link" href="/national-stock-exchange/awards-recognition" target="">Awards and Recognitions</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-market-regulations-rules-byelaws-nseil" target="">Regulations</a></li><li class="nav-item"><a class="nav-link" href="/event-gallery" target="">Event Gallery</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-media-center" target="">Media</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-holidays" target="">Holidays</a></li><li class="nav-item"><a class="nav-link" href="/careers-at-nse" target="">Careers</a></li><li class="nav-item"><a class="nav-link" href="/contact/contact-us" target="">Contact Us</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>NSE Group companies</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/nse-academy/nse-academy-overview" target="">NSE Academy</a></li><li class="nav-item"><a class="nav-link" href="/nse-clearing" target="">NSE Clearing</a></li><li class="nav-item"><a class="nav-link" href="/nse-data-and-analytics" target="">NSE Data &amp; Analytics</a></li><li class="nav-item"><a class="nav-link" href="/nse-foundation/about-us" target="">NSE Foundation</a></li><li class="nav-item"><a class="nav-link" href="/nse-indices" target="">NSE Indices</a></li><li class="nav-item"><a class="nav-link" href="/nse-international-exchange/about" target="">NSE International Exchange</a></li><li class="nav-item"><a class="nav-link" href="/nseint_clearing/nse-international-clearing-overview" target="">NSE International Clearing</a></li><li class="nav-item"><a class="nav-link" href="/nse-investments" target="">NSE Investments</a></li><li class="nav-item"><a class="nav-link" href="/nseit" target="">NSEIT</a></li><li class="nav-item"><a class="nav-link" href="/national-stock-exchange/our-group" target="">View all</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Products &amp; Services</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/products-services/about-equity-market" target="">Equity Market</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-indices" target="">Indices</a></li><li class="nav-item"><a class="nav-link" href="/products-services/emerge-platform-about-sme" target="">Emerge Platform</a></li><li class="nav-item"><a class="nav-link" href="/products-services/mf-about-mfss" target="">Mutual Funds</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-equity-derivatives" target="">Equity Derivatives</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-currency-derivatives" target="">Currency Derivatives</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-commodity-derivatives" target="">Commodity Derivatives</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-interest-rate-derivatives" target="">Interest Rate Derivatives</a></li><li class="nav-item"><a class="nav-link" href="/products-services/fixed-income-debt-overview" target="">Fixed Income and Debt</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-initial-public-offerings" target="">Public Issues</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/national-stock-exchange/about-nse-company">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-08/about_nse.jpg" alt="About Us" title="About Us">
                        </figure>
                        <h4>About Us</h4>
                        <p>Find everything about the leading stock exchange of India</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/national-stock-exchange/our-group">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-08/gorup_companies.jpg" alt="Our Group" title="Our Group">
                        </figure>
                        <h4>Our Group</h4>
                        <p>Check NSE&#39;s group of the companies</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/products-services">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-08/products.jpg" alt="Our Products" title="Our Products">
                        </figure>
                        <h4>Our Products</h4>
                        <p>Browse a comprehensive and innovative product and service offerings by NSE</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_2" aria-expanded=false >Market Data</a>
            
            <div class="dropdown-menu" aria-labelledby="link_2">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Market Watch-Secondary Mkt products</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/market-data/pre-open-market-cm-and-emerge-market" target="">Pre-Open Market</a></li><li class="nav-item"><a class="nav-link" href="/market-data/live-equity-market" target="">Equity &amp; SME Market</a></li><li class="nav-item"><a class="nav-link" href="/market-data/equity-derivatives-watch" target="">Derivatives Market</a></li><li class="nav-item"><a class="nav-link" href="/market-data/live-market-indices" target="">Indices</a></li><li class="nav-item"><a class="nav-link" href="/market-data/bonds-traded-in-capital-market" target="">Fixed Income &amp; Debt Market</a></li><li class="nav-item"><a class="nav-link" href="/market-data/stocks-in-call-auction" target="">Securities in Periodic Call Auction Session</a></li><li class="nav-item"><a class="nav-link" href="/market-data/securities-lending-and-borrowing" target="">Securities Lending &amp; Borrowing</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Trade Information</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/market-data/securities-available-for-trading" target="">Securities available for Trading</a></li><li class="nav-item"><a class="nav-link" href="/market-data/securities-information-contracts-available-for-trading" target="">Contracts available for Trading</a></li><li class="nav-item"><a class="nav-link" href="/market-data/price-bands-surveillance-actions" target="">Price Bands &amp; Surveillance Actions</a></li><li class="nav-item"><a class="nav-link" href="/all-reports/historical-equities-fii-fpi-dii-trading-activity" target="">Position/Investment Limits</a></li><li class="nav-item"><a class="nav-link" href="/market-data/legend-of-series" target="">Legend of series</a></li><li class="nav-item"><a class="nav-link" href="/market-data/liquidity-enhancement-scheme" target="">Liquidity Enhancement Scheme</a></li><li class="nav-item"><a class="nav-link" href="/market-data/new-stock-exchange-listings-today" target="">New Listings</a></li><li class="nav-item"><a class="nav-link" href="/market-data/real-time-data-subscription" target="">Get Market Data</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Market Watch-Primary Mkt products</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ipo" target="">IPO</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs" target="">Offer For Sale</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-mutual-fund" target="">Mutual Fund</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ncb-gsec" target="">NCB G-SEC</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-ipp" target="">Institutional Placement Program (IPP)</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-tender-offer" target="">Tender Offer</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-rights" target="">Rights</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-invits" target="">INVITS</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-reits" target="">REITS</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-reverse-book-building" target="">Reverse Book Building</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/market-data/analysis-and-tools-capital-market-snapshot">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/market-snapshot_0.png" alt="Market Snapshot" title="Market Snapshot">
                        </figure>
                        <h4>Market Snapshot</h4>
                        <p>Live Analysis of top gainers/losers, most active securities/contracts, price band hitters, overview of the market.</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/option-chain">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/option-chain_0.png" alt="Option Chain" title="Option Chain">
                        </figure>
                        <h4>Option Chain</h4>
                        <p>View Option chain for the exchange</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/resources/historical-reports-capital-market-daily-monthly-archives">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-04/1_1_0.jpg" alt="Historical Reports" title="Historical Reports">
                        </figure>
                        <h4>Historical Reports</h4>
                        <p> View Historical Reports of securities/contracts traded on the Exchange.</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_3" aria-expanded=false >Invest</a>
            
            <div class="dropdown-menu" aria-labelledby="link_3">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Investor Education</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/invest/first-time-investor-getting-started" target="">Investing in Securities Market</a></li><li class="nav-item"><a class="nav-link" href="/invest/first-time-investor-products" target="">Product Segment</a></li><li class="nav-item"><a class="nav-link" href="/invest/first-time-investor-stamp-duty-charges-taxes" target="">Charges and Taxes</a></li><li class="nav-item"><a class="nav-link" href="/invest/first-time-investor-foreign-investment-limits" target="">Investment limits for FIIs</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Investor Awareness</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/invest/investor-charter" target="">Investor Charter</a></li><li class="nav-item"><a class="nav-link" href="/invest/be-a-smart-investor" target="">Protection from Fraud</a></li><li class="nav-item"><a class="nav-link" href="/invest/investors-awareness-programs" target="">Investor Awareness Programs</a></li><li class="nav-item"><a class="nav-link" href="/invest/investors-regulatory-actions" target="">Regulatory Action</a></li><li class="nav-item"><a class="nav-link" href="/registered-investors" target="">Registered Investors</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Resources &amp; Tools</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/invest/find-a-stock-broker" target="">Locate your Stock Broker</a></li><li class="nav-item"><a class="nav-link" href="/invest/company-listing-directory-resources-for-investors" target="">Company Directory</a></li><li class="nav-item"><a class="nav-link" href="/invest/exit-option-for-share-holders" target="">Exit Option for shareholders</a></li><li class="nav-item"><a class="nav-link" href="/invest/investors-feedback-form" target="">Feedback</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/invest/investors-home">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/investor-home.png" alt="Investor&#39;s Home" title="Investor&#39;s Home">
                        </figure>
                        <h4>Investor&#39;s Home</h4>
                        <p>Investor education on how to invest safely and protect your investments. </p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/invest/first-time-investor-products">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/product-home.png" alt="Product Information" title="Product Information">
                        </figure>
                        <h4>Product Information</h4>
                        <p>Browse NSE products under Cash, derivatives, currency derivatives etc.</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://smartodr.in/login">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-02/Artboard1.jpg" alt="LOGIN TO SMARTODR" title="LOGIN TO SMARTODR">
                        </figure>
                        <h4>LOGIN TO SMARTODR</h4>
                        <p>Online Dispute Resolution Mechanism for filing complaints</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_4" aria-expanded=false >List</a>
            
            <div class="dropdown-menu" aria-labelledby="link_4">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Raising Capital</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-onboarding-process" target="">On-boarding Process</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-public-issues-eligibility-equity-debt" target="">Primary Market - Main Board</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-public-issues-listing-on-emerge" target="">Primary Market - SME</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-debt-private-placement" target="">Debt - Private Placement</a></li><li class="nav-item"><a class="nav-link" href="/sse" target="">Social Stock Exchange</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-mutual-funds-etfs-process" target="">Mutual Fund/ETFs/AIFs</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-further-issues-main-sme-checklist" target="">Further Issues</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/public-issue-advertisements" target="">Public Issue Advertisements</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Corporate Filings</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-announcements" target="">Announcements</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-board-meetings" target="">Board Meetings</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-actions" target="">Corporate Actions</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-financial-results" target="">Financial Results</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-shareholding-pattern" target="">Shareholding Pattern</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-offer-documents" target="">Issuer Offer documents/Issue Summary Document</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-scheme-document" target="">Scheme of Arrangement</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Resources for Listed Companies</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/companies-listing/sebi-regulations" target="">SEBI Regulations</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/compliance-information-compliance-calendar-main-board" target="">Compliance Information</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/xbrl-information" target="">XBRL Information</a></li><li class="nav-item"><a class="nav-link" href="http://ec2-3-221-41-38.compute-1.amazonaws.com" target="_blank">XBRL To Excel Converter</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-directory" target="">Company Directory</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/circular-for-listed-companies-equity-market" target="">Circulars to Listed Companies</a></li><li class="nav-item"><a class="nav-link" href="https://neaps.nseindia.com/NEWLISTINGCORP/" target="">NEAPS Portal</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/companies-listing/corporate-filings-application">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/corporate-home.png" alt="Corporates Home" title="Corporates Home">
                        </figure>
                        <h4>Corporates Home</h4>
                        <p>Important information, reference material and latest announcements for corporates</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/regulations/listing-compliance">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/company-compliance-info.png" alt="Company Compliance Information" title="Company Compliance Information">
                        </figure>
                        <h4>Company Compliance Information</h4>
                        <p>Status of compliance&#39;s under various Regulatory requirements</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://iinvest.cogencis.com">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/Banner%201%20-%20100X%2080.png" alt="Cogencis iInvest" title="Cogencis iInvest">
                        </figure>
                        <h4>Cogencis iInvest</h4>
                        <p>Tool for informed investment decisions</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_5" aria-expanded=false >Trade</a>
            
            <div class="dropdown-menu" aria-labelledby="link_5">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Become a Member</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/trade/admission-process-documents-to-become-a-member" target="">Process &amp; FAQs</a></li><li class="nav-item"><a class="nav-link" href="/trade/membership-types" target="">Eligibility Criteria &amp; Categories</a></li><li class="nav-item"><a class="nav-link" href="/trade/deposits-networth-requirements-for-membership" target="">Fees, Deposits &amp; Networth</a></li><li class="nav-item"><a class="nav-link" href="/trade/membership-using-enit" target="">Using ENIT</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Resources for Members</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/trade/members-change-in-name" target="">Change In Membership</a></li><li class="nav-item"><a class="nav-link" href="/trade/members-compliance" target="">Member Compliance</a></li><li class="nav-item"><a class="nav-link" href="/trade/membership-suspension-expulsion" target="">Disciplinary Action</a></li><li class="nav-item"><a class="nav-link" href="/trade/membership-formats" target="">Format</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Platforms &amp; Services</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/trade/platform-services-neat-trading-system" target="">NSE Trading Technology</a></li><li class="nav-item"><a class="nav-link" href="/trade/platform-services-non-neat-front-end" target="">NEAT &amp; Non-NEAT Front end</a></li><li class="nav-item"><a class="nav-link" href="/trade/platform-services-test-and-simulated-market-facility" target="">Test Market Facility</a></li><li class="nav-item"><a class="nav-link" href="/trade/platform-services-connectivity" target="">Connectivity &amp; User Id</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/trade/members-homepage">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/members-home.png" alt="Member&#39;s Home" title="Member&#39;s Home">
                        </figure>
                        <h4>Member&#39;s Home</h4>
                        <p>Important Information, reference materials and latest announcements for members.</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://ims.connect2nsccl.com/MemberPortal/">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/members-portal.png" alt="Member Portal" title="Member Portal">
                        </figure>
                        <h4>Member Portal</h4>
                        <p>ENIT - A Portal for Trading Members of NSE to manage their Membership and Compliance requirements.</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/resources/exchange-communication-circulars">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/exchange-comunication.png" alt="Exchange Communication" title="Exchange Communication">
                        </figure>
                        <h4>Exchange Communication</h4>
                        <p>Browse Exchange circulars, press release and media articles.</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_6" aria-expanded=false >Regulation</a>
            
            <div class="dropdown-menu" aria-labelledby="link_6">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Exchange</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/regulations/exchange-market-regulations-rules-byelaws-nseil" target="">Market Rules &amp; Regulations</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-market-surveillance-actions" target="">Market Surveillance</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-disclosures-nsccl-iosco-core-sgf-default-waterfall" target="">Exchange Disclosures</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-defaulting-clients" target="">Defaulting Clients</a></li><li class="nav-item"><a class="nav-link" href="/regulations/unsolicited-messages-report" target="">Investor&#39;s Beware</a></li><li class="nav-item"><a class="nav-link" href="/submit-tipoff" target="">Submit a Tip-Off</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Member</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/trade/members-compliance" target="">Member Compliance</a></li><li class="nav-item"><a class="nav-link" href="/invest/complaint-arbitration-status" target="">Complaint against Members</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-market-surveillance-regulatory-actions" target="">Action against Members</a></li><li class="nav-item"><a class="nav-link" href="/regulations/member-sebi-debarred-entities" target="">Debarred Entities</a></li><li class="nav-item"><a class="nav-link" href="/regulations/member-circulars-for-members" target="">Circulars for Members</a></li><li class="nav-item"><a class="nav-link" href="/regulations/public-notice" target="">Public Notice</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Corporates</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/regulations/listing-compliance" target="">Company Compliance</a></li><li class="nav-item"><a class="nav-link" href="/regulations/clarification-verification-to-market-rumour" target="">Rumour Verification</a></li><li class="nav-item"><a class="nav-link" href="/regulations/list-of-companies-proposed-to-be-delisted" target="">Delisting of Companies</a></li><li class="nav-item"><a class="nav-link" href="/regulations/queries-raised-to-listed-companies" target="">Queries raised to Listed Companies</a></li><li class="nav-item"><a class="nav-link" href="/regulations/listing-compliance/non-compliant-companies-list" target="">List of Non-Compliant Companies</a></li><li class="nav-item"><a class="nav-link" href="/regulations/public-notice-compulsory-delisting" target="">Public Notice</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_7" aria-expanded=false >Learn</a>
            
            <div class="dropdown-menu" aria-labelledby="link_7">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Getting Started</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/learn/overview-about-nse-academy" target="">About NSE Academy</a></li><li class="nav-item"><a class="nav-link" href="/learn/process-to-register-ncfm-nse-certification-in-financial-markets" target="">Get started for NCFM</a></li><li class="nav-item"><a class="nav-link" href="/learn/self-study-ncfm-modules-all" target="">NCFM Certification Modules</a></li><li class="nav-item"><a class="nav-link" href="/learn/ncfm-prepare-for-a-test" target="">How to take a Test</a></li><li class="nav-item"><a class="nav-link" href="/learn/visit-nse-program" target="">Visit To NSE</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Courses/Programs</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/learn/interactive-courses" target="">Online Interactive Courses</a></li><li class="nav-item"><a class="nav-link" href="/learn/recorded-courses" target="">Online / Self-Paced Courses</a></li><li class="nav-item"><a class="nav-link" href="/learn/class-room-courses" target="">Class Room Courses</a></li><li class="nav-item"><a class="nav-link" href="/learn/enterprise-training" target="">Enterprise Training</a></li><li class="nav-item"><a class="nav-link" href="/learn/nse-international-certificate-program" target="">International Certificate Program</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Student Requirement</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/learn/courses-for-under-graduates" target="">Modules for Under graduates</a></li><li class="nav-item"><a class="nav-link" href="/learn/courses-for-dealers" target="">Post Graduate Programs</a></li><li class="nav-item"><a class="nav-link" href="/learn/courses-for-working-professionals" target="">Modules for Professionals</a></li><li class="nav-item"><a class="nav-link" href="/learn/certification-modules/getting-started" target="">Certification Modules</a></li><li class="nav-item"><a class="nav-link" href="/learn/academic-calendar" target="">Program Calendar</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/learn/find-a-course">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-10/find-a-course_0.png" alt="Find a course" title="Find a course">
                        </figure>
                        <h4>Find a course</h4>
                        <p>Click here to find a course</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/learn/nse-knowledge-hub">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-08/NSEKH%20theme.jpg" alt="NSE Knowledge Hub" title="NSE Knowledge Hub">
                        </figure>
                        <h4>NSE Knowledge Hub</h4>
                        <p>Click here to join the platform</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.ncfm-india.com/ORE/OREloginPage.jsp">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/NCFM.png" alt="NCFM Login" title="NCFM Login">
                        </figure>
                        <h4>NCFM Login</h4>
                        <p>NCFM Portal for online testing and certification programmes offered by NSE Academy.</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_8" aria-expanded=false >Resources</a>
            
            <div class="dropdown-menu" aria-labelledby="link_8">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Exchange Communication</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-circulars" target="">Circulars</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-press-releases" target="">Press Releases</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-holidays" target="">Holidays</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-contingency-drill-calendar" target="">Contingency Drill</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-media-queries" target="">Media Center</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Downloads</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/all-reports" target="">Daily Market Reports</a></li><li class="nav-item"><a class="nav-link" href="/resources/historical-reports-capital-market-daily-monthly-archives" target="">Historical Reports</a></li><li class="nav-item"><a class="nav-link" href="/resources/forms-formats-members" target="">Forms &amp; Formats</a></li><li class="nav-item"><a class="nav-link" href="/national-stock-exchange/nse-volume-business-growth" target="">Business Growth &amp; Volume</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Historical Reports</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/report-detail/eq_security" target="">Security-wise Price Volume Archives</a></li><li class="nav-item"><a class="nav-link" href="/report-detail/fo_eq_security" target="">Contract-wise Price Volume Archives</a></li><li class="nav-item"><a class="nav-link" href="/historical-spot-price" target="">Historical Spot Rate</a></li><li class="nav-item"><a class="nav-link" href="/reports-indices-historical-index-data" target="">Historical Index Data</a></li><li class="nav-item"><a class="nav-link" href="/reports-indices-historical-vix" target="">Historical Data - India Vix</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/resources/exchange-communication-circulars">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2021-05/Exchange_communication-100x80.png" alt="Exchange Communication" title="Exchange Communication">
                        </figure>
                        <h4>Exchange Communication</h4>
                        <p>Find all communication issued by the Exchange in this section</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/all-reports">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2021-05/Daily_reports-100x80.png" alt="Downloads" title="Downloads">
                        </figure>
                        <h4>Downloads</h4>
                        <p>Daily and Archive Reports, Formats and Business Growth download it here</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_9" aria-expanded=false >Complaints</a>
            
            <div class="dropdown-menu" aria-labelledby="link_9">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Introduction</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/complaints/complaint-at-exchange" target="">Brief Overview</a></li><li class="nav-item"><a class="nav-link" href="/complaints/process-of-making-a-complaint" target="">Process</a></li><li class="nav-item"><a class="nav-link" href="/complaints/online-dispute-resolution" target="">Online Dispute Resolution</a></li><li class="nav-item"><a class="nav-link" href="/complaints/arbitration-panel" target="">Arbitration Panel</a></li><li class="nav-item"><a class="nav-link" href="/complaints/defaulters-committee" target="">Members Committee (formerly Member and Core Settlement Guarantee Fund Committee)</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Complaint filing</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/complaints/file-a-complaint-online" target="">How to Lodge a complaint online and Track your complaint</a></li><li class="nav-item"><a class="nav-link" href="/complaints/about-arbitration" target="">Filing Arbitration/Appellate</a></li><li class="nav-item"><a class="nav-link" href="/complaints/about-defaulter-section" target="">Defaulter Committee Claim</a></li><li class="nav-item"><a class="nav-link" href="/complaints/details-to-be-provided-for-lodging-claims" target="">Details to be provided for lodging claims</a></li><li class="nav-item"><a class="nav-link" href="/complaints/submit-tipoff" target="">Anonymous Portal - Suspicious activity</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Information</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/complaints/defaulter-expelled-members" target="">Defaulter/Expelled Members</a></li><li class="nav-item"><a class="nav-link" href="/complaints/arbitration-hearing" target="">Arbitration/Appellate Hearing</a></li><li class="nav-item"><a class="nav-link" href="/complaints/arbitration-awards" target="">Arbitration/Appellate Awards</a></li><li class="nav-item"><a class="nav-link" href="/complaints/investor-protection-fund-trust" target="">Investor Protection Trust Fund</a></li><li class="nav-item"><a class="nav-link" href="/complaints/complaints-public-notice" target="">Public Notice</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://smartodr.in/login">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-09/Artboard1.jpg" alt="LOGIN TO SMARTODR " title="LOGIN TO SMARTODR ">
                        </figure>
                        <h4>LOGIN TO SMARTODR </h4>
                        <p>Online Dispute Resolution Mechanism for filing complaints  </p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/complaints/arbitration-status">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-07/2.jpg" alt="Reports" title="Reports">
                        </figure>
                        <h4>Reports</h4>
                        <p>Periodic reports pertaining to complaints/arbitration</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/contact/contact-us">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-07/3.jpg" alt="Investor Services Centre" title="Investor Services Centre">
                        </figure>
                        <h4>Investor Services Centre</h4>
                        <p>Contact details of all Investor Services Centre</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
        <li class="nav-item dropdown  ">
            <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_10" aria-expanded=false >RESEARCH</a>
            
            <div class="dropdown-menu" aria-labelledby="link_10">
                <div class="container">
                <div class="row mrow">
                
                    <div class="col-md-4">
                    <h3>Publications</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/research/publications-reports-nse-market-pulse" target="">Market Pulse</a></li><li class="nav-item"><a class="nav-link" href="/research/publications-reports-nse-market-insights" target="">Macro &amp; Market Insights</a></li><li class="nav-item"><a class="nav-link" href="/research/publications-reports-corporate-governance-reports" target="">Corporate Governance</a></li><li class="nav-item"><a class="nav-link" href="/research/publications-reports-nse-market-insights" target="">Factbook &amp; ISMR</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Initiatives</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/research/research-initiatives" target="">NSE RI</a></li><li class="nav-item"><a class="nav-link" href="/research/research-initiatives" target="">Ongoing</a></li><li class="nav-item"><a class="nav-link" href="/research/working-papers" target="">Working Paper Series</a></li><li class="nav-item"><a class="nav-link" href="/research/past-initiatives" target="">Past Initiatives</a></li>
                        </ul>
                    </div>
                
                    <div class="col-md-4">
                    <h3>Engagements</h3>
                        <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/research/events-upcoming-programs" target="">Upcoming Programs</a></li><li class="nav-item"><a class="nav-link" href="/research/events-seminars-panel-dicussions" target="">Seminars &amp; Panel Discussions</a></li><li class="nav-item"><a class="nav-link" href="/research/events-conferences" target="">Conferences</a></li><li class="nav-item"><a class="nav-link" href="/research/events-lecture-series" target="">Lecture Series</a></li>
                        </ul>
                    </div>
                
                </div>
                </div>
            
                <div class="btm_row_ddmenu">
                <div class="container">
                <div class="row">
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/research/research-overview">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/Publications.png" alt="Overview" title="Overview">
                        </figure>
                        <h4>Overview</h4>
                        <p>Macro and financial market research, thought-provoking discussions, policy advocacy and more..</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/research/research-initiatives">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/Initiavtives.png" alt="Initiatives" title="Initiatives">
                        </figure>
                        <h4>Initiatives</h4>
                        <p>Plans and actions to promote and advance research in financial markets</p>
                    </a>
                </div>
                </div>
                
                <div class="col-md-4 menuFootNote" title="">
                <div class="content">
                    <a href="https://www.nseindia.com/research/events-seminars-panel-dicussions">
                        <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/Engagement.png" alt="Engagements" title="Engagements">
                        </figure>
                        <h4>Engagements</h4>
                        <p>Bringing together academia, industry and other stakeholders
</p>
                    </a>
                </div>
                </div>
                
                </div>
                </div>
                </div>
            
            </div>
            
        </li>
        
    </ul>
                </div>
            </div>
        </div>
    </nav>
</header>
<!-- Condition for Mobile Design -->

    
    <div class="container top_logomenu">
    <div id="nseMarketStatus" class="form-inline top-right ms-auto my-2 my-lg-0 niftyMarket d-lg-none d-md-none d-sm-none d-xs-block indicativeClosing_wrapper">
        <div class="innerContainer"><div class="form-inline niftyFifty">
  <div class="logo_with_text">
    <figure class="capitalLogo">
        <a href="/market-data/live-equity-market?symbol=NIFTY%2050" target="_blank"><img src="/assets/images/logo_nifty50.png" alt="NSE - NIFTY 50" title="NSE - NIFTY 50"></a>
    </figure>
  </div>
  <div class="head-carousel">
     
      <div class="mkt_widget">
        <div id="marketStat-nifty50" class="widget_head marketStat-nifty50">
          <div class="index_val"><span class="val ltp">24,677.80</span>
                  <i class="market-up-down fa fa-caret-down cool-red"></i>
          </div>
          <span  class="per redTxt" >
             <span> -30.60</span> (<span>-0.12</span>%)</span>
        </div>
        <div class="widget_body">
            <p class="next_date"><span class="nifty50-tradedate">06-Dec-2024 15:30</span></p>
        </div>
      </div>
  </div>
</div>
                       
            <div id="slickcarousel-widget-parent" class="slick-class">
              
    <div class="form-inline niftyFifty">
        <div class="mkt_widget indicative_closing px-0" style="border: 0;">
            <div id="marketStat-giftnifty" class="widget_head marketStat-giftnifty">
                <div class="giftNifty">
                    <img src="/assets/images/gift-nifty.png" alt="GiftNifty"><span class="expirydate">Futures 26-Dec-2024</span>
                </div>
                <div class="logo_with_text giftNifty_val">
                    <span><span class="lastprice">24,743.00</span>
                        <i class="market-up-down fa fa-caret-down cool-red"></i>
                        <span  class="per redTxt" >
                            <span> -25.00</span> (<span>-0.10</span>%)</span>
                    </span>
                </div>
            </div>
            <div class="widget_body" style="margin-top: -4px;">
                <p class="next_date">
                    <span class="giftnifty-tradedate">06-Dec-2024 22:05</span>
                </p>
            </div>
        </div>
    </div>
    
<div class="form-inline niftyFifty">
    <div class="logo_with_text">
    
        <figure class="USDLogo"> <a href="/currency-getquote?symbol=USDINR#inr-contracts" target="_blank">
            <span id="usdinr">USDINR</span></a> &nbsp; <span id="futures" class="darkTxt">Futures</span>
        </figure>
        <p class="darkTxt"><span class="darkTxt">27-Dec-2024</span> | <i class="fa fa-inr" aria-hidden="true"></i><span class="home-header-currencyfuturelast">84.7725 </span></p>
        <p class="greyTxt currencyfuture-tradedate"><span>06-Dec-2024 17:00</span></p>
    </div>
</div>  
<div class="form-inline niftyFifty">
    <div class="logo_with_text">
    <figure class="USDLogo"> <a href="#"><span id="marketcapitalization">Market Capitalization</span></a></figure>
    <p class="darkTxt"><i class="fa fa-inr" aria-hidden="true"></i><span class="darkTxt"> Lac Crs 455.55</span> | <span> Tn $ 5.38</span></p>
    <p class="greyTxt"><span>06-Dec-2024</span></p>
    </div>
</div>

            </div>
        </div>
     </div>
    </div>
    <div class="container-fluid d-lg-none d-md-none d-sm-none d-xs-block px-0">
    <nav class="navbar navbar-light menu_mobile_toggle">
        <div class="menu_toggle_wrapper">
            <button class="navbar-toggler mobile_hamburger" type="button" data-bs-toggle="collapse" data-bs-target="#main_navbar" aria-controls="main_navbar" aria-expanded="false" aria-label="Toggle navigation"> Menu
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
        <div class="container navlinks-container posrel">
        <div class="collapse navbar-collapse" id="main_navbar" role="navigation">
            <ul class="navbar-nav me-auto ">
            
                <li class="nav-item   active">
                    <a  class="nav-link dd-link" href="/" id="link_0"  >Home</a>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_1" aria-expanded=false >About</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_1">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>About NSE</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/national-stock-exchange/about-nse-company" target="">About Us</a></li><li class="nav-item"><a class="nav-link" href="/structure-key-personnel/corporate-structure" target="">Structure &amp; Key Personnel</a></li><li class="nav-item"><a class="nav-link" href="/investor-relations/announcements" target="">Investor Relations</a></li><li class="nav-item"><a class="nav-link" href="/national-stock-exchange/awards-recognition" target="">Awards and Recognitions</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-market-regulations-rules-byelaws-nseil" target="">Regulations</a></li><li class="nav-item"><a class="nav-link" href="/event-gallery" target="">Event Gallery</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-media-center" target="">Media</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-holidays" target="">Holidays</a></li><li class="nav-item"><a class="nav-link" href="/careers-at-nse" target="">Careers</a></li><li class="nav-item"><a class="nav-link" href="/contact/contact-us" target="">Contact Us</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>NSE Group companies</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/nse-academy/nse-academy-overview" target="">NSE Academy</a></li><li class="nav-item"><a class="nav-link" href="/nse-clearing" target="">NSE Clearing</a></li><li class="nav-item"><a class="nav-link" href="/nse-data-and-analytics" target="">NSE Data &amp; Analytics</a></li><li class="nav-item"><a class="nav-link" href="/nse-foundation/about-us" target="">NSE Foundation</a></li><li class="nav-item"><a class="nav-link" href="/nse-indices" target="">NSE Indices</a></li><li class="nav-item"><a class="nav-link" href="/nse-international-exchange/about" target="">NSE International Exchange</a></li><li class="nav-item"><a class="nav-link" href="/nseint_clearing/nse-international-clearing-overview" target="">NSE International Clearing</a></li><li class="nav-item"><a class="nav-link" href="/nse-investments" target="">NSE Investments</a></li><li class="nav-item"><a class="nav-link" href="/nseit" target="">NSEIT</a></li><li class="nav-item"><a class="nav-link" href="/national-stock-exchange/our-group" target="">View all</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Products &amp; Services</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/products-services/about-equity-market" target="">Equity Market</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-indices" target="">Indices</a></li><li class="nav-item"><a class="nav-link" href="/products-services/emerge-platform-about-sme" target="">Emerge Platform</a></li><li class="nav-item"><a class="nav-link" href="/products-services/mf-about-mfss" target="">Mutual Funds</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-equity-derivatives" target="">Equity Derivatives</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-currency-derivatives" target="">Currency Derivatives</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-commodity-derivatives" target="">Commodity Derivatives</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-interest-rate-derivatives" target="">Interest Rate Derivatives</a></li><li class="nav-item"><a class="nav-link" href="/products-services/fixed-income-debt-overview" target="">Fixed Income and Debt</a></li><li class="nav-item"><a class="nav-link" href="/products-services/about-initial-public-offerings" target="">Public Issues</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/national-stock-exchange/about-nse-company">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-08/about_nse.jpg" alt="About Us" title="About Us">
                            </figure>
                            <h4>About Us</h4>
                            <p>Find everything about the leading stock exchange of India</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/national-stock-exchange/our-group">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-08/gorup_companies.jpg" alt="Our Group" title="Our Group">
                            </figure>
                            <h4>Our Group</h4>
                            <p>Check NSE&#39;s group of the companies</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/products-services">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-08/products.jpg" alt="Our Products" title="Our Products">
                            </figure>
                            <h4>Our Products</h4>
                            <p>Browse a comprehensive and innovative product and service offerings by NSE</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_2" aria-expanded=false >Market Data</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_2">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Market Watch-Secondary Mkt products</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/market-data/pre-open-market-cm-and-emerge-market" target="">Pre-Open Market</a></li><li class="nav-item"><a class="nav-link" href="/market-data/live-equity-market" target="">Equity &amp; SME Market</a></li><li class="nav-item"><a class="nav-link" href="/market-data/equity-derivatives-watch" target="">Derivatives Market</a></li><li class="nav-item"><a class="nav-link" href="/market-data/live-market-indices" target="">Indices</a></li><li class="nav-item"><a class="nav-link" href="/market-data/bonds-traded-in-capital-market" target="">Fixed Income &amp; Debt Market</a></li><li class="nav-item"><a class="nav-link" href="/market-data/stocks-in-call-auction" target="">Securities in Periodic Call Auction Session</a></li><li class="nav-item"><a class="nav-link" href="/market-data/securities-lending-and-borrowing" target="">Securities Lending &amp; Borrowing</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Trade Information</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/market-data/securities-available-for-trading" target="">Securities available for Trading</a></li><li class="nav-item"><a class="nav-link" href="/market-data/securities-information-contracts-available-for-trading" target="">Contracts available for Trading</a></li><li class="nav-item"><a class="nav-link" href="/market-data/price-bands-surveillance-actions" target="">Price Bands &amp; Surveillance Actions</a></li><li class="nav-item"><a class="nav-link" href="/all-reports/historical-equities-fii-fpi-dii-trading-activity" target="">Position/Investment Limits</a></li><li class="nav-item"><a class="nav-link" href="/market-data/legend-of-series" target="">Legend of series</a></li><li class="nav-item"><a class="nav-link" href="/market-data/liquidity-enhancement-scheme" target="">Liquidity Enhancement Scheme</a></li><li class="nav-item"><a class="nav-link" href="/market-data/new-stock-exchange-listings-today" target="">New Listings</a></li><li class="nav-item"><a class="nav-link" href="/market-data/real-time-data-subscription" target="">Get Market Data</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Market Watch-Primary Mkt products</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ipo" target="">IPO</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs" target="">Offer For Sale</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-mutual-fund" target="">Mutual Fund</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ncb-gsec" target="">NCB G-SEC</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-ipp" target="">Institutional Placement Program (IPP)</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-tender-offer" target="">Tender Offer</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-rights" target="">Rights</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-invits" target="">INVITS</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-reits" target="">REITS</a></li><li class="nav-item"><a class="nav-link" href="/market-data/all-upcoming-issues-ofs-reverse-book-building" target="">Reverse Book Building</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/market-data/analysis-and-tools-capital-market-snapshot">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/market-snapshot_0.png" alt="Market Snapshot" title="Market Snapshot">
                            </figure>
                            <h4>Market Snapshot</h4>
                            <p>Live Analysis of top gainers/losers, most active securities/contracts, price band hitters, overview of the market.</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/option-chain">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/option-chain_0.png" alt="Option Chain" title="Option Chain">
                            </figure>
                            <h4>Option Chain</h4>
                            <p>View Option chain for the exchange</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/resources/historical-reports-capital-market-daily-monthly-archives">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-04/1_1_0.jpg" alt="Historical Reports" title="Historical Reports">
                            </figure>
                            <h4>Historical Reports</h4>
                            <p> View Historical Reports of securities/contracts traded on the Exchange.</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_3" aria-expanded=false >Invest</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_3">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Investor Education</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/invest/first-time-investor-getting-started" target="">Investing in Securities Market</a></li><li class="nav-item"><a class="nav-link" href="/invest/first-time-investor-products" target="">Product Segment</a></li><li class="nav-item"><a class="nav-link" href="/invest/first-time-investor-stamp-duty-charges-taxes" target="">Charges and Taxes</a></li><li class="nav-item"><a class="nav-link" href="/invest/first-time-investor-foreign-investment-limits" target="">Investment limits for FIIs</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Investor Awareness</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/invest/investor-charter" target="">Investor Charter</a></li><li class="nav-item"><a class="nav-link" href="/invest/be-a-smart-investor" target="">Protection from Fraud</a></li><li class="nav-item"><a class="nav-link" href="/invest/investors-awareness-programs" target="">Investor Awareness Programs</a></li><li class="nav-item"><a class="nav-link" href="/invest/investors-regulatory-actions" target="">Regulatory Action</a></li><li class="nav-item"><a class="nav-link" href="/registered-investors" target="">Registered Investors</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Resources &amp; Tools</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/invest/find-a-stock-broker" target="">Locate your Stock Broker</a></li><li class="nav-item"><a class="nav-link" href="/invest/company-listing-directory-resources-for-investors" target="">Company Directory</a></li><li class="nav-item"><a class="nav-link" href="/invest/exit-option-for-share-holders" target="">Exit Option for shareholders</a></li><li class="nav-item"><a class="nav-link" href="/invest/investors-feedback-form" target="">Feedback</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/invest/investors-home">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/investor-home.png" alt="Investor&#39;s Home" title="Investor&#39;s Home">
                            </figure>
                            <h4>Investor&#39;s Home</h4>
                            <p>Investor education on how to invest safely and protect your investments. </p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/invest/first-time-investor-products">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/product-home.png" alt="Product Information" title="Product Information">
                            </figure>
                            <h4>Product Information</h4>
                            <p>Browse NSE products under Cash, derivatives, currency derivatives etc.</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://smartodr.in/login">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-02/Artboard1.jpg" alt="LOGIN TO SMARTODR" title="LOGIN TO SMARTODR">
                            </figure>
                            <h4>LOGIN TO SMARTODR</h4>
                            <p>Online Dispute Resolution Mechanism for filing complaints</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_4" aria-expanded=false >List</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_4">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Raising Capital</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-onboarding-process" target="">On-boarding Process</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-public-issues-eligibility-equity-debt" target="">Primary Market - Main Board</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-public-issues-listing-on-emerge" target="">Primary Market - SME</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-debt-private-placement" target="">Debt - Private Placement</a></li><li class="nav-item"><a class="nav-link" href="/sse" target="">Social Stock Exchange</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-mutual-funds-etfs-process" target="">Mutual Fund/ETFs/AIFs</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/raising-capital-further-issues-main-sme-checklist" target="">Further Issues</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/public-issue-advertisements" target="">Public Issue Advertisements</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Corporate Filings</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-announcements" target="">Announcements</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-board-meetings" target="">Board Meetings</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-actions" target="">Corporate Actions</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-financial-results" target="">Financial Results</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-shareholding-pattern" target="">Shareholding Pattern</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-offer-documents" target="">Issuer Offer documents/Issue Summary Document</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-scheme-document" target="">Scheme of Arrangement</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Resources for Listed Companies</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/companies-listing/sebi-regulations" target="">SEBI Regulations</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/compliance-information-compliance-calendar-main-board" target="">Compliance Information</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/xbrl-information" target="">XBRL Information</a></li><li class="nav-item"><a class="nav-link" href="http://ec2-3-221-41-38.compute-1.amazonaws.com" target="_blank">XBRL To Excel Converter</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/corporate-filings-directory" target="">Company Directory</a></li><li class="nav-item"><a class="nav-link" href="/companies-listing/circular-for-listed-companies-equity-market" target="">Circulars to Listed Companies</a></li><li class="nav-item"><a class="nav-link" href="https://neaps.nseindia.com/NEWLISTINGCORP/" target="">NEAPS Portal</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/companies-listing/corporate-filings-application">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/corporate-home.png" alt="Corporates Home" title="Corporates Home">
                            </figure>
                            <h4>Corporates Home</h4>
                            <p>Important information, reference material and latest announcements for corporates</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/regulations/listing-compliance">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/company-compliance-info.png" alt="Company Compliance Information" title="Company Compliance Information">
                            </figure>
                            <h4>Company Compliance Information</h4>
                            <p>Status of compliance&#39;s under various Regulatory requirements</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://iinvest.cogencis.com">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/Banner%201%20-%20100X%2080.png" alt="Cogencis iInvest" title="Cogencis iInvest">
                            </figure>
                            <h4>Cogencis iInvest</h4>
                            <p>Tool for informed investment decisions</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_5" aria-expanded=false >Trade</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_5">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Become a Member</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/trade/admission-process-documents-to-become-a-member" target="">Process &amp; FAQs</a></li><li class="nav-item"><a class="nav-link" href="/trade/membership-types" target="">Eligibility Criteria &amp; Categories</a></li><li class="nav-item"><a class="nav-link" href="/trade/deposits-networth-requirements-for-membership" target="">Fees, Deposits &amp; Networth</a></li><li class="nav-item"><a class="nav-link" href="/trade/membership-using-enit" target="">Using ENIT</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Resources for Members</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/trade/members-change-in-name" target="">Change In Membership</a></li><li class="nav-item"><a class="nav-link" href="/trade/members-compliance" target="">Member Compliance</a></li><li class="nav-item"><a class="nav-link" href="/trade/membership-suspension-expulsion" target="">Disciplinary Action</a></li><li class="nav-item"><a class="nav-link" href="/trade/membership-formats" target="">Format</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Platforms &amp; Services</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/trade/platform-services-neat-trading-system" target="">NSE Trading Technology</a></li><li class="nav-item"><a class="nav-link" href="/trade/platform-services-non-neat-front-end" target="">NEAT &amp; Non-NEAT Front end</a></li><li class="nav-item"><a class="nav-link" href="/trade/platform-services-test-and-simulated-market-facility" target="">Test Market Facility</a></li><li class="nav-item"><a class="nav-link" href="/trade/platform-services-connectivity" target="">Connectivity &amp; User Id</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/trade/members-homepage">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/members-home.png" alt="Member&#39;s Home" title="Member&#39;s Home">
                            </figure>
                            <h4>Member&#39;s Home</h4>
                            <p>Important Information, reference materials and latest announcements for members.</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://ims.connect2nsccl.com/MemberPortal/">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/members-portal.png" alt="Member Portal" title="Member Portal">
                            </figure>
                            <h4>Member Portal</h4>
                            <p>ENIT - A Portal for Trading Members of NSE to manage their Membership and Compliance requirements.</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/resources/exchange-communication-circulars">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/exchange-comunication.png" alt="Exchange Communication" title="Exchange Communication">
                            </figure>
                            <h4>Exchange Communication</h4>
                            <p>Browse Exchange circulars, press release and media articles.</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_6" aria-expanded=false >Regulation</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_6">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Exchange</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/regulations/exchange-market-regulations-rules-byelaws-nseil" target="">Market Rules &amp; Regulations</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-market-surveillance-actions" target="">Market Surveillance</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-disclosures-nsccl-iosco-core-sgf-default-waterfall" target="">Exchange Disclosures</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-defaulting-clients" target="">Defaulting Clients</a></li><li class="nav-item"><a class="nav-link" href="/regulations/unsolicited-messages-report" target="">Investor&#39;s Beware</a></li><li class="nav-item"><a class="nav-link" href="/submit-tipoff" target="">Submit a Tip-Off</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Member</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/trade/members-compliance" target="">Member Compliance</a></li><li class="nav-item"><a class="nav-link" href="/invest/complaint-arbitration-status" target="">Complaint against Members</a></li><li class="nav-item"><a class="nav-link" href="/regulations/exchange-market-surveillance-regulatory-actions" target="">Action against Members</a></li><li class="nav-item"><a class="nav-link" href="/regulations/member-sebi-debarred-entities" target="">Debarred Entities</a></li><li class="nav-item"><a class="nav-link" href="/regulations/member-circulars-for-members" target="">Circulars for Members</a></li><li class="nav-item"><a class="nav-link" href="/regulations/public-notice" target="">Public Notice</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Corporates</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/regulations/listing-compliance" target="">Company Compliance</a></li><li class="nav-item"><a class="nav-link" href="/regulations/clarification-verification-to-market-rumour" target="">Rumour Verification</a></li><li class="nav-item"><a class="nav-link" href="/regulations/list-of-companies-proposed-to-be-delisted" target="">Delisting of Companies</a></li><li class="nav-item"><a class="nav-link" href="/regulations/queries-raised-to-listed-companies" target="">Queries raised to Listed Companies</a></li><li class="nav-item"><a class="nav-link" href="/regulations/listing-compliance/non-compliant-companies-list" target="">List of Non-Compliant Companies</a></li><li class="nav-item"><a class="nav-link" href="/regulations/public-notice-compulsory-delisting" target="">Public Notice</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_7" aria-expanded=false >Learn</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_7">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Getting Started</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/learn/overview-about-nse-academy" target="">About NSE Academy</a></li><li class="nav-item"><a class="nav-link" href="/learn/process-to-register-ncfm-nse-certification-in-financial-markets" target="">Get started for NCFM</a></li><li class="nav-item"><a class="nav-link" href="/learn/self-study-ncfm-modules-all" target="">NCFM Certification Modules</a></li><li class="nav-item"><a class="nav-link" href="/learn/ncfm-prepare-for-a-test" target="">How to take a Test</a></li><li class="nav-item"><a class="nav-link" href="/learn/visit-nse-program" target="">Visit To NSE</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Courses/Programs</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/learn/interactive-courses" target="">Online Interactive Courses</a></li><li class="nav-item"><a class="nav-link" href="/learn/recorded-courses" target="">Online / Self-Paced Courses</a></li><li class="nav-item"><a class="nav-link" href="/learn/class-room-courses" target="">Class Room Courses</a></li><li class="nav-item"><a class="nav-link" href="/learn/enterprise-training" target="">Enterprise Training</a></li><li class="nav-item"><a class="nav-link" href="/learn/nse-international-certificate-program" target="">International Certificate Program</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Student Requirement</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/learn/courses-for-under-graduates" target="">Modules for Under graduates</a></li><li class="nav-item"><a class="nav-link" href="/learn/courses-for-dealers" target="">Post Graduate Programs</a></li><li class="nav-item"><a class="nav-link" href="/learn/courses-for-working-professionals" target="">Modules for Professionals</a></li><li class="nav-item"><a class="nav-link" href="/learn/certification-modules/getting-started" target="">Certification Modules</a></li><li class="nav-item"><a class="nav-link" href="/learn/academic-calendar" target="">Program Calendar</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/learn/find-a-course">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-10/find-a-course_0.png" alt="Find a course" title="Find a course">
                            </figure>
                            <h4>Find a course</h4>
                            <p>Click here to find a course</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/learn/nse-knowledge-hub">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2020-08/NSEKH%20theme.jpg" alt="NSE Knowledge Hub" title="NSE Knowledge Hub">
                            </figure>
                            <h4>NSE Knowledge Hub</h4>
                            <p>Click here to join the platform</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.ncfm-india.com/ORE/OREloginPage.jsp">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2019-07/NCFM.png" alt="NCFM Login" title="NCFM Login">
                            </figure>
                            <h4>NCFM Login</h4>
                            <p>NCFM Portal for online testing and certification programmes offered by NSE Academy.</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_8" aria-expanded=false >Resources</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_8">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Exchange Communication</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-circulars" target="">Circulars</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-press-releases" target="">Press Releases</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-holidays" target="">Holidays</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-contingency-drill-calendar" target="">Contingency Drill</a></li><li class="nav-item"><a class="nav-link" href="/resources/exchange-communication-media-queries" target="">Media Center</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Downloads</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/all-reports" target="">Daily Market Reports</a></li><li class="nav-item"><a class="nav-link" href="/resources/historical-reports-capital-market-daily-monthly-archives" target="">Historical Reports</a></li><li class="nav-item"><a class="nav-link" href="/resources/forms-formats-members" target="">Forms &amp; Formats</a></li><li class="nav-item"><a class="nav-link" href="/national-stock-exchange/nse-volume-business-growth" target="">Business Growth &amp; Volume</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Historical Reports</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/report-detail/eq_security" target="">Security-wise Price Volume Archives</a></li><li class="nav-item"><a class="nav-link" href="/report-detail/fo_eq_security" target="">Contract-wise Price Volume Archives</a></li><li class="nav-item"><a class="nav-link" href="/historical-spot-price" target="">Historical Spot Rate</a></li><li class="nav-item"><a class="nav-link" href="/reports-indices-historical-index-data" target="">Historical Index Data</a></li><li class="nav-item"><a class="nav-link" href="/reports-indices-historical-vix" target="">Historical Data - India Vix</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/resources/exchange-communication-circulars">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2021-05/Exchange_communication-100x80.png" alt="Exchange Communication" title="Exchange Communication">
                            </figure>
                            <h4>Exchange Communication</h4>
                            <p>Find all communication issued by the Exchange in this section</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/all-reports">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2021-05/Daily_reports-100x80.png" alt="Downloads" title="Downloads">
                            </figure>
                            <h4>Downloads</h4>
                            <p>Daily and Archive Reports, Formats and Business Growth download it here</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_9" aria-expanded=false >Complaints</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_9">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Introduction</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/complaints/complaint-at-exchange" target="">Brief Overview</a></li><li class="nav-item"><a class="nav-link" href="/complaints/process-of-making-a-complaint" target="">Process</a></li><li class="nav-item"><a class="nav-link" href="/complaints/online-dispute-resolution" target="">Online Dispute Resolution</a></li><li class="nav-item"><a class="nav-link" href="/complaints/arbitration-panel" target="">Arbitration Panel</a></li><li class="nav-item"><a class="nav-link" href="/complaints/defaulters-committee" target="">Members Committee (formerly Member and Core Settlement Guarantee Fund Committee)</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Complaint filing</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/complaints/file-a-complaint-online" target="">How to Lodge a complaint online and Track your complaint</a></li><li class="nav-item"><a class="nav-link" href="/complaints/about-arbitration" target="">Filing Arbitration/Appellate</a></li><li class="nav-item"><a class="nav-link" href="/complaints/about-defaulter-section" target="">Defaulter Committee Claim</a></li><li class="nav-item"><a class="nav-link" href="/complaints/details-to-be-provided-for-lodging-claims" target="">Details to be provided for lodging claims</a></li><li class="nav-item"><a class="nav-link" href="/complaints/submit-tipoff" target="">Anonymous Portal - Suspicious activity</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Information</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/complaints/defaulter-expelled-members" target="">Defaulter/Expelled Members</a></li><li class="nav-item"><a class="nav-link" href="/complaints/arbitration-hearing" target="">Arbitration/Appellate Hearing</a></li><li class="nav-item"><a class="nav-link" href="/complaints/arbitration-awards" target="">Arbitration/Appellate Awards</a></li><li class="nav-item"><a class="nav-link" href="/complaints/investor-protection-fund-trust" target="">Investor Protection Trust Fund</a></li><li class="nav-item"><a class="nav-link" href="/complaints/complaints-public-notice" target="">Public Notice</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://smartodr.in/login">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-09/Artboard1.jpg" alt="LOGIN TO SMARTODR " title="LOGIN TO SMARTODR ">
                            </figure>
                            <h4>LOGIN TO SMARTODR </h4>
                            <p>Online Dispute Resolution Mechanism for filing complaints  </p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/complaints/arbitration-status">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-07/2.jpg" alt="Reports" title="Reports">
                            </figure>
                            <h4>Reports</h4>
                            <p>Periodic reports pertaining to complaints/arbitration</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/contact/contact-us">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-07/3.jpg" alt="Investor Services Centre" title="Investor Services Centre">
                            </figure>
                            <h4>Investor Services Centre</h4>
                            <p>Contact details of all Investor Services Centre</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
                <li class="nav-item dropdown  ">
                    <a data-bs-toggle=dropdown aria-haspopup=true class="nav-link dd-link" href="javascript:;" id="link_10" aria-expanded=false >RESEARCH</a>
                    
                    <div class="dropdown-menu" aria-labelledby="link_10">
                      <div class="container">
                        <div class="row mrow">
                         
                         <div class="col-md-4">
                         <h3>Publications</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/research/publications-reports-nse-market-pulse" target="">Market Pulse</a></li><li class="nav-item"><a class="nav-link" href="/research/publications-reports-nse-market-insights" target="">Macro &amp; Market Insights</a></li><li class="nav-item"><a class="nav-link" href="/research/publications-reports-corporate-governance-reports" target="">Corporate Governance</a></li><li class="nav-item"><a class="nav-link" href="/research/publications-reports-nse-market-insights" target="">Factbook &amp; ISMR</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Initiatives</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/research/research-initiatives" target="">NSE RI</a></li><li class="nav-item"><a class="nav-link" href="/research/research-initiatives" target="">Ongoing</a></li><li class="nav-item"><a class="nav-link" href="/research/working-papers" target="">Working Paper Series</a></li><li class="nav-item"><a class="nav-link" href="/research/past-initiatives" target="">Past Initiatives</a></li>
                         </ul>
                        </div>
                        
                         <div class="col-md-4">
                         <h3>Engagements</h3>
                         <ul class="nav flex-column">
                         <li class="nav-item"><a class="nav-link" href="/research/events-upcoming-programs" target="">Upcoming Programs</a></li><li class="nav-item"><a class="nav-link" href="/research/events-seminars-panel-dicussions" target="">Seminars &amp; Panel Discussions</a></li><li class="nav-item"><a class="nav-link" href="/research/events-conferences" target="">Conferences</a></li><li class="nav-item"><a class="nav-link" href="/research/events-lecture-series" target="">Lecture Series</a></li>
                         </ul>
                        </div>
                        
                        </div>
                      </div>
                      
                        <div class="btm_row_ddmenu">
                        <div class="container">
                        <div class="row">
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/research/research-overview">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/Publications.png" alt="Overview" title="Overview">
                            </figure>
                            <h4>Overview</h4>
                            <p>Macro and financial market research, thought-provoking discussions, policy advocacy and more..</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/research/research-initiatives">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/Initiavtives.png" alt="Initiatives" title="Initiatives">
                            </figure>
                            <h4>Initiatives</h4>
                            <p>Plans and actions to promote and advance research in financial markets</p>
                            </a>
                        </div>
                        </div>
                        
                        <div class="col-md-4 menuFootNote" title="">
                            <div class="content">
                            <a href="https://www.nseindia.com/research/events-seminars-panel-dicussions">
                            <figure>
                            <img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/Engagement.png" alt="Engagements" title="Engagements">
                            </figure>
                            <h4>Engagements</h4>
                            <p>Bringing together academia, industry and other stakeholders
</p>
                            </a>
                        </div>
                        </div>
                        
                        </div>
                        </div>
                        </div>
                        
                        </div>
                    
                </li>
            
            </ul>
        </div>
        </div>
    </nav>
     </div>

<div class="expandable_search">
    <div class="expnd_searchbox">
        <input type="search" placeholder="Search...." name="search" class="searchbox-input">
        <input type="submit" class="searchbox-submit" value="GO">
        <span class="searchbox-icon"><img src="/assets/images/expnd_search.svg" width="40" height="40" alt="Expand Search" title="Expand Search"></span>
    </div>
</div>
<!-- Accessibility Start -->
<div class="setting_wrap">
    <div class="setting_body">
        <ul>
            <li>Font size</li>
            <li class="mb-2"><a href="javascript:increaseFont()" class="font_plus">A+</a> | <a href="javascript:resetFont()" class="font_reset">Reset</a> | <a href="javascript:decreaseFont()" class="font_minus">A-</a> </li>
            <li>Contrast</li>
            <li><a href="javascript:highContrast()" class="link_contrast1">High Contrast</a> | <a href="javascript:normalContrast()" class="link_contrast_reset">Reset</a></li>
        </ul>
    </div>
</div> 

    <div class="login_wrap">

    <h2>Login to</h2>
    <ul>
        <!-- <li><a href="https://digitalexchange.nseindia.com/nse-frontend-navigation/#/auth" target="_blank">Exchange</a></li> -->
        <li><a href=" https://www.nsenmf.com/" target="_blank">Mutual Fund</a></li>
        <li><a href="https://www.ncfm-india.com/ORE/OREloginPage.jsp" target="_blank" >NCFM</a></li>
    </ul>
    <p class="disc">You will be redirected to <br />another link to complete the login</p>
</div>
<div class="setting_btn">
    <a href="javascript:;" aria-expanded="false"><img src="/assets/images/accessible.svg" width="25" alt="Accessibility" title="Accessibility" /></a>
</div>
<div class="feedbackIconBtn">
    <a target="_blank" href="/feedback/new"><img src="/assets/images/feedback-icon.svg" width="25" alt="Feedback" title="Feedback" /></a>
</div>
<div class="loginIconBtn">
    <a href="javascript:;"><img src="/assets/images/login-icon.png"  width="25" alt="Login to Mutual Fund, NCFM" title="Login to Mutual Fund, NCFM" /></a>
</div>
<!-- Accessibility End -->
    <div class="main">
<div class="mid_body pt-0">
    <div class="container-fluid">
        <div class="row">
            <div class="col-xs-12 w-100">
                
            <section class="common-tabs" id="tabs">
    <div class="container-fluid">
        <div class="row">
            <div class="col-xs-12 w-100">
                <nav>
                    <div class="container" style="position: relative;">

                        <!-- <div class="nav nav-tabs" role="tablist">  
                            <a class="nav-item nav-link active  " aria-selected="true"  onclick=""  data-bs-toggle="tab" href="#nse-indices"  role="tab" id="NSE Indices" >NSE Indices</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=" loadTopGainerLoosers() "  data-bs-toggle="tab" href="#most-active"  role="tab" id="Equities" >Equities</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=""  data-bs-toggle="tab" href="#nse-derivatives"  role="tab" id="Derivatives" >Derivatives</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=""  data-bs-toggle="tab" href="#nse-reference-rates"  role="tab" id="Reference Rates" >Reference Rates</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=""  data-bs-toggle="tab" href="#nse-market-turnover"  role="tab" id="Market Turnover" >Market Turnover</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=""  data-bs-toggle="tab" href="#nse-complaints"  role="tab" id="Complaints &amp; Reporting" >Complaints &amp; Reporting</a>  
                            <div class="indices_list_btn d-flex align-items-center">
                                <ul class="d-flex align-items-center ms-auto">
                                    <li><a href="#" class="btn" data-bs-toggle="modal" data-bs-target="#selectIndicesModal" onclick="translateIndices()" ><span id="filter_indices"> Filter Indices </span><i class="fa fa-filter" aria-hidden="true" title="Filter Indices"></i></a></li>
                                    <li><a href="/market-data/live-market-indices" id="view_all_indices">View All Indices</a></li>
                                </ul>
                            </div>
                        </div> -->

                        <div class="nav nav-tabs" role="tablist">  
                            <a class="nav-item nav-link active  " aria-selected="true"  onclick=""  data-bs-toggle="tab" href="#nse-indices"  role="tab" id="NSE Indices" >NSE Indices</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=" loadTopGainerLoosers() "  data-bs-toggle="tab" href="#most-active"  role="tab" id="Equities" >Equities</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=""  data-bs-toggle="tab" href="#nse-derivatives"  role="tab" id="Derivatives" >Derivatives</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=""  data-bs-toggle="tab" href="#nse-reference-rates"  role="tab" id="Reference Rates" >Reference Rates</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=""  data-bs-toggle="tab" href="#nse-market-turnover"  role="tab" id="Market Turnover" >Market Turnover</a>   
                            <a class="nav-item nav-link  " aria-selected="false"  onclick=""  data-bs-toggle="tab" href="#nse-complaints"  role="tab" id="Complaints &amp; Reporting" >Complaints &amp; Reporting</a>  
                            <div class="indices_list_btn d-flex align-items-center">
                                <ul class="d-flex align-items-center ms-auto">
                                    <li><a href="#" class="btn" data-bs-toggle="modal" data-bs-target="#selectIndicesModal" onclick="translateIndices()" ><span id="filter_indices"> Filter Indices </span><i class="fa fa-filter" aria-hidden="true" title="Filter Indices"></i></a></li>
                                    <li><a href="/market-data/live-market-indices" id="view_all_indices">View All Indices</a></li>
                                </ul>
                            </div>
                        </div>
                    
                    </div>
                </nav>
                <div class="tab-content py-0"> 
                    <div class="tab-pane fade  show active " id="nse-indices" role="tabpanel">
                        <style type="text/css">
    .highcharts-plot-background {
        stroke: #e3e3e3;
    }
</style>
<script type="text/javascript">
    
</script>
 <!-- <div class="container mb-2">
    <div class="indices_list_btn d-flex align-items-center">
        <ul class="d-flex align-items-center ms-auto">
            <li>
                <a href="#" class="btn" data-bs-toggle="modal" data-bs-target="#selectIndicesModal" id="custViewIndices" onclick="translateIndices()"> Customize Indices List <img src="/assets/images/Customize.svg" width="18" height="18" alt="Customize Icon" title="Customize Icon" /></a>
            </li>
            <li><a href="/market-data/live-market-indices" id="viewIndices">View All Indices</a></li>
        </ul>
    </div>
</div>  -->


    
        <nav class="tabs_boxes">
            <div class="container">
                <div class="nav nav-tabs" role="tablist">
                    
                        <a class="nav-item nav-link  active " id="tabList_NIFTY50" data-bs-toggle="tab" href="#NIFTY50"
                            role="tab">
                            <div class="tab_box down">
                                <p data-nse-translate="symbol" data-nse-translate-symbol="NIFTY 50" class="tb_name" id="NIFTY 50">NIFTY 50</p>
                                <p class="tb_val">24,677.80 <span class="arrow"></span>
                                </p>
                                <p class="tb_per redTxt">-30.60 (-0.12%)
                                </p>
                            </div>
                        </a>
                    
                        <a class="nav-item nav-link " id="tabList_NIFTYNEXT50" data-bs-toggle="tab" href="#NIFTYNEXT50"
                            role="tab">
                            <div class="tab_box up">
                                <p data-nse-translate="symbol" data-nse-translate-symbol="NIFTY NEXT 50" class="tb_name" id="NIFTY NEXT 50">NIFTY NEXT 50</p>
                                <p class="tb_val">73,040.40 <span class="arrow"></span>
                                </p>
                                <p class="tb_per greenTxt">553.35 (0.76%)
                                </p>
                            </div>
                        </a>
                    
                        <a class="nav-item nav-link " id="tabList_NIFTYMIDCAPSELECT" data-bs-toggle="tab" href="#NIFTYMIDCAPSELECT"
                            role="tab">
                            <div class="tab_box up">
                                <p data-nse-translate="symbol" data-nse-translate-symbol="NIFTY MIDCAP SELECT" class="tb_name" id="NIFTY MIDCAP SELECT">NIFTY MIDCAP SELECT</p>
                                <p class="tb_val">12,959.55 <span class="arrow"></span>
                                </p>
                                <p class="tb_per greenTxt">23.95 (0.19%)
                                </p>
                            </div>
                        </a>
                    
                        <a class="nav-item nav-link " id="tabList_NIFTYBANK" data-bs-toggle="tab" href="#NIFTYBANK"
                            role="tab">
                            <div class="tab_box down">
                                <p data-nse-translate="symbol" data-nse-translate-symbol="NIFTY BANK" class="tb_name" id="NIFTY BANK">NIFTY BANK</p>
                                <p class="tb_val">53,509.50 <span class="arrow"></span>
                                </p>
                                <p class="tb_per redTxt">-94.05 (-0.18%)
                                </p>
                            </div>
                        </a>
                    
                        <a class="nav-item nav-link " id="tabList_NIFTYFINANCIALSERVICES" data-bs-toggle="tab" href="#NIFTYFINANCIALSERVICES"
                            role="tab">
                            <div class="tab_box down">
                                <p data-nse-translate="symbol" data-nse-translate-symbol="NIFTY FINANCIAL SERVICES" class="tb_name" id="NIFTY FINANCIAL SERVICES">NIFTY FINANCIAL SERVICES</p>
                                <p class="tb_val">24,703.70 <span class="arrow"></span>
                                </p>
                                <p class="tb_per redTxt">-27.55 (-0.11%)
                                </p>
                            </div>
                        </a>
                    
                </div>
            </div>
        </nav>
            <div class="tab-content py-2">
            
                <div class="tab-pane fade  show active " data-indices="NIFTY 50" id="NIFTY50" role="tabpanel">
                    <div class="container">
                        <div class="row break-col-tab">
                            <div class="col-md-6">
                            <!-- tab header -->
<div class="row head-row align-items-center">
    <div class="col-md-6">
    </div>
    <div class="col-md-6">
        <div class="head-right tabTimeVal"><span id="updated">Updated:</span> <span>06-Dec-2024 15:30 IST</span></div>
    </div>
</div>
<!-- end tab header -->
<div class="row graph_row pt-2">
    <div class="col-md-12">
        <div class="graph_head">
        <ul>
            <li class="tbVal tbIndexVal">
                <span class="val">24,677.80</span>
                <span class="arrowIndicator arrow-down-red"></span><br/>
                <span class="val_per redTxt">-30.60 (-0.12%)</span>
            </li>
            <li class="open"> <span id="Open">Open</span><br>
                <span class="openVal">24,729.45</span>
            </li>
            <li class="high"> <span id="high">High</span><br>
                <span class="highVal">24,751.05</span>
            </li>
            <li class="low"> <span id="low">Low</span><br>
                <span class="lowVal">24,620.50</span>
            </li>
        </ul>
        </div>
        <div class="graph-container">
            <div id="tab1_container" class="stockChart"></div>
            <div class="values_advances">
            <ul>
                <li class="advances"><span id="advances">Advances</span> - <span>18</span></li>
                <li class="declines"><span id="declines">Declines</span> - <span>32</span></li>
                <li class="unchanged"><span id="unchanged">Unchanged</span> - <span>0</span></li>
            </ul>
            </div>
            <div class="graph_btns">
                <div class="btn-group"></div>
            </div>
        </div>
    </div>
    </div>
    <div class="right_box">
        <h5> <span id="home-top5stock">TOP 5 STOCKS</span> - <span data-nse-translate="symbol" data-nse-translate-symbol="NIFTY 50">NIFTY 50</span></h5>
        <div class="common-tabs small-tabs">
            <nav>
                <div class="nav nav-tabs" role="tablist">
                    <a class="nav-item nav-link active" data-bs-toggle="tab" href="#gainers_loosers" role="tab" aria-selected="true" id="gainers_loosers_tab1">GAINERS/LOSERS</a>
                    <a class="nav-item nav-link" data-bs-toggle="tab" href="#most_active" role="tab" aria-selected="false" id="most_active_tab1">MOST ACTIVE </a>
                </div>
            </nav>
            <div class="tab-content">
                <div class="tab-pane fade show active" id="gainers_loosers" role="tabpanel">
                    <div class="table-container gainers"><div id="tab1_tableGainer"></div></div>
                    <div class="table-container loosers"><div id="tab1_tableLoser"></div></div>
                    <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%2050"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
                </div>
                <div class="tab-pane fade" id="most_active" role="tabpanel">
                    <div class="table-container"><div id="tab1_tableValue"></div></div>
                    <div class="table-container"><div id="tab1_tableVolume"></div></div>
                    <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%2050"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
                </div>
            </div>
        </div>
    </div>

                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div id="homeSlider">
  <div class="slick-carousel" style="">
      
         
            
                <a href="#" title="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/Listing%20Web%20Banner%20%2846%29.jpg" class="img-responsive" alt="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.youtube.com/watch?v=fiRg41yJAF4" title="NSE : Enabling a Billion Dreams! Watch the NSE Documentary " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Enabling-A-Billion-Dreams_Website-Banner%202.jpg" class="img-responsive" alt="NSE : Enabling a Billion Dreams! Watch the NSE Documentary "></a>
                  
                    
                      
                         
            
                <a href="#" title="Now accessing our website is easier than ever before">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Website%20Banner.png" class="img-responsive" alt="Now accessing our website is easier than ever before">
                </a>
                
                    
                      
                         
            
                  <a href="/nseindia-mobile-app" title="NSEIndia&#39;s Mobile App" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Mobile%20App%20Launch%20Banner%20%28002%29.jpeg" class="img-responsive" alt="NSEIndia&#39;s Mobile App"></a>
                  
                    
                      
                         
            
                <a href="#" title="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Bull-inauguration_0_0.jpg" class="img-responsive" alt="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                </a>
                
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Coffee_Table_Book.pdf" title="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan." target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Coffee-table-book_0_0.jpg" class="img-responsive" alt="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan."></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-07/20240724_NSE_Report_Indian_Capital_Markets_Digital.pdf" title="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Listing%20Web%20Banner%20%2832%29_0.jpg" class="img-responsive" alt="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior"></a>
                  
                    
                      
                         
            
                <a href="#" title="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Sarthi-app-07-june-570X465%201%20%281%29.jpg" class="img-responsive" alt="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.nseindia.com/research/publications-reports-nse-market-pulse" title="NSE Market pulse report of November 2024 " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Market_pulse_report_of_November_2024.jpg" class="img-responsive" alt="NSE Market pulse report of November 2024 "></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE is the world’s largest derivative exchange for fifth consecutive Year" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1st_2nd%20Position.jpg" class="img-responsive" alt="NSE is the world’s largest derivative exchange for fifth consecutive Year"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE ranks 3rd largest globally in equity segment in calendar year 2023" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/3rd_3rd%20Position.jpg" class="img-responsive" alt="NSE ranks 3rd largest globally in equity segment in calendar year 2023"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/PR_cc_18082023.pdf" title="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1%20%282%29.jpg" class="img-responsive" alt="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar"></a>
                  
                    
                      
                         
            
                  <a href="https://www.nseindia.com/products-services/commodity-derivatives-contract-specification-energy" title="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/WTI_Web%20banner%20-%20570%20X%20466_V1.jpg" class="img-responsive" alt="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2022-07/PR_cc_29072022.pdf" title="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/2%20%282%29.jpg" class="img-responsive" alt="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi"></a>
                  
                    
                      
                         
            
                  <a href="https://investor.sebi.gov.in/" title="NEW INVESTOR WEBSITE" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/570%20X%20460-SEBI%20New%20website-banner.jpg" class="img-responsive" alt="NEW INVESTOR WEBSITE"></a>
                  
                    
                      
                        
                          
  </div>
  <button role="button" aria-label="playpause" class="play_pause_btn"><i class="fa fa-pause-circle"></i></button>
</div>
                                
                                        <section class="enhanced_marketstat">
    <div class="container marketstat_bg">
        <div class="row">
            <div class="market_stat_wrapper">
                <div class="header_wrapper">
                    <h5>Market Statistics</h5>
                    <p class="marketTimestamp"></p>
                </div>
                <div class="item_wrapper">
                    <div class="item blue">
                        <p>Stocks Traded</p>
                        <a class="market-data stockTraded" id="stockTraded" href="/market-data/stocks-traded"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item green">
                        <p>Advances</p>
                        <a class="market-data stockAdvanced" id="stockAdvanced" href="/market-data/advance"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item red">
                        <p>Declines</p>
                        <a class="market-data stockDeclines" id="stockDeclines" href="/market-data/decline"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item orange">
                        <p>Unchanged</p>
                        <a class="market-data stockUnchanged" id="stockUnchanged" href="/market-data/unchanged"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                </div>
                <div class="week52_wrapper">
                    <div class="week52_white_bg">
                        <div class="item">
                            <p>No. of Stocks at<br> <span class="font-bold">52-Week High</span></p>
                            <a href="/market-data/52-week-high-equity-market" id="High52Week" class="High52Week"
                                title="To view all, click here" target="_blank"><span class="arrow green"></span>-</a>
                        </div>
                        <div class="item">
                            <p class="text-end">No. of Stocks at <br><span class="font-bold">52-Week Low</span></p>
                            <a href="/market-data/52-week-low-equity-market" id="Week52Week" class="Week52Week"
                                title="To view all, click here" target="_blank"><span class="arrow red"></span>-</a>
                        </div>
                        <img src="/assets/images/market_stat.png"  class="market_stat" alt="market Statistics"/>
                    </div>
                </div>
                <div class="circuit_wrapper">
                    <div class="item">
                        <p>No. of Stocks in <b>Upper Circuit</b></p>
                        <a href="/market-data/upper-band-hitters" title="To view all, click here" target="_blank"><span class="circuit-number UpperCircuit green" id="UpperCircuit"  >-</span></a>
                    </div>
                    <div class="item red">
                        <p>No. of Stocks in <b>Lower Circuit</b></p>
                        <a href="/market-data/lower-band-hitters" title="To view all, click here" target="_blank" ><span class="circuit-number LowerCircuit red" id="LowerCircuit" >-</span></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

                                    
                                
                                </div>
                            </div>
                        </div>
            </div>
        </div>
        
                <div class="tab-pane fade " data-indices="NIFTY NEXT 50" id="NIFTYNEXT50" role="tabpanel">
                    <div class="container">
                        <div class="row break-col-tab">
                            <div class="col-md-6">
                            
    <!-- tab header -->
<div class="row head-row align-items-center">
    <div class="col-md-6"></div>
    <div class="col-md-6">
        <div class="head-right tabTimeVal"><span id="updated">Updated:</span> <span>06-Dec-2024 15:30 IST</span></div>
    </div>
</div>
<!-- end tab header -->
<div class="row graph_row pt-2">
<div id="tabData2"></div>
<div class="col-md-12">
    <div class="graph_head">
    <ul>
        <li class="tbVal tbIndexVal">
            <span class="val">73,040.40</span>
            <span class="arrowIndicator arrow-up-green"></span><br/>
            <span class="val_per greenTxt">553.35 (0.76%)</span>
        </li>
        <li class="open"> <span id="Open">Open</span><br>
            <span class="openVal">72,789.10</span>
        </li>
        <li class="high"> <span id="high">High</span><br>
            <span class="highVal">73,218.60</span>
        </li>
        <li class="low"> <span id="low">Low</span><br>
            <span class="lowVal">72,619.35</span>
        </li>
    </ul>
    </div>
    <div class="graph-container">
        <div id="tab2_container" class="stockChart"></div>
        <div class="values_advances">
        <ul>
            <li class="advances"><span id="advances">Advances</span> - <span>30</span></li>
            <li class="declines"><span id="declines">Declines</span> - <span>19</span></li>
            <li class="unchanged"><span id="unchanged">Unchanged</span> - <span>1</span></li>
        </ul>
        </div>
        <div class="graph_btns">
            <div class="btn-group"></div>
        </div>
    </div>
</div>
</div>
<div class="right_box">
<h5> <span id="home-top5stock">TOP 5 STOCKS</span> - <span data-nse-translate="symbol" data-nse-translate-symbol="NIFTY NEXT 50">NIFTY NEXT 50</span></h5>
<div class="common-tabs small-tabs">
    <nav>
        <div class="nav nav-tabs" role="tablist">
            <a class="nav-item nav-link active" data-bs-toggle="tab" href="#tab2_gainers_loosers" role="tab" aria-selected="true" id="gainers_loosers_tab1">GAINERS/LOSERS</a>
            <a class="nav-item nav-link" data-bs-toggle="tab" href="#tab2_most_active" role="tab" aria-selected="false" id="most_active_tab1">MOST ACTIVE</a>
        </div>
    </nav>
    <div class="tab-content">
        <div class="tab-pane fade show active" id="tab2_gainers_loosers" role="tabpanel">
            <div class="table-container gainers"><div id="tab2_tableGainer"></div></div>
            <div class="table-container loosers"><div id="tab2_tableLoser"></div></div>
            <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%20NEXT%2050"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
        </div>
        <div class="tab-pane fade" id="tab2_most_active" role="tabpanel">
            <div class="table-container"><div id="tab2_tableValue"></div></div>
            <div class="table-container"><div id="tab2_tableVolume"></div></div>
            <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%20NEXT%2050">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
        </div>
    </div>
</div>
</div>

                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div id="homeSlider">
  <div class="slick-carousel" style="">
      
         
            
                <a href="#" title="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/Listing%20Web%20Banner%20%2846%29.jpg" class="img-responsive" alt="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.youtube.com/watch?v=fiRg41yJAF4" title="NSE : Enabling a Billion Dreams! Watch the NSE Documentary " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Enabling-A-Billion-Dreams_Website-Banner%202.jpg" class="img-responsive" alt="NSE : Enabling a Billion Dreams! Watch the NSE Documentary "></a>
                  
                    
                      
                         
            
                <a href="#" title="Now accessing our website is easier than ever before">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Website%20Banner.png" class="img-responsive" alt="Now accessing our website is easier than ever before">
                </a>
                
                    
                      
                         
            
                  <a href="/nseindia-mobile-app" title="NSEIndia&#39;s Mobile App" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Mobile%20App%20Launch%20Banner%20%28002%29.jpeg" class="img-responsive" alt="NSEIndia&#39;s Mobile App"></a>
                  
                    
                      
                         
            
                <a href="#" title="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Bull-inauguration_0_0.jpg" class="img-responsive" alt="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                </a>
                
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Coffee_Table_Book.pdf" title="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan." target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Coffee-table-book_0_0.jpg" class="img-responsive" alt="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan."></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-07/20240724_NSE_Report_Indian_Capital_Markets_Digital.pdf" title="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Listing%20Web%20Banner%20%2832%29_0.jpg" class="img-responsive" alt="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior"></a>
                  
                    
                      
                         
            
                <a href="#" title="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Sarthi-app-07-june-570X465%201%20%281%29.jpg" class="img-responsive" alt="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.nseindia.com/research/publications-reports-nse-market-pulse" title="NSE Market pulse report of November 2024 " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Market_pulse_report_of_November_2024.jpg" class="img-responsive" alt="NSE Market pulse report of November 2024 "></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE is the world’s largest derivative exchange for fifth consecutive Year" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1st_2nd%20Position.jpg" class="img-responsive" alt="NSE is the world’s largest derivative exchange for fifth consecutive Year"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE ranks 3rd largest globally in equity segment in calendar year 2023" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/3rd_3rd%20Position.jpg" class="img-responsive" alt="NSE ranks 3rd largest globally in equity segment in calendar year 2023"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/PR_cc_18082023.pdf" title="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1%20%282%29.jpg" class="img-responsive" alt="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar"></a>
                  
                    
                      
                         
            
                  <a href="https://www.nseindia.com/products-services/commodity-derivatives-contract-specification-energy" title="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/WTI_Web%20banner%20-%20570%20X%20466_V1.jpg" class="img-responsive" alt="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2022-07/PR_cc_29072022.pdf" title="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/2%20%282%29.jpg" class="img-responsive" alt="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi"></a>
                  
                    
                      
                         
            
                  <a href="https://investor.sebi.gov.in/" title="NEW INVESTOR WEBSITE" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/570%20X%20460-SEBI%20New%20website-banner.jpg" class="img-responsive" alt="NEW INVESTOR WEBSITE"></a>
                  
                    
                      
                        
                          
  </div>
  <button role="button" aria-label="playpause" class="play_pause_btn"><i class="fa fa-pause-circle"></i></button>
</div>
                                
                                        <section class="enhanced_marketstat">
    <div class="container marketstat_bg">
        <div class="row">
            <div class="market_stat_wrapper">
                <div class="header_wrapper">
                    <h5>Market Statistics</h5>
                    <p class="marketTimestamp"></p>
                </div>
                <div class="item_wrapper">
                    <div class="item blue">
                        <p>Stocks Traded</p>
                        <a class="market-data stockTraded" id="stockTraded" href="/market-data/stocks-traded"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item green">
                        <p>Advances</p>
                        <a class="market-data stockAdvanced" id="stockAdvanced" href="/market-data/advance"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item red">
                        <p>Declines</p>
                        <a class="market-data stockDeclines" id="stockDeclines" href="/market-data/decline"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item orange">
                        <p>Unchanged</p>
                        <a class="market-data stockUnchanged" id="stockUnchanged" href="/market-data/unchanged"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                </div>
                <div class="week52_wrapper">
                    <div class="week52_white_bg">
                        <div class="item">
                            <p>No. of Stocks at<br> <span class="font-bold">52-Week High</span></p>
                            <a href="/market-data/52-week-high-equity-market" id="High52Week" class="High52Week"
                                title="To view all, click here" target="_blank"><span class="arrow green"></span>-</a>
                        </div>
                        <div class="item">
                            <p class="text-end">No. of Stocks at <br><span class="font-bold">52-Week Low</span></p>
                            <a href="/market-data/52-week-low-equity-market" id="Week52Week" class="Week52Week"
                                title="To view all, click here" target="_blank"><span class="arrow red"></span>-</a>
                        </div>
                        <img src="/assets/images/market_stat.png"  class="market_stat" alt="market Statistics"/>
                    </div>
                </div>
                <div class="circuit_wrapper">
                    <div class="item">
                        <p>No. of Stocks in <b>Upper Circuit</b></p>
                        <a href="/market-data/upper-band-hitters" title="To view all, click here" target="_blank"><span class="circuit-number UpperCircuit green" id="UpperCircuit"  >-</span></a>
                    </div>
                    <div class="item red">
                        <p>No. of Stocks in <b>Lower Circuit</b></p>
                        <a href="/market-data/lower-band-hitters" title="To view all, click here" target="_blank" ><span class="circuit-number LowerCircuit red" id="LowerCircuit" >-</span></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

                                    
                                
                                </div>
                            </div>
                        </div>
            </div>
        </div>
        
                <div class="tab-pane fade " data-indices="NIFTY MIDCAP SELECT" id="NIFTYMIDCAPSELECT" role="tabpanel">
                    <div class="container">
                        <div class="row break-col-tab">
                            <div class="col-md-6">
                            <!-- tab header -->
<div class="row head-row align-items-center">
<div class="col-md-6"></div>
<div class="col-md-6">
    <div class="head-right tabTimeVal"><span id="updated">Updated:</span> <span>06-Dec-2024 15:30 IST</span></div>
</div>
</div>
<!-- end tab header -->
<div class="row graph_row pt-2">
<div id="tabData3"></div>
<div class="col-md-12">
    <div class="graph_head">
        <ul>
            <li class="tbVal tbIndexVal">
                <span class="val">12,959.55</span>
                <span class="arrowIndicator arrow-up-green"></span><br/>
                <span class="val_per greenTxt">23.95 (0.19%)</span>
            </li>
            <li class="open"> <span id="Open">Open</span><br>
                <span class="openVal">12,967.25</span>
            </li>
            <li class="high"> <span id="high">High</span><br>
                <span class="highVal">12,987.05</span>
            </li>
            <li class="low"> <span id="low">Low</span><br>
                <span class="lowVal">12,910.90</span>
            </li>
        </ul>
    </div>
    <div class="graph-container">
        <div id="tab3_container" class="stockChart"></div>
        <div class="values_advances">
            <ul>
                <li class="advances"><span id="advances">Advances</span> - <span>14</span></li>
                <li class="declines"><span id="declines">Declines</span> - <span>11</span></li>
                <li class="unchanged"><span id="unchanged">Unchanged</span> - <span>0</span></li>
            </ul>
        </div>
        <div class="graph_btns"><div class="btn-group"></div></div>
    </div>
</div>
</div>
<div class="right_box">
<h5> <span id="home-top5stock">TOP 5 STOCKS</span> - <span data-nse-translate="symbol" data-nse-translate-symbol="NIFTY MIDCAP SELECT">NIFTY MIDCAP SELECT</span></h5>
<div class="common-tabs small-tabs">
    <nav>
        <div class="nav nav-tabs"  role="tablist">
            <a class="nav-item nav-link active" data-bs-toggle="tab" href="#tab3_gainers_loosers" role="tab" aria-selected="true" id="gainers_loosers_tab1">GAINERS/LOSERS</a>
            <a class="nav-item nav-link" data-bs-toggle="tab" href="#tab3_most_active" role="tab" aria-selected="false" id="most_active_tab1">MOST ACTIVE </a>
        </div>
    </nav>
    <div class="tab-content">
        <div class="tab-pane fade show active" id="tab3_gainers_loosers" role="tabpanel">
            <div class="table-container gainers"><div id="tab3_tableGainer"></div></div>
            <div class="table-container loosers"><div id="tab3_tableLoser"></div></div>
            <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%20MIDCAP%20SELECT"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
        </div>
        <div class="tab-pane fade" id="tab3_most_active" role="tabpanel">
            <div class="table-container"><div id="tab3_tableValue"></div></div>
            <div class="table-container"><div id="tab3_tableVolume"></div></div>
            <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%20MIDCAP%20SELECT"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
        </div>
    </div>
</div>
</div>

                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div id="homeSlider">
  <div class="slick-carousel" style="">
      
         
            
                <a href="#" title="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/Listing%20Web%20Banner%20%2846%29.jpg" class="img-responsive" alt="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.youtube.com/watch?v=fiRg41yJAF4" title="NSE : Enabling a Billion Dreams! Watch the NSE Documentary " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Enabling-A-Billion-Dreams_Website-Banner%202.jpg" class="img-responsive" alt="NSE : Enabling a Billion Dreams! Watch the NSE Documentary "></a>
                  
                    
                      
                         
            
                <a href="#" title="Now accessing our website is easier than ever before">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Website%20Banner.png" class="img-responsive" alt="Now accessing our website is easier than ever before">
                </a>
                
                    
                      
                         
            
                  <a href="/nseindia-mobile-app" title="NSEIndia&#39;s Mobile App" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Mobile%20App%20Launch%20Banner%20%28002%29.jpeg" class="img-responsive" alt="NSEIndia&#39;s Mobile App"></a>
                  
                    
                      
                         
            
                <a href="#" title="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Bull-inauguration_0_0.jpg" class="img-responsive" alt="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                </a>
                
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Coffee_Table_Book.pdf" title="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan." target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Coffee-table-book_0_0.jpg" class="img-responsive" alt="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan."></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-07/20240724_NSE_Report_Indian_Capital_Markets_Digital.pdf" title="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Listing%20Web%20Banner%20%2832%29_0.jpg" class="img-responsive" alt="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior"></a>
                  
                    
                      
                         
            
                <a href="#" title="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Sarthi-app-07-june-570X465%201%20%281%29.jpg" class="img-responsive" alt="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.nseindia.com/research/publications-reports-nse-market-pulse" title="NSE Market pulse report of November 2024 " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Market_pulse_report_of_November_2024.jpg" class="img-responsive" alt="NSE Market pulse report of November 2024 "></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE is the world’s largest derivative exchange for fifth consecutive Year" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1st_2nd%20Position.jpg" class="img-responsive" alt="NSE is the world’s largest derivative exchange for fifth consecutive Year"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE ranks 3rd largest globally in equity segment in calendar year 2023" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/3rd_3rd%20Position.jpg" class="img-responsive" alt="NSE ranks 3rd largest globally in equity segment in calendar year 2023"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/PR_cc_18082023.pdf" title="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1%20%282%29.jpg" class="img-responsive" alt="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar"></a>
                  
                    
                      
                         
            
                  <a href="https://www.nseindia.com/products-services/commodity-derivatives-contract-specification-energy" title="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/WTI_Web%20banner%20-%20570%20X%20466_V1.jpg" class="img-responsive" alt="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2022-07/PR_cc_29072022.pdf" title="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/2%20%282%29.jpg" class="img-responsive" alt="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi"></a>
                  
                    
                      
                         
            
                  <a href="https://investor.sebi.gov.in/" title="NEW INVESTOR WEBSITE" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/570%20X%20460-SEBI%20New%20website-banner.jpg" class="img-responsive" alt="NEW INVESTOR WEBSITE"></a>
                  
                    
                      
                        
                          
  </div>
  <button role="button" aria-label="playpause" class="play_pause_btn"><i class="fa fa-pause-circle"></i></button>
</div>
                                
                                        <section class="enhanced_marketstat">
    <div class="container marketstat_bg">
        <div class="row">
            <div class="market_stat_wrapper">
                <div class="header_wrapper">
                    <h5>Market Statistics</h5>
                    <p class="marketTimestamp"></p>
                </div>
                <div class="item_wrapper">
                    <div class="item blue">
                        <p>Stocks Traded</p>
                        <a class="market-data stockTraded" id="stockTraded" href="/market-data/stocks-traded"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item green">
                        <p>Advances</p>
                        <a class="market-data stockAdvanced" id="stockAdvanced" href="/market-data/advance"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item red">
                        <p>Declines</p>
                        <a class="market-data stockDeclines" id="stockDeclines" href="/market-data/decline"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item orange">
                        <p>Unchanged</p>
                        <a class="market-data stockUnchanged" id="stockUnchanged" href="/market-data/unchanged"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                </div>
                <div class="week52_wrapper">
                    <div class="week52_white_bg">
                        <div class="item">
                            <p>No. of Stocks at<br> <span class="font-bold">52-Week High</span></p>
                            <a href="/market-data/52-week-high-equity-market" id="High52Week" class="High52Week"
                                title="To view all, click here" target="_blank"><span class="arrow green"></span>-</a>
                        </div>
                        <div class="item">
                            <p class="text-end">No. of Stocks at <br><span class="font-bold">52-Week Low</span></p>
                            <a href="/market-data/52-week-low-equity-market" id="Week52Week" class="Week52Week"
                                title="To view all, click here" target="_blank"><span class="arrow red"></span>-</a>
                        </div>
                        <img src="/assets/images/market_stat.png"  class="market_stat" alt="market Statistics"/>
                    </div>
                </div>
                <div class="circuit_wrapper">
                    <div class="item">
                        <p>No. of Stocks in <b>Upper Circuit</b></p>
                        <a href="/market-data/upper-band-hitters" title="To view all, click here" target="_blank"><span class="circuit-number UpperCircuit green" id="UpperCircuit"  >-</span></a>
                    </div>
                    <div class="item red">
                        <p>No. of Stocks in <b>Lower Circuit</b></p>
                        <a href="/market-data/lower-band-hitters" title="To view all, click here" target="_blank" ><span class="circuit-number LowerCircuit red" id="LowerCircuit" >-</span></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

                                    
                                
                                </div>
                            </div>
                        </div>
            </div>
        </div>
        
                <div class="tab-pane fade " data-indices="NIFTY BANK" id="NIFTYBANK" role="tabpanel">
                    <div class="container">
                        <div class="row break-col-tab">
                            <div class="col-md-6">
                            <div class="row head-row align-items-center">
<div class="col-md-6"></div>
<div class="col-md-6">
    <div class="head-right tabTimeVal"> 
        <span id="updated">Updated:</span> 
        <span>06-Dec-2024 15:30 IST</span>
    </div>
</div>
</div>
<div class="row graph_row pt-2">
    <div id="tabData4"></div>
    <div class="col-md-12">
        <div class="graph_head">
            <ul>
                <li class="tbVal tbIndexVal">
                    <span class="val">53,509.50</span>
                    <span class="arrowIndicator arrow-down-red"></span><br/>
                    <span class="val_per redTxt">-94.05 (-0.18%)</span>
                </li>
                <li class="open"> <span id="Open">Open</span><br>
                    <span class="openVal">53,634.20</span>
                </li>
                <li class="high"> <span id="high">High</span><br>
                    <span class="highVal">53,868.50</span>
                </li>
                <li class="low"> <span id="low">Low</span><br>
                    <span class="lowVal">53,160.65</span>
                </li>
            </ul>
        </div>
        <div class="graph-container">
            <div id="tab4_container" class="stockChart"></div>
            <div class="values_advances">
                <ul>
                    <li class="advances"><span id="advances">Advances</span> - <span>5</span></li>
                    <li class="declines"><span id="declines">Declines</span> - <span>7</span></li>
                    <li class="unchanged"><span id="unchanged">Unchanged</span> - <span>0</span></li>
                </ul>
            </div>
            <div class="graph_btns"><div class="btn-group"></div></div>
        </div>
    </div>
</div>
<div class="right_box">
<h5> <span id="home-top5stock">TOP 5 STOCKS</span> - <span data-nse-translate="symbol" data-nse-translate-symbol="NIFTY BANK">NIFTY BANK</span></h5>
<div class="common-tabs small-tabs">
    <nav>
        <div class="nav nav-tabs" role="tablist">
            <a class="nav-item nav-link active" data-bs-toggle="tab" href="#tab4_gainers_loosers" role="tab" aria-selected="true" id="gainers_loosers_tab1">GAINERS/LOSERS</a>
            <a class="nav-item nav-link" data-bs-toggle="tab" href="#tab4_most_active" role="tab" aria-selected="false" id="most_active_tab1">MOST ACTIVE </a>
        </div>
    </nav>
    <div class="tab-content">
        <div class="tab-pane fade show active" id="tab4_gainers_loosers" role="tabpanel">
            <div class="table-container gainers"><div id="tab4_tableGainer"></div></div>
            <div class="table-container loosers"><div id="tab4_tableLoser"></div></div>
            <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%20BANK"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
        </div>
        <div class="tab-pane fade" id="tab4_most_active" role="tabpanel">
            <div class="table-container"><div id="tab4_tableValue"></div></div>
            <div class="table-container"><div id="tab4_tableVolume"></div></div>
            <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%20BANK"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
        </div>
    </div>
</div>
</div>
         
                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div id="homeSlider">
  <div class="slick-carousel" style="">
      
         
            
                <a href="#" title="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/Listing%20Web%20Banner%20%2846%29.jpg" class="img-responsive" alt="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.youtube.com/watch?v=fiRg41yJAF4" title="NSE : Enabling a Billion Dreams! Watch the NSE Documentary " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Enabling-A-Billion-Dreams_Website-Banner%202.jpg" class="img-responsive" alt="NSE : Enabling a Billion Dreams! Watch the NSE Documentary "></a>
                  
                    
                      
                         
            
                <a href="#" title="Now accessing our website is easier than ever before">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Website%20Banner.png" class="img-responsive" alt="Now accessing our website is easier than ever before">
                </a>
                
                    
                      
                         
            
                  <a href="/nseindia-mobile-app" title="NSEIndia&#39;s Mobile App" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Mobile%20App%20Launch%20Banner%20%28002%29.jpeg" class="img-responsive" alt="NSEIndia&#39;s Mobile App"></a>
                  
                    
                      
                         
            
                <a href="#" title="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Bull-inauguration_0_0.jpg" class="img-responsive" alt="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                </a>
                
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Coffee_Table_Book.pdf" title="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan." target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Coffee-table-book_0_0.jpg" class="img-responsive" alt="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan."></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-07/20240724_NSE_Report_Indian_Capital_Markets_Digital.pdf" title="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Listing%20Web%20Banner%20%2832%29_0.jpg" class="img-responsive" alt="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior"></a>
                  
                    
                      
                         
            
                <a href="#" title="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Sarthi-app-07-june-570X465%201%20%281%29.jpg" class="img-responsive" alt="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.nseindia.com/research/publications-reports-nse-market-pulse" title="NSE Market pulse report of November 2024 " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Market_pulse_report_of_November_2024.jpg" class="img-responsive" alt="NSE Market pulse report of November 2024 "></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE is the world’s largest derivative exchange for fifth consecutive Year" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1st_2nd%20Position.jpg" class="img-responsive" alt="NSE is the world’s largest derivative exchange for fifth consecutive Year"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE ranks 3rd largest globally in equity segment in calendar year 2023" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/3rd_3rd%20Position.jpg" class="img-responsive" alt="NSE ranks 3rd largest globally in equity segment in calendar year 2023"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/PR_cc_18082023.pdf" title="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1%20%282%29.jpg" class="img-responsive" alt="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar"></a>
                  
                    
                      
                         
            
                  <a href="https://www.nseindia.com/products-services/commodity-derivatives-contract-specification-energy" title="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/WTI_Web%20banner%20-%20570%20X%20466_V1.jpg" class="img-responsive" alt="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2022-07/PR_cc_29072022.pdf" title="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/2%20%282%29.jpg" class="img-responsive" alt="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi"></a>
                  
                    
                      
                         
            
                  <a href="https://investor.sebi.gov.in/" title="NEW INVESTOR WEBSITE" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/570%20X%20460-SEBI%20New%20website-banner.jpg" class="img-responsive" alt="NEW INVESTOR WEBSITE"></a>
                  
                    
                      
                        
                          
  </div>
  <button role="button" aria-label="playpause" class="play_pause_btn"><i class="fa fa-pause-circle"></i></button>
</div>
                                
                                        <section class="enhanced_marketstat">
    <div class="container marketstat_bg">
        <div class="row">
            <div class="market_stat_wrapper">
                <div class="header_wrapper">
                    <h5>Market Statistics</h5>
                    <p class="marketTimestamp"></p>
                </div>
                <div class="item_wrapper">
                    <div class="item blue">
                        <p>Stocks Traded</p>
                        <a class="market-data stockTraded" id="stockTraded" href="/market-data/stocks-traded"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item green">
                        <p>Advances</p>
                        <a class="market-data stockAdvanced" id="stockAdvanced" href="/market-data/advance"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item red">
                        <p>Declines</p>
                        <a class="market-data stockDeclines" id="stockDeclines" href="/market-data/decline"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item orange">
                        <p>Unchanged</p>
                        <a class="market-data stockUnchanged" id="stockUnchanged" href="/market-data/unchanged"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                </div>
                <div class="week52_wrapper">
                    <div class="week52_white_bg">
                        <div class="item">
                            <p>No. of Stocks at<br> <span class="font-bold">52-Week High</span></p>
                            <a href="/market-data/52-week-high-equity-market" id="High52Week" class="High52Week"
                                title="To view all, click here" target="_blank"><span class="arrow green"></span>-</a>
                        </div>
                        <div class="item">
                            <p class="text-end">No. of Stocks at <br><span class="font-bold">52-Week Low</span></p>
                            <a href="/market-data/52-week-low-equity-market" id="Week52Week" class="Week52Week"
                                title="To view all, click here" target="_blank"><span class="arrow red"></span>-</a>
                        </div>
                        <img src="/assets/images/market_stat.png"  class="market_stat" alt="market Statistics"/>
                    </div>
                </div>
                <div class="circuit_wrapper">
                    <div class="item">
                        <p>No. of Stocks in <b>Upper Circuit</b></p>
                        <a href="/market-data/upper-band-hitters" title="To view all, click here" target="_blank"><span class="circuit-number UpperCircuit green" id="UpperCircuit"  >-</span></a>
                    </div>
                    <div class="item red">
                        <p>No. of Stocks in <b>Lower Circuit</b></p>
                        <a href="/market-data/lower-band-hitters" title="To view all, click here" target="_blank" ><span class="circuit-number LowerCircuit red" id="LowerCircuit" >-</span></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

                                    
                                
                                </div>
                            </div>
                        </div>
            </div>
        </div>
        
                <div class="tab-pane fade " data-indices="NIFTY FINANCIAL SERVICES" id="NIFTYFINANCIALSERVICES" role="tabpanel">
                    <div class="container">
                        <div class="row break-col-tab">
                            <div class="col-md-6">
                                         <!-- tab header -->
<div class="row head-row align-items-center">
<div class="col-md-6">
</div>
<div class="col-md-6">
    <div class="head-right tabTimeVal"><span id="updated">Updated:</span><span>06-Dec-2024 15:30 IST</span></div>
</div>
</div>
<div class="row graph_row pt-2">
    <div id="tabData5"></div>
    <div class="col-md-12">
        <div class="graph_head">
            <ul>
                <li class="tbVal tbIndexVal">
                    <span class="val">24,703.70</span>
                    <span class="arrowIndicator arrow-down-red"></span><br/>
                    <span class="val_per redTxt">-27.55 (-0.11%)</span>
                </li>
                <li class="open"> <span id="Open">Open</span><br>
                    <span class="openVal">24,731.85</span>
                </li>
                <li class="high"> <span id="high">High</span><br>
                    <span class="highVal">24,830.85</span>
                </li>
                <li class="low"> <span id="low">Low</span><br>
                    <span class="lowVal">24,562.90</span>
                </li>
            </ul>
        </div>
        <div class="graph-container">
            <div id="tab5_container" class="stockChart"></div>
            <div class="values_advances">
                <ul>
                    <li class="advances"><span id="advances">Advances</span> - <span>11</span></li>
                    <li class="declines"><span id="declines">Declines</span> - <span>9</span></li>
                    <li class="unchanged"><span id="unchanged">Unchanged</span> - <span>0</span></li>
                </ul>
            </div>
            <div class="graph_btns"><div class="btn-group"></div></div>
        </div>
    </div>
</div>
<div class="right_box">
<h5> <span id="home-top5stock">TOP 5 STOCKS</span> - <span data-nse-translate="symbol" data-nse-translate-symbol="NIFTY FINANCIAL SERVICES">NIFTY FINANCIAL SERVICES</span></h5>
<div class="common-tabs small-tabs">
    <nav>
        <div class="nav nav-tabs"  role="tablist">
            <a class="nav-item nav-link active" data-bs-toggle="tab" href="#tab5_gainers_loosers" role="tab" aria-selected="true" id="gainers_loosers_tab1">GAINERS/LOSERS</a>
            <a class="nav-item nav-link" data-bs-toggle="tab" href="#tab5_most_active" role="tab" aria-selected="false" id="most_active_tab1">MOST ACTIVE </a>
        </div>
    </nav>
    <div class="tab-content">
        <div class="tab-pane fade show active" id="tab5_gainers_loosers" role="tabpanel">
            <div class="table-container gainers"><div id="tab5_tableGainer"></div></div>
            <div class="table-container loosers"><div id="tab5_tableLoser"></div></div>
            <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%20FINANCIAL%20SERVICES"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
        </div>
        <div class="tab-pane fade" id="tab5_most_active" role="tabpanel">
            <div class="table-container"><div id="tab5_tableValue"></div></div>
            <div class="table-container"><div id="tab5_tableVolume"></div></div>
            <div class="link-wrap"> <a href="/market-data/live-equity-market?symbol=NIFTY%20FINANCIAL%20SERVICES"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a> </div>
        </div>
    </div>
</div>
</div>

                        </div>
                        <div class="col-md-6">
                            <div class="row">
                                <div id="homeSlider">
  <div class="slick-carousel" style="">
      
         
            
                <a href="#" title="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/Listing%20Web%20Banner%20%2846%29.jpg" class="img-responsive" alt="Congratulations Ganesh Infraworld  Limited on getting listed on NSE Emerge">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.youtube.com/watch?v=fiRg41yJAF4" title="NSE : Enabling a Billion Dreams! Watch the NSE Documentary " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Enabling-A-Billion-Dreams_Website-Banner%202.jpg" class="img-responsive" alt="NSE : Enabling a Billion Dreams! Watch the NSE Documentary "></a>
                  
                    
                      
                         
            
                <a href="#" title="Now accessing our website is easier than ever before">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Website%20Banner.png" class="img-responsive" alt="Now accessing our website is easier than ever before">
                </a>
                
                    
                      
                         
            
                  <a href="/nseindia-mobile-app" title="NSEIndia&#39;s Mobile App" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Mobile%20App%20Launch%20Banner%20%28002%29.jpeg" class="img-responsive" alt="NSEIndia&#39;s Mobile App"></a>
                  
                    
                      
                         
            
                <a href="#" title="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Bull-inauguration_0_0.jpg" class="img-responsive" alt="Inauguration of the Statue of NSE Bull by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan">
                </a>
                
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Coffee_Table_Book.pdf" title="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan." target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/CP-Radhakrishanan_Coffee-table-book_0_0.jpg" class="img-responsive" alt="Launch of NSE Coffee Table Book by Hon&#39;ble Governor of Maharashtra, Shri C.P. Radhakrishnan."></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-07/20240724_NSE_Report_Indian_Capital_Markets_Digital.pdf" title="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Listing%20Web%20Banner%20%2832%29_0.jpg" class="img-responsive" alt="SEBI Chairperson, Smt. Madhabi Puri Buch unveiled the report on “Indian Capital Markets: Transformative shifts achieved through technology and reforms” along with our MD &amp; CEO, Shri Ashishkumar Chauhan, MD &amp; CEO, CDSL, Shri Nehal Vora and other NSE Senior"></a>
                  
                    
                      
                         
            
                <a href="#" title="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                  <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/Sarthi-app-07-june-570X465%201%20%281%29.jpg" class="img-responsive" alt="SEBI has introduced an Investor Awareness Mobile App Saa₹thi 2.0">
                </a>
                
                    
                      
                         
            
                  <a href="https://www.nseindia.com/research/publications-reports-nse-market-pulse" title="NSE Market pulse report of November 2024 " target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/NSE_Market_pulse_report_of_November_2024.jpg" class="img-responsive" alt="NSE Market pulse report of November 2024 "></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE is the world’s largest derivative exchange for fifth consecutive Year" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1st_2nd%20Position.jpg" class="img-responsive" alt="NSE is the world’s largest derivative exchange for fifth consecutive Year"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2024-01/PR_cc_18012024_0.pdf" title="NSE ranks 3rd largest globally in equity segment in calendar year 2023" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/3rd_3rd%20Position.jpg" class="img-responsive" alt="NSE ranks 3rd largest globally in equity segment in calendar year 2023"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2023-08/PR_cc_18082023.pdf" title="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/1%20%282%29.jpg" class="img-responsive" alt="Shri Ashishkumar Chauhan, MD &amp; CEO, NSE presented a special memento to Hon’ble Lieutenant Governor of J&amp;K Shri Manoj Sinha Ji in Srinagar"></a>
                  
                    
                      
                         
            
                  <a href="https://www.nseindia.com/products-services/commodity-derivatives-contract-specification-energy" title="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/WTI_Web%20banner%20-%20570%20X%20466_V1.jpg" class="img-responsive" alt="Options on WTI Crude Oil Futures and Natural Gas Futures Contracts"></a>
                  
                    
                      
                         
            
                  <a href="https://nsearchives.nseindia.com/web/sites/default/files/2022-07/PR_cc_29072022.pdf" title="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/2%20%282%29.jpg" class="img-responsive" alt="Launch of  NSE IFSC SGX Connect by Hon&#39;ble Prime Minister of India, Shri Narendra Modi"></a>
                  
                    
                      
                         
            
                  <a href="https://investor.sebi.gov.in/" title="NEW INVESTOR WEBSITE" target="_blank">
                    <img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/570%20X%20460-SEBI%20New%20website-banner.jpg" class="img-responsive" alt="NEW INVESTOR WEBSITE"></a>
                  
                    
                      
                        
                          
  </div>
  <button role="button" aria-label="playpause" class="play_pause_btn"><i class="fa fa-pause-circle"></i></button>
</div>
                                
                                        <section class="enhanced_marketstat">
    <div class="container marketstat_bg">
        <div class="row">
            <div class="market_stat_wrapper">
                <div class="header_wrapper">
                    <h5>Market Statistics</h5>
                    <p class="marketTimestamp"></p>
                </div>
                <div class="item_wrapper">
                    <div class="item blue">
                        <p>Stocks Traded</p>
                        <a class="market-data stockTraded" id="stockTraded" href="/market-data/stocks-traded"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item green">
                        <p>Advances</p>
                        <a class="market-data stockAdvanced" id="stockAdvanced" href="/market-data/advance"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item red">
                        <p>Declines</p>
                        <a class="market-data stockDeclines" id="stockDeclines" href="/market-data/decline"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                    <div class="item orange">
                        <p>Unchanged</p>
                        <a class="market-data stockUnchanged" id="stockUnchanged" href="/market-data/unchanged"
                            title="To view all, click here" target="_blank">-</a>
                    </div>
                </div>
                <div class="week52_wrapper">
                    <div class="week52_white_bg">
                        <div class="item">
                            <p>No. of Stocks at<br> <span class="font-bold">52-Week High</span></p>
                            <a href="/market-data/52-week-high-equity-market" id="High52Week" class="High52Week"
                                title="To view all, click here" target="_blank"><span class="arrow green"></span>-</a>
                        </div>
                        <div class="item">
                            <p class="text-end">No. of Stocks at <br><span class="font-bold">52-Week Low</span></p>
                            <a href="/market-data/52-week-low-equity-market" id="Week52Week" class="Week52Week"
                                title="To view all, click here" target="_blank"><span class="arrow red"></span>-</a>
                        </div>
                        <img src="/assets/images/market_stat.png"  class="market_stat" alt="market Statistics"/>
                    </div>
                </div>
                <div class="circuit_wrapper">
                    <div class="item">
                        <p>No. of Stocks in <b>Upper Circuit</b></p>
                        <a href="/market-data/upper-band-hitters" title="To view all, click here" target="_blank"><span class="circuit-number UpperCircuit green" id="UpperCircuit"  >-</span></a>
                    </div>
                    <div class="item red">
                        <p>No. of Stocks in <b>Lower Circuit</b></p>
                        <a href="/market-data/lower-band-hitters" title="To view all, click here" target="_blank" ><span class="circuit-number LowerCircuit red" id="LowerCircuit" >-</span></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

                                    
                                
                                </div>
                            </div>
                        </div>
            </div>
        </div>
        
    </div>




                    </div>
                    <div class="tab-pane fade " id="most-active" role="tabpanel">
                        <nav class="subtabs">
  <div class="container">
    <div class="nav nav-tabs" role="tablist">
      <a class="nav-item nav-link active" data-bs-toggle="tab" href="#cm_2" role="tab" aria-selected="true" id="top10_gainers_loser" >Top 10 Gainers/Loser</a>
      <a onclick="MostActive()" class="nav-item nav-link" data-bs-toggle="tab" href="#mae_mainboard" role="tab" aria-selected="false" aria-selected="false" id="most_active_equities"> Most Active Equities</a>
    </div>
  </div>
</nav>
<div class="tab-content">
  <div class="tab-pane fade show" id="mae_mainboard" role="tabpanel">
    <div class="data-container">
      <div class="tabswrap currencytabs">
        <nav>
          <div class="container"><div class="nav nav-tabs" role="tablist"><a class="nav-item nav-link active" data-bs-toggle="tab" href="#currency-volume-eq" role="tab" aria-selected="true" id="volume" >Volume</a><a class="nav-item nav-link" data-bs-toggle="tab" href="#currency-value-eq" role="tab" aria-selected="false" id="value_header" >Value</a></div></div>
        </nav>
        <div class="container">
          <div class="tab-content">
            <div class="tab-pane fade show active" id="currency-volume-eq" role="tabpanel">
            <div class="container posrel">
              <div class="tableRefreshIcon"><a href="javascript:;" onclick="refreshApi('initMAEquitiesVol')"><img src="/assets/images/refresh-icon.svg" alt="Refresh" title="Refresh"/></a></div>
              <div id="tableActiveEqutiesTime" class="asondate posabs"></div>
            </div>
            <div class="sortby_showing">
              <div class="row align-items-center">
                  <div class="col-md-9">
                      <div id="radio_mae_mainboard_vol" class="sortby_row shortbyWithLabel d-flex my-3">
                          <span id="valuemae_mainboard_volLabel" class="input-group-text groupLabel">Value Convention</span>
                          <div class="d-flex" role="group" aria-labelledby="valuemae_mainboard_volLabel">
                          <div class="radio-wrp col-md-2 mb-0"><input type="radio" id="radioClear_mae_mainboard_vol" name="radio-group-mae_mainboard_vol" value="lakhs" /><label id="market-lakh" for="radioClear_mae_mainboard_vol">Lakhs</label></div>
                          <div class="radio-wrp col-md-2 mb-0"><input type="radio" id="radioCrores_mae_mainboard_vol" name="radio-group-mae_mainboard_vol" value="crores" checked="checked" /><label id="market-crores" for="radioCrores_mae_mainboard_vol">Crores</label></div>
                          <div class="radio-wrp col-md-2 mb-0"><input type="radio" id="radioBillions_mae_mainboard_vol" name="radio-group-mae_mainboard_vol" value="billions" /><label id="market-billion" for="radioBillions_mae_mainboard_vol">Billions</label></div>
                        </div>
                      </div>
                  </div>
              </div>
            </div>
              <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                <div id="mae_mainboard_vol" class="customTable-width"></div>
              </div>
            </div>
            <div class="tab-pane fade" id="currency-value-eq" role="tabpanel">
              <div class="container posrel">
                <div class="tableRefreshIcon"><a href="javascript:;" onclick="refreshApi('initMAEquitiesVal')"><img src="/assets/images/refresh-icon.svg" alt="Refresh" title="Refresh"/></a></div>
                <div id="tableActiveEqutiesTime1" class="asondate posabs"></div>
              </div>
              <div class="sortby_showing">
                <div class="row align-items-center">
                    <div class="col-md-9">
                        <div id="radio_mae_mainboard_val" class="sortby_row shortbyWithLabel d-flex my-3"><span id="valuemae_mainboard_valLabel" class="input-group-text groupLabel">Value Convention</span>
                          <div class="d-flex" role="group" aria-labelledby="valuemae_mainboard_valLabel">
                          <div class="radio-wrp col-md-2 mb-0"><input type="radio" id="radioClear_mae_mainboard_val" name="radio-group-mae_mainboard_val" value="lakhs"/><label id="market-lakh" for="radioClear_mae_mainboard_val">Lakhs</label></div>
                          <div class="radio-wrp col-md-2 mb-0"><input type="radio" id="radioCrores_mae_mainboard_val" name="radio-group-mae_mainboard_val" value="crores" checked="checked" /><label id="market-crores" for="radioCrores_mae_mainboard_val">Crores</label></div>
                          <div class="radio-wrp col-md-2 mb-0"><input type="radio" id="radioBillions_mae_mainboard_val" name="radio-group-mae_mainboard_val" value="billions" /><label id="market-billion" for="radioBillions_mae_mainboard_val">Billions</label></div>
                          </div>
                        </div>
                    </div>
                </div>
              </div>
              
              <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                <div id="mae_mainboard_val" class="customTable-width"></div>
              </div>
            </div>
            <div class="link-view-all text-end"><a href="/market-data/most-active-equities#mac_equity"><span id="viewall">View All</span><img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All" /></a></div>
          </div>
        </div>
      </div>
    </div>
  </div>
<div class="tab-pane fade active show" id="cm_2" role="tabpanel">
  <div class="data-container">
    <div class="top10_gainlose" id="top10_gainlose">
          <div class="container relative top-10-gainer ">
            <div class="row glTimestamp inline-element mb-1">
              <div id="tabletopgainer" class="asondate px-0"></div>
              <div class="refreshIcon"><a href="javascript:;" onclick="refreshApi('loadTopGainerLoosersRef')"><img src="/assets/images/refresh-icon.svg" alt="Refresh" title="Refresh"></a></div>
            </div>
        <div class="mt-2 minHeight300"><div id="top10_gainlose_tabs"></div></div>
        <div class="link-view-all text-end"><a href="/market-data/top-gainers-losers"><span id="viewall">View All</span><img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a></div>
        </div>
    </div>
  </div>
</div>
</div>
<script src="/dist/js/sections/most-active-equities.js"></script>

                    </div>
                    <div class="tab-pane fade " id="nse-derivatives" role="tabpanel">
                        <style type="text/css">
    body .currencytabs .asondate{
        right: 45px;
    }
    .tableRefreshIcon{
        display: flex;
        justify-content: flex-end;
        position: absolute;
        right: 15px;
        bottom: 14px;
    }
    .tableRefreshIcon img{
        width: 25px;
    }
</style>
<nav class="subtabs">
    <div class="container">
        <div class="nav nav-tabs"  role="tablist">
            <a onclick="loadMarket('derivatives-equity')" class="nav-item nav-link active" data-bs-toggle="tab" href="#derivatives-equity" role="tab" aria-selected="true" id="equity-derivatives">Equity Derivatives</a>
            <a onclick="loadMarket('derivatives-currency')" class="nav-item nav-link" data-bs-toggle="tab" href="#derivatives-currency" role="tab" aria-selected="false" id="currency-derivatives">Currency Derivatives</a>
            <a onclick="loadMarket('derivatives-commodity')" class="nav-item nav-link" data-bs-toggle="tab" href="#derivatives-commodity" role="tab" aria-selected="false" id="commodity-derivatives">Commodity Derivatives</a>
            <a onclick="loadMarket('derivatives-irf')" class="nav-item nav-link" data-bs-toggle="tab" href="#derivatives-irf" role="tab" aria-selected="false" id="interest-rate-derivatives">Interest Rate Derivatives</a>
        </div>
    </div>
</nav>
<div class="tab-content py-3">
    <div class="tab-pane fade show active" id="derivatives-equity" role="tabpanel">
        <div class="container">
            <div class="row">
                <div class="col-md-3 col-sm-12 col-12">
                    <div class="selectbox currency-selectbox">
                        <div class="custom_select">
                            <select id="derivatives-equity-dropdown">
                                <option selected="selected" value="allcontracts" id="allContracts">All Contracts</option>
                                <optgroup label="Futures" >
                                    <option value="fu_nifty50" id="nifty50futuresdd">Nifty 50 Futures</option>
                                    <option value="fu_niftynxt50" id="niftynxt50futuresdd" class="niftynxt">Nifty Next 50 Futures</option>
                                    <option value="fu_niftybank" id="niftybankfuturesdd">Nifty Bank Futures</option>
                                    <!--<option value="fu_niftyit">Nifty IT Futures</option>-->
                                    <option value="fu_finnifty" id="niftyfinancialfuturesdd">Nifty Financial Futures</option>
                                    <option value="fu_midcapnifty" id="niftymidcapselectfuturessdd">Nifty Midcap Select Futures</option>
                                    <option value="fu_stock" id="stockfuturesdd">Stock Futures </option></optgroup>
                                    <optgroup label="Options"><option value="opt_nifty50" id="nifty50optionsdd">Nifty 50 Options</option>
                                        <option value="opt_niftynxt50" id="niftynxt50optionsdd" class="niftynxt">Nifty Next 50 Options</option>
                                    <option value="opt_niftybank" id="niftybankfuturesdd">Nifty Bank Options</option>
                                    <option value="opt_finnifty" id="niftyfinancialfuturesdd">Nifty Financial Options</option>
                                    <option value="opt_midcapnifty" id="niftymidcapselectoptionsdd">Nifty Midcap Select Options</option>
                                    <!--<option value="opt_niftyit">Nifty IT Options</option>-->
                                    <option value="opt_stock" id="stockoptionsdd">Stock Options</option>
                                </optgroup>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="data-container">
            <div class="tabswrap currencytabs">
                <nav>
                    <div class="container">
                        <div class="nav nav-tabs"  role="tablist">
                            <a class="nav-item nav-link active" data-bs-toggle="tab" href="#equity-volume" role="tab" aria-selected="true" id="volumecontracts">Volume</a>
                            <a class="nav-item nav-link" data-bs-toggle="tab" href="#equity-value" role="tab" aria-selected="false" id="value_header">Value</a>
                        </div>
                    </div>
                </nav>
                <div class="container posrel">
                    <div class="tableRefreshIcon"><a href="javascript:;" onclick="refreshApi('loadEquityDerivative', '#derivatives-equity-dropdown')"><img src="/assets/images/refresh-icon.svg" alt="Refresh" title="Refresh" /></a></div>
                    <div id="tableEquityDerTime" class="asondate posabs"></div>
                </div>
                <div class="container">
                    <div class="sortby_showing">
                        <div class="row align-items-center">
                            <div class="col-md-9">
                                <div id="radio_derivativeEqTab" class="sortby_row shortbyWithLabel d-flex my-3">
                                    <span id="valuederivativeEqTabLabel" class="input-group-text groupLabel">Value Convention</span>
                                    <div class="d-flex" role="group" aria-labelledby="valuederivativeEqTabLabel">
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioClear_derivativeEqTab" name="radio-group-derivativeEqTab" value="lakhs"
                                        />
                                        <label id="market-lakh" for="radioClear_derivativeEqTab">Lakhs</label>
                                    </div>
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioCrores_derivativeEqTab" name="radio-group-derivativeEqTab" value="crores" checked="checked" />
                                        <label id="market-crores" for="radioCrores_derivativeEqTab">Crores</label>
                                    </div>
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioBillions_derivativeEqTab" name="radio-group-derivativeEqTab" value="billions" />
                                        <label id="market-billion" for="radioBillions_derivativeEqTab">Billions</label>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-content py-3">
                        <div class="tab-pane fade show active" id="equity-volume" role="tabpanel">
                            <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                                <div id="tableDerivativeVol" class="customTable-width"></div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="equity-value" role="tabpanel">
                            <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                                <div id="tableDerivativeVal" class="customTable-width"></div>
                            </div>
                        </div>
                        <div class="link-view-all text-end">
                            <a href="/market-data/most-active-contracts#mac_equity"><span id="viewall">View All</span><img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="note_container">
                <h3>
                    <span id="note">Note</span>
                </h3>
                <ul>
                    <li><span id="percent_change_today">% change Today :</span>
                        <ul>
                            <li id="derivatives_irf_note5">with respect to Prev. Close</li>
                            <li id="derivatives_irf_note6">with respect to adjusted price on ex-date for Dividend, Bonus, Rights & Face Value Split.</li>
                        </ul>
                    </li>
                    <li id="derivatives_irf_note2">Most Active Contracts are displayed in the descending order of Volume/Value</li>
                    <li id="derivatives_irf_note3">In case of Option Contracts “Value” displayed is “Premium Turnover”</li>
                    <li id="derivatives_irf_note4">Volume and Open Interest are displayed in “Contracts”</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="derivatives-currency" role="tabpanel">
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <div class="selectbox currency-selectbox">
                        <div class="custom_select">
                            <select  id="derivatives-currency-dropdown">
                                <option value="most_act_cont" id="most_active_contracts">Most Active Contracts</option>
                                <option value="most_act_call" id="most_active_calls">Most Active Calls</option>
                                <option value="most_act_puts" id="most_active_puts">Most Active Puts</option>
                                <option value="most_act_futs" id="most_active_futures">Most Active Futures</option>
                                <option value="most_act_opt" id="most_active_Options">Most Active Options</option>
                                <option value="most_act_cross" id="most_active_crosscurrency">Most Active Cross Currency</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="data-container">
            <div class="tabswrap currencytabs">
                <nav>
                    <div class="container">
                        <div class="nav nav-tabs"  role="tablist"> <a class="nav-item nav-link active" data-bs-toggle="tab" href="#ed-volume" role="tab"><span id="volumecontracts">Volume</span></a> <a class="nav-item nav-link" data-bs-toggle="tab" href="#ed-value" role="tab" aria-selected="false"><span id="value_header">Value</span></a>  </div>
                    </div>
                </nav>
                <div class="container posrel">
                    <div class="tableRefreshIcon"><a href="javascript:;" onclick="refreshApi('loadCurrencyDerivative', '#derivatives-currency-dropdown')"><img src="/assets/images/refresh-icon.svg" alt="Refresh" title="Refresh" /></a></div>
                    <div id="tableCurrencyDerTime" class="asondate posabs">
                        <!--As on Nov 21, 2018 12:01:25 IST-->
                    </div>
                </div>
                <div class="container">
                    <div class="sortby_showing">
                        <div class="row align-items-center">
                            <div class="col-md-9">
                                <div id="radio_derivativeCurTab" class="sortby_row shortbyWithLabel d-flex my-3">
                                    <span id="valuederivativeCurTabLabel" class="input-group-text groupLabel">Value Convention</span>
                                    <div class="d-flex" role="group" aria-labelledby="valuederivativeCurTabLabel">
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioClear_derivativeCurTab" name="radio-group-derivativeCurTab" value="lakhs"
                                        />
                                        <label id="market-lakh" for="radioClear_derivativeCurTab">Lakhs</label>
                                    </div>
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioCrores_derivativeCurTab" name="radio-group-derivativeCurTab" value="crores" checked="checked" />
                                        <label id="market-crores" for="radioCrores_derivativeCurTab">Crores</label>
                                    </div>
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioBillions_derivativeCurTab" name="radio-group-derivativeCurTab" value="billions" />
                                        <label id="market-billion" for="radioBillions_derivativeCurTab">Billions</label>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-content pb-3">
                        <div class="tab-pane fade show active" id="ed-volume" role="tabpanel">
                            <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                                <div id="tableCurrencyDerivativeVol" class="customTable-width"></div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="ed-value" role="tabpanel">
                            <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                                <div id="tableCurrencyDerivativeVal" class="customTable-width"></div>
                            </div>
                        </div>
                        <div class="link-view-all text-end">
                            <a href="/market-data/most-active-contracts#mac_currency"><span id="viewall">View All</span><img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="note_container">
                <h3>
                    <span id="note">Note</span>
                </h3>
                <ul>
                    <li id="derivatives_irf_note1">% change is calculated with respect to “Prev. Close”</li>
                    <li id="derivatives_irf_note2">Most Active Contracts are displayed in the descending order of Volume/Value</li>
                    <li id="derivatives_irf_note3">In case of Option Contracts “Value” displayed is “Premium Turnover”</li>
                    <li id="derivatives_irf_note4">Volume and Open Interest are displayed in “Contracts”</li>
                    <li> <span id="derivatives_irf_note7">For the Order Quotation for each Cross currency contract, refer to</span> <a href="/products-services/currency-derivatives-contact-specification-cross-currency"><span id="link">link</span></a></li>
                    <li id="derivatives_irf_note8">Premium Turnover for Cross Currency pairs is calculated by using latest available Reference Rate - FBIL</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="derivatives-commodity" role="tabpanel">
        <div class="data-container">
            <div class="tabswrap currencytabs">
                <nav>
                    <div class="container">
                        <div class="nav nav-tabs"  role="tablist"> <a class="nav-item nav-link active" data-bs-toggle="tab" href="#commodity-volume" role="tab"><span id="volumecontracts">Volume</span></a> <a class="nav-item nav-link" data-bs-toggle="tab" href="#commodity-value" role="tab" aria-selected="false"><span id="value_header">Value</span></a>  </div>
                    </div>
                </nav>
                <div class="container posrel">
                    <div class="tableRefreshIcon"><a href="javascript:;" onclick="refreshApi('loadCommodityDerivative')"><img src="/assets/images/refresh-icon.svg" alt="Refresh" title="Refresh" /></a></div>
                    <div id="tableCommodityDerValTime" class="asondate posabs">
                        <!--As on Nov 21, 2018 12:01:25 IST-->
                    </div>
                </div>
                <div class="container">
                    <div class="sortby_showing">
                        <div class="row align-items-center">
                            <div class="col-md-9">
                                <div id="radio_derivativeComTab" class="sortby_row shortbyWithLabel d-flex my-3">
                                    <span id="valuederivativeComTabLabel" class="input-group-text groupLabel">Value Convention</span>
                                    <div class="d-flex" role="group" aria-labelledby="valuederivativeComTabLabel">
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioClear_derivativeComTab" name="radio-group-derivativeComTab" value="lakhs"
                                        />
                                        <label id="market-lakh" for="radioClear_derivativeComTab">Lakhs</label>
                                    </div>
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioCrores_derivativeComTab" name="radio-group-derivativeComTab" value="crores" checked="checked" />
                                        <label id="market-crores" for="radioCrores_derivativeComTab">Crores</label>
                                    </div>
                                    <div class="radio-wrp col-md-2 mb-0">
                                        <input type="radio" id="radioBillions_derivativeComTab" name="radio-group-derivativeComTab" value="billions" />
                                        <label id="market-billion" for="radioBillions_derivativeComTab">Billions</label>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-content pb-3">
                        <div class="tab-pane fade show active" id="commodity-volume" role="tabpanel">
                            <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                                <div id="tableCommodityDerVol" class="customTable-width"></div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="commodity-value" role="tabpanel">
                            <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                                <div id="tableCommodityDerVal" class="customTable-width"></div>
                            </div>
                        </div>
                        <div class="link-view-all text-end">
                            <a href="/market-data/most-active-contracts#mac_commodity"><span id="viewall">View All</span><img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="note_container">
                <h3>
                    <span id="note">Note</span>
                </h3>
                <ul>
                    <li id="derivatives_irf_note1">% change is calculated with respect to “Prev. Close”</li>
                    <li id="derivatives_irf_note2">Most Active Contracts are displayed in the descending order of Volume/Value</li>
                    <li id="derivatives_irf_note4">Volume and Open Interest are displayed in “Contracts”</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="derivatives-irf" role="tabpanel">
            <div class="container">
                <div class="row">
                    <div class="col-md-3">
                        <div class="selectbox irf-selectbox">
                            <div class="custom_select">
                                <select  id="derivatives-irf-dropdown">
                                    <option value="most_act" id="most_active_contracts">Most Active Contracts</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="data-container">
                <div class="tabswrap currencytabs">
                    <nav>
                        <div class="container">
                            <div class="nav nav-tabs"  role="tablist"> <a class="nav-item nav-link active" data-bs-toggle="tab" href="#irf-volume" role="tab"><span id="volumecontracts">Volume</span></a> <a class="nav-item nav-link" data-bs-toggle="tab" href="#irf-value" role="tab" aria-selected="false"><span id="value_header">Value</span></a>  </div>
                        </div>
                    </nav>
                    <div class="container posrel">
                        <div class="tableRefreshIcon"><a href="javascript:;" onclick="refreshApi('loadIRFDerivative', '#derivatives-irf-dropdown')"><img src="/assets/images/refresh-icon.svg" alt="Refresh" title="Refresh" /></a></div>
                        <div id="tableIRFDerTime" class="asondate posabs">
                            <!--As on Nov 21, 2018 12:01:25 IST-->
                        </div>
                    </div>
                    <div class="container">
                        <div class="sortby_showing">
                            <div class="row align-items-center">
                                <div class="col-md-9">
                                    <div id="radio_derivativeIRFTab" class="sortby_row shortbyWithLabel d-flex my-3">
                                        <span id="valuederivativeIRFTabLabel" class="input-group-text groupLabel">Value Convention</span>
                                        <div class="d-flex" role="group" aria-labelledby="valuederivativeIRFTabLabel">
                                        <div class="radio-wrp col-md-2 mb-0">
                                            <input type="radio" id="radioClear_derivativeIRFTab" name="radio-group-derivativeIRFTab" value="lakhs"
                                            />
                                            <label id="market-lakh" for="radioClear_derivativeIRFTab">Lakhs</label>
                                        </div>
                                        <div class="radio-wrp col-md-2 mb-0">
                                            <input type="radio" id="radioCrores_derivativeIRFTab" name="radio-group-derivativeIRFTab" value="crores" checked="checked" />
                                            <label id="market-crores" for="radioCrores_derivativeIRFTab">Crores</label>
                                        </div>
                                        <div class="radio-wrp col-md-2 mb-0">
                                            <input type="radio" id="radioBillions_derivativeIRFTab" name="radio-group-derivativeIRFTab" value="billions" />
                                            <label id="market-billion" for="radioBillions_derivativeIRFTab">Billions</label>
                                        </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-content py-3">
                            <div class="tab-pane fade show active" id="irf-volume" role="tabpanel">
                                <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                                    <div id="tableIRFDerivativeVol" class="customTable-width"></div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="irf-value" role="tabpanel">
                                <div class="table-wrap mb-2 borderSet maxHeight-480 scrollWrap">
                                    <div id="tableIRFDerivativeVal" class="customTable-width"></div>
                                </div>
                            </div>
                            <div class="link-view-all text-end">
                                <a href="/market-data/most-active-contracts#mac_irf"><span id="viewall">View All</span><img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="container">
                <div class="note_container">
                    <h3>
                        <span id="note">Note</span>
                    </h3>
                    <ul>
                        <li id="derivatives_irf_note1">% change is calculated with respect to “Prev. Close”</li>
                        <li id="derivatives_irf_note2">Most Active Contracts are displayed in the descending order of Volume/Value</li>
                        <li id="derivatives_irf_note3">In case of Option Contracts “Value” displayed is “Premium Turnover”</li>
                        <li id="derivatives_irf_note4">Volume and Open Interest are displayed in “Contracts”</li>
                    </ul>
                </div>
            </div>
        </div>
</div>

                    </div>
                    <div class="tab-pane fade " id="nse-reference-rates" role="tabpanel">
                        <script>
    
</script>
<div class="container py-3">
    <div class="ref_rates mb-3">
        <div class="row">
            <div class="col-lg-3 col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 id="currency_spotrates">Currency Spot Rates</h4>
                        
                            <p><span id="asontxt">As on </span> <span>06-Dec-2024 13:30:00 IST</span></p>
                        
                    </div>
                    <div class="card-body">
                        <table id="currencySpotRate" class="table-resonsive card-table">
                            <thead>
                            <tr>
                                <th id="Currency">Currency</th>
                                <th class="text-end" id="unit">Unit</th>
                                <th class="text-end" id="value_header">Value</th>
                            </tr>
                            </thead>
                            <tbody>
                    
                        
                            <tr>
                                <td class="curr_sign"><i class="country_icon"><img src="/assets/images/icon-curr-usd.png" alt="USD"></i><span data-nse-translate="symbol" data-nse-translate-symbol="USD">USD</span></td>
                                <td align="right" rel="usd" class="curr_unit currSymbol" data-nse-translate="numberonly">1</td>
                                <td align="right" class="curr_val"> ₹ <span data-nse-translate="number"> 84.6578</span></td>
                            </tr>
                            <tr>
                                <td class="curr_sign"><i class="country_icon"><img src="/assets/images/icon-curr-yen.png" alt="YEN"></i><span data-nse-translate="symbol" data-nse-translate-symbol="YEN">YEN</span></td>
                                <td align="right" rel="yen" class="curr_unit currSymbol" data-nse-translate="numberonly">100</td>
                                <td align="right" class="curr_val"> ₹ <span data-nse-translate="number"> 56.5000</span></td>
                            </tr>
                            <tr>
                                <td class="curr_sign"><i class="country_icon"><img src="/assets/images/icon-curr-gbp.png" alt="GBP"></i><span data-nse-translate="symbol" data-nse-translate-symbol="GBP">GBP</span></td>
                                <td align="right" rel="gbp" class="curr_unit currSymbol" data-nse-translate="numberonly">1</td>
                                <td align="right" class="curr_val"> ₹ <span data-nse-translate="number"> 107.9127</span></td>
                            </tr>
                            <tr>
                                <td class="curr_sign"><i class="country_icon"><img src="/assets/images/icon-curr-euro.png" alt="EURO"></i><span data-nse-translate="symbol" data-nse-translate-symbol="EURO">EURO</span></td>
                                <td align="right" rel="euro" class="curr_unit currSymbol" data-nse-translate="numberonly">1</td>
                                <td align="right" class="curr_val"> ₹ <span data-nse-translate="number"> 89.5324</span></td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="ref_source" id="source1">Source *</div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 id="interest_rate">Interest Rates</h4>
                        
                            <p><span id="asontxt">As on </span> <span>Dec 06, 2024 17:00:51 IST</span> </p>
                        
                    </div>
                    <div class="card-body">
                        <table class="table-resonsive card-table">
                            <thead>
                            <tr>
                                <th id="underlying1">UNDERLYING</th>
                                <th class="text-end" id="price2">PRICE</th>
                                <th class="text-end" id="yield">YIELD</th>
                            </tr>
                            </thead>
                            <tbody>
                        
                            <tr>
                                <td >726GS2033</td>
                                <td class="text-end" >102.8000</td>
                                <td class="text-end" >6.805</td>
                            </tr>
                            <tr>
                                <td >718GS2033</td>
                                <td class="text-end" >102.3925</td>
                                <td class="text-end" >6.8083</td>
                            </tr>
                            <tr>
                                <td >710GS2034</td>
                                <td class="text-end" >102.1525</td>
                                <td class="text-end" >6.783</td>
                            </tr>
                            <tr>
                                <td >679GS2034</td>
                                <td class="text-end" >100.3100</td>
                                <td class="text-end" >6.7446</td>
                            </tr>
                            <tr>
                                <td >667GS2035</td>
                                <td class="text-end" >98.4050</td>
                                <td class="text-end" >6.8786</td>
                            </tr>
                            <tr>
                                <td >754GS2036</td>
                                <td class="text-end" >105.2500</td>
                                <td class="text-end" >6.8699</td>
                            </tr>
                            <tr>
                                <td >741GS2036</td>
                                <td class="text-end" >104.4000</td>
                                <td class="text-end" >6.8662</td>
                            </tr>
                            <tr>
                                <td >718GS2037</td>
                                <td class="text-end" >102.5500</td>
                                <td class="text-end" >6.8733</td>
                            </tr>
                            <tr>
                                <td >723GS2039</td>
                                <td class="text-end" >103.2325</td>
                                <td class="text-end" >6.8708</td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="ref_source" id="source2">Source ** </div>
            </div>
            <div class="col-lg-6 col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <h4 id="commodity_spot">Commodity Spot<sup>*</sup><span id="rates">Rates</span> </h4>
                                
                                    <p><span id="asontxt">As on </span> <span>06-DEC-2024 IST</span></p>
                                
                            </div>
                            <div class="col-md-6">
                                <div class="link_wrap">
                                    <a href="https://nsearchives.nseindia.com/archives/com/spot/Participantfiles_06122024_2.xlsx" target="_blank"><span id="poll_info"> </span> Polled information <i class="fa fa-download"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <table class="table-resonsive card-table">
                            <thead>
                            <tr>
                                <th width="8%" id="symbol">SYMBOL</th>
                                <th width="16%" id="unit">UNIT</th>
                                <th width="18%" id="update_time_date">UPDATED
                                    DATE 
                                </th>
                                <th width="29%" class="text-end" id="spot_price1">
                                    SPOT PRICE (In ₹)
                                    POLLED AT 12:30 HRS
                                </th>
                                <th width="29%" class="text-end" id="spot_price2">
                                    SPOT PRICE (In ₹)
                                    POLLED AT 16:30 HRS
                                </th>
                            </tr>
                            </thead>
                            <tbody>
                    
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="GOLD" >GOLD</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="10 Grams" >10 Grams</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">75,880.00</td>
                                <td class="text-end">75,957.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="GOLD1G" >GOLD1G</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Grams" >1 Grams</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">7,619.00</td>
                                <td class="text-end">7,626.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="GOLDGUINEA" >GOLDGUINEA</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="8 Grams" >8 Grams</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">60,948.00</td>
                                <td class="text-end">61,010.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="GOLDM" >GOLDM</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="10 Grams" >10 Grams</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">75,880.00</td>
                                <td class="text-end">75,957.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="SILVER" >SILVER</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">90,977.00</td>
                                <td class="text-end">90,776.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="SILVERM" >SILVERM</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">90,977.00</td>
                                <td class="text-end">90,776.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="SILVERMIC" >SILVERMIC</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">90,977.00</td>
                                <td class="text-end">90,776.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="CRUDEOIL" >CRUDEOIL</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Barrel" >1 Barrel</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">5,787.00</td>
                                <td class="text-end">-</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="CRUDEOILM" >CRUDEOILM</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Barrel" >1 Barrel</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">5,787.00</td>
                                <td class="text-end">-</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="NATGASMINI" >NATGASMINI</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 mmBtu" >1 mmBtu</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">260.90</td>
                                <td class="text-end">-</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="NATURALGAS" >NATURALGAS</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 mmBtu" >1 mmBtu</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">260.90</td>
                                <td class="text-end">-</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="ALUMINI" >ALUMINI</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">-</td>
                                <td class="text-end">247.40</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="ALUMINIUM" >ALUMINIUM</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">-</td>
                                <td class="text-end">247.40</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="COPPER" >COPPER</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">821.00</td>
                                <td class="text-end">827.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="LEAD" >LEAD</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">-</td>
                                <td class="text-end">185.50</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="LEADMINI" >LEADMINI</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">-</td>
                                <td class="text-end">185.50</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="NICKEL" >NICKEL</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">-</td>
                                <td class="text-end">1,371.00</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="ZINC" >ZINC</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">-</td>
                                <td class="text-end">291.50</td>
                            </tr>
                        
                            <tr>
                                <td data-nse-translate="symbol" data-nse-translate-symbol="ZINCMINI" >ZINCMINI</td>
                                <td  data-nse-translate="symbol" data-nse-translate-symbol="1 Kg" >1 Kg</td>
                                <td>06-DEC-2024</td>
                                <td class="text-end">-</td>
                                <td class="text-end">291.50</td>
                            </tr>
                        
                    
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="ref_source" id="source3">Source *** </div>
                <div class="link-view-all text-end">
                    <a href="/market-data/commodity-derivatives"><span id="viewall">View All</span> <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                </div>
            </div>
            <div class="container my-4">
                <div id="referenceNotes" class="note_container">
                    <div class="note_container">
                        <h3>
                            <span>Note</span>
                        </h3>
                        <p>COMMODITIES - SEBI/HO/CDMRD/DMP/CIR/P/2016/78 dated September 02, 2016 provides for "Spot Price Polling
                            Mechanism". To register your COMPLAINTS with respect to Spot Price Polling, please send your complaints/
                            feedback to&nbsp;<a href="mailto:complaint_poll@nse.co.in">complaint_poll@nse.co.in</a>.</p>
                        <ul>
                            <li><strong>* Currency :</strong> <span> RBI Reference Rates are published with the permission of FBIL
                                    at around 13:30 p.m. on RBI business days</span></li>
                            <li><strong>** Interest Rate :</strong> <span>Spot Prices of Govt. Securities is sourced and published
                                    with the permission of CCIL : )</span></li>
                            <li><strong>*** Commodities :</strong><span> For </span>GOLD<span>, GOLDM, SILVER - Spot Prices are
                                    polled in 2 sessions - Session 1 at 12:30 and Session 2 at 16:30 hrs</span></li>
                            <li><span>For BRCRUDE - Spot price is published as per ICIS assessment in 2 sessions - Session 1 at
                                    07:30 hrs and Session 2 at 19:45 hrs (session 2 time for BRCRUDE shall be based on US daylight
                                    saving time period)</span></li>
                            <li><span>Reference price of WTI Crude Oil and Natural Gas would be published once a day in the
                                    morning.</span></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

                    </div>
                    <div class="tab-pane fade " id="nse-market-turnover" role="tabpanel">
                        <div class="container py-3" id="marketTurnoverContainer">
            <div class="sortby_showing ternoveShorby">
                <div class="row align-items-center mb-2">
                    <div class="col-md-12 d-flex align-items-center detail_view_enhanced mb-2">
                        <div class="posrel d-flex font-bold" style="flex-wrap: wrap;">
                            <div id="liveindexTime" class="ason me-2"></div>
                            <div class="refreshIcon refreshFiling" style="width: auto;"><a href="javascript:;"
                                    onclick="refreshmarketTurnOver();"><img src="/assets/images/refresh-icon.svg" alt="Refresh"
                                        title="Refresh"></a>
                                    </div>
                        <div id="radio_marketTurnOver" class="sortby_row  shortbyWithLabel d-flex" style="margin-right: 8px;">
                            <span id="valueStockLabel" class="input-group-text groupLabel">Value Convention</span>
                            <div class="d-flex" role="group" aria-labelledby="valueStockLabel">
                                <div class="radio-wrp col-md-2 mb-0">
                                    <input type="radio" id="radioClear_marketTurnOver" name="radio-group" value="lakhs">
                                    <label for="radioClear_marketTurnOver" id="lakhs">Lakhs</label>
                                </div>
                                <div class="radio-wrp col-md-2 mb-0">
                                    <input type="radio" id="radioCrores_marketTurnOver" name="radio-group" value="crores" checked="checked">
                                    <label for="radioCrores_marketTurnOver" id="crores">Crores</label>
                                </div>
                                <div class="radio-wrp col-md-2 mb-0">
                                    <input type="radio" id="radioBillions_marketTurnOver" name="radio-group" value="billions">
                                    <label for="radioBillions_marketTurnOver" id="billions">Billions</label>
                                </div>
                            </div>
                        </div>                    
                    </div>
                </div>
            <div class="home_market_turnover">
                <table id="marketTurnover" class="common_table tbl_mkt_turnover w-100">
                    <thead>
                    <tr>
                        <th rowspan="2" class="productHed br-1" id="productsHed">PRODUCTS</th>
                    
                        <th colspan="7" class="br-1" id="todayHed">
                            <h3 id="today">
                                Today
                            </h3>
                        </th>
                        <!-- <th class="br-1" rowspan="2" id="updatedOnHed"> Updated on </th>  -->
                        <th colspan="3" class="br-1" id="yesterdayHed">
                            <h3 id="yesterday">
                                Previous Trade Day
                            </h3>
                        </th>
                    
                    </tr>
                    <tr>
                        <!--yesterday cols-->
                        <th id="volume1" class="text-end br-1"><span id="volume">VOLUME</span>
                            <br> <span id="shares_contracts">(Shares/Contracts)</span>
                        </th>
                        <th class="text-end br-1"><span id="marketTurnoverValueHeading">VALUE*</span>
                            <br> <span data-nse-translate="currencyunit" data-nse-translate-currencyunit="crores" class="updateCurrType">(₹ Crores)</span>
                        </th>
                        <th id="openInterest1" class="text-end br-1"><span id="openInterest">OPEN INTEREST</span> <br> (<span id="contracts">Contracts</span>) </th>
                        <th id="nooforders1" class="text-end br-1"><span id="nooforders">No. of Orders#</span></th>
                        <th id="nooftrades1" class="text-end br-1"><span id="nooftrades">No. of Trades</span></th>
                        <th id="averageTradeValue" class="text-end br-1"><span id="averageTradeValueSpan">Average Trade Value(₹)</span></th>
                        <th id="updatedOnHed" class="text-end br-1"><span id="openInterest">Updated AT</span></th>
                    <!--today cols-->
                        <th id="volume1" class="text-end br-1"><span id="volume">VOLUME</span>
                            <br>(<span id="shares_contracts">Shares/Contracts</span>)
                        </th>
                        <th class="text-end br-1"><span id="marketTurnoverValueHeading">VALUE*</span>
                            <br> <span data-nse-translate="currencyunit" data-nse-translate-currencyunit="crores" class="updateCurrType">(₹ Crores)</span>
                        </th>
                        <th id="openInterest1" class="text-end br-1"> <span id="openInterest">OPEN INTEREST</span>
                            <br> (<span id="contracts">Contracts</span>)
                        </th>
                    </tr>
                    </thead>
                </table>
        </div>
        </div>
    </div>
    <div class="note_container">
        <h3>
            <span id="note">Note</span>
        </h3>
        <ul>
            <!-- <li> <span id="market_turnover_note1">Derivative to cash ratio = </span><span id="derRatio"></span></li> -->
            <li id="market_turnover_note2"> *In case of Option Contracts “Value” displayed is “Premium Turnover”</li>
            <li id="market_turnover_note3"> Turnover of Currency Futures and Currency options include turnover of both Non Cross Currency pairs and
                Cross Currency pairs</li>
            <li id="market_turnover_note4"> Currency Turnover is calculated by using latest available Reference rate-FBIL</li>
            <li><span id="market_turnover_note6" style="margin-bottom: 0;"> Turnover of Mutual Fund is based on the orders received on the platform as per the details given below:</span>
                <ul class="subpointer">
                    <li id="market_turnover_note6_sub1" style="margin-bottom: 0;">For Transaction type “Purchase / SIP” and Category type “Liquid” cut off time is 13:00 and for Category Type “Non-Liquid” cut off time is 14:30</li>
                    <li id="market_turnover_note6_sub2">For Transaction type ”Redemption & SWITCH” cut off time is 15:00</li>
                </ul>
            </li>
            <li id="market_turnover_note4">Instrument type in Equity includes fully paid equity shares/ETFs, units of REITs/INVITs and partly paid equity shares</li>
            <!-- <li id="market_turnover_note5">In case of Mutual Fund, "No. of Trades" represent Orders / Bids</li> -->
            <li id="market_turnover_note7">Average Trade Value = Total Traded Value / Total Number of Trades</li>
            <li id="market_turnover_note8">#“No. of Orders” represents all order messages received i.e.: Orders confirmed, modified, cancelled and rejected</li>
        </ul>
    </div>
</div>


                    </div>
                    <div class="tab-pane fade " id="nse-complaints" role="tabpanel">
                        <!-- Complaints and Registration Tab Start here-->
<div class="container py-2" id="complaints-report">
    <div class="content">
    <h4 id="Complaints_reporting">Complaints &amp; Reporting</h4>
        <div class="row">
               <div class="col-lg-6">
                  <div class="row">
                    <div class="col-sm-7 equal-height first">
                  <h5 id="File_a_complaint">File a Complaint</h5>               
                  <p id="File_para">(Against Stockbrokers and Listed Companies <br/>with respect to your Trades / Shareholding)</p>
                  </div>
                  <div class="col-sm-5 equal-height second">
                  <h5 id="Investor_support">Investor Support</h5>
                  <p id="Investor_para"><b><span id="tollfree">Toll Free</span></b> : 1800 266 0050</p>
                  <p id="Investor_para1"><b><span id="telno">Tel No</span></b> : (022) 2659 8100 - 144</p>
                  <p></p>
                  </div>
                  <div id="complaints_click_here" class="container row third"><a href="/complaints/file-a-complaint-online" class="flat-button-white first" ><span id="click_here">File a Complaint</span></a></div> 
                </div>
              </div>	
              <div class="col-lg-6">
                  <div class="row">
                    <div class="col-sm-7 equal-height middle">
                  <h5 id="Report_a_tip_suspicious_activity">Report a tip or Suspicious activity</h5>
                  <p id="Report_para">(Assured Returns, SMS Tips, Market Abuse, Connectivity issues, Services, etc.)</p>
                  </div>
                  <div class="col-sm-5 equal-height.last">
                  <h5 id="Support">Support</h5>
                  <p id="Support_para"><span id="call_us">Call Us</span> : 1800 266 0050</p>
                  <p id="Support_para1"><span id="sms">SMS</span> : +91 829 183 3676</p>
                  <p id="Support_para2"><span id="emaill">Email</span> : <a href="mailto:feedbk_invg@nse.co.in">feedbk_invg@nse.co.in</a></p>
                  </div>
                  <div id="complaints_click" class="container row"><a href="https://www.nseindia.com/submit-tipoff" class="flat-button-white second" target="_blank"><span id="click_here">Report a Tip Off</span></a>
                  </div>
                  </div>
              </div>
         </div>
      </div>
    </div>
    <!-- Complaints and Registration Tab Ends here-->
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
        </div>
    </div>
</div>

    <section class="seperator mb-0"> <span></span> <span></span> <span></span> <span></span> </section>
    
    
        
<section class="corporate_section common-tabs tabs-slider slider-with-dots">
    <div class="container-fluid">
        <div class="row">
            <div class="col-xs-12 w-100">
                <nav>
                    <div class="container">
                        <div class="nav nav-tabs" role="tablist">
                            <a class="nav-item nav-link active" data-bs-toggle="tab" href="#corporate-announce" role="tab" aria-selected="true" id="corporate-announcements2">Corporate Announcements</a>
                            <a class="nav-item nav-link" data-bs-toggle="tab" href="#board-meetings" role="tab" aria-selected="false" id="board-meetings2">Board Meetings</a>
                            <a class="nav-item nav-link" data-bs-toggle="tab" href="#corporate-actions" role="tab" aria-selected="false" id="corporate-actions2">Corporate Actions</a></div>
                    </div>
                </nav>
                <div class="tab-content py-3">
                    <div class="tab-pane fade show active" id="corporate-announce" role="tabpanel">
                        <div class="container posrel">
                            <div class="lr-m-15">
                                <div id="corporateAnnouncement"></div>
                            </div>
                            <div class="row link_row">
                                <div class="col-md-12">
                                    <div class="link-view-all text-end mt-3">
                                        <a href="/companies-listing/corporate-filings-announcements" id="view-all">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="board-meetings" role="tabpanel">
                        <div class="container posrel py-3">
                            <div class="lr-m-15 translate">
                                <div id="boardMeeting"></div>
                            </div>
                            <div class="row link_row">
                                <div class="col-md-12">
                                    <div class="link-view-all text-end mt-3">
                                        <a href="/companies-listing/corporate-filings-board-meetings" id="view-all">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="corporate-actions" role="tabpanel">
                        <div class="container posrel py-3">
                            <div class="lr-m-15">
                                <div id="corporateAction"></div>
                            </div>
                            <div class="row link_row">
                                <div class="col-md-12">
                                    <div class="link-view-all text-end mt-3">
                                        <a href="/companies-listing/corporate-filings-actions" id="view-all">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</section>
    
    
    <section class="corporate_events_videos common-tabs">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    
                        <section class="ad_section">
<div class="container">
<div class="row centerItem">
    <div class="col-md-12">
        <figure><a href="https://nsearchives.nseindia.com/corporate/Guidelines for filing complaints on SCORES.pdf" target="_blank"><img src="https://nsearchives.nseindia.com/web/sites/default/files/2022-12/Web_Banner_Guidelines_for_filing_complaints_on_SCORES.jpg" class="img-fluid" alt="SEBI Complaints Redress System Platform" title="SEBI Complaints Redress System Platform" /></a></figure>
        
    </div>
    <div class="col-md-12">
        <figure><a href="https://login.irra.live/stocks/jsp/irra/" target="_blank"><img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-10/IRRA%20Banner.jpg" class="img-fluid" alt="IRRA" title="IRRA" /></a></figure>
        
    </div>
    <div class="col-md-12">
        <figure><a href="https://smartodr.in/login" target="_blank"><img src="https://nsearchives.nseindia.com/web/sites/default/files/2023-12/Artboard%201-100%20%282%29.jpg" class="img-fluid" alt="Click here to login/register to SMARTODR Portal" title="Click here to login/register to SMARTODR Portal" /></a></figure>
        
    </div>
</div>
</div>
</section>

                    
                </div>
                    
                        <div class="col-md-6">
    <div class="video_wrap">
        <div class="tab-content py-3 ">
            <div class="tab-pane fade show active" id="corporate-videos" role="tabpanel">
            <div class="video_container">
                
                <div class="video_box">
                <div class="row justify-content-center align-items-center">
                <div class="col-md-6">
                    <div class="video_img">
                        <a href="https://www.youtube.com/watch?v=jD8VaJ-a0Ms" target="_blank" class="posrel">
                            <img rel="https://www.youtube.com/watch?v=jD8VaJ-a0Ms" src="" class="img-fluid youTubeImg" alt="NSE IFSC-SGX Connect Inaugurated by Hon’ble PM of India Shri Narendra Modi" title="NSE IFSC-SGX Connect Inaugurated by Hon’ble PM of India Shri Narendra Modi">
                            <span class="round-play-button"></span>
                        </a>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="video_desc">
                        <h4><a href="https://www.youtube.com/watch?v=jD8VaJ-a0Ms" target="_blank">NSE IFSC-SGX Connect Inaugurated by Hon’ble PM of India Shri Narendra Modi</a></h4>
                        <p>Shri Ashishkumar Chauhan, Managing Director &amp; CEO, NSE presented a memento to Hon'ble Prime Minister Narendra Modi at the launch of NSE IFSC-SGX Connect.</p>

                    </div>
                </div>
                </div>
                </div>
                
                <div class="video_box">
                <div class="row justify-content-center align-items-center">
                <div class="col-md-6">
                    <div class="video_img">
                        <a href="https://www.youtube.com/watch?v=fiRg41yJAF4" target="_blank" class="posrel">
                            <img rel="https://www.youtube.com/watch?v=fiRg41yJAF4" src="" class="img-fluid youTubeImg" alt="NSE : Enabling a Billion Dreams" title="NSE : Enabling a Billion Dreams">
                            <span class="round-play-button"></span>
                        </a>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="video_desc">
                        <h4><a href="https://www.youtube.com/watch?v=fiRg41yJAF4" target="_blank">NSE : Enabling a Billion Dreams</a></h4>
                        <p>3 decades of transforming India's financial ecosystem through fairness, efficiency, and transparency.<br />
Witness the rise of NSE India and its contribution towards Viksit Bharat.</p>

                    </div>
                </div>
                </div>
                </div>
                
                <div class="video_box">
                <div class="row justify-content-center align-items-center">
                <div class="col-md-6">
                    <div class="video_img">
                        <a href="https://www.youtube.com/watch?v=gCroZEoHg8w" target="_blank" class="posrel">
                            <img rel="https://www.youtube.com/watch?v=gCroZEoHg8w" src="" class="img-fluid youTubeImg" alt="Don&#39;t fall for false promises of assured returns!" title="Don&#39;t fall for false promises of assured returns!">
                            <span class="round-play-button"></span>
                        </a>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="video_desc">
                        <h4><a href="https://www.youtube.com/watch?v=gCroZEoHg8w" target="_blank">Don&#39;t fall for false promises of assured returns!</a></h4>
                        <p>Any promise of assured/guaranteed returns in the securities market is illegal! Don't fall for unsolicited advice promising exorbitant returns.&nbsp;</p>

                    </div>
                </div>
                </div>
                </div>
                
            </div>
            </div>
        </div>
        <div class="link-view-all text-end">
            <a href="https://www.youtube.com/user/NSEIL1india" target="_blank"><span id="viewall">View All</span> <img src="assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
        </div>
    </div>
</div>
                    
            </div>
        </div>
    </section>

    <section class="seperator mb-0"> <span></span> <span></span> <span></span> <span></span> </section>
    
        <script>

</script>
<section class="circular_press_media common-tabs tabs-slider slider-with-dots">
    <div class="container-fluid">
<div class="row">
<div class="col-xs-12 w-100">
<nav>
    <div class="container">
        <div class="nav nav-tabs"  role="tablist">
            <a class="nav-item nav-link active" data-bs-toggle="tab" href="#circulars" role="tab" aria-selected="true" id="home-circular-tab">Circulars</a>
            <a class="nav-item nav-link" data-bs-toggle="tab" href="#press-release" role="tab" aria-selected="false" id="home-pressrelease-tab">Press Releases</a>
            <a class="nav-item nav-link" data-bs-toggle="tab" href="#media-coverage" role="tab" aria-selected="false" id="home-mediacoverage-tab">Media Coverage</a>
        </div>
    </div>
</nav>
<div class="tab-content py-3 translate">
    <div class="tab-pane fade show active" id="circulars" role="tabpanel">
        <div class="container posrel">
            <div class="lr-m-15">
                <div class="corporate_slider">
                     
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65471</p>
                                    <div class="line-clamp">Listing of Partly Paid-up Equity Shares of Aurum Proptech Limited</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65471.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65470</p>
                                    <div class="line-clamp">Listing of Partly Paid-up Equity Shares of Grasim Industries Limited</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65470.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Surveillance &amp; Investigation</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/INVG/65469</p>
                                    <div class="line-clamp">SEBI directions in reference to SEBI order  in the matter of Capital Exchange India</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/INVG65469.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Inspection &amp; Compliance</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/COMP/65468</p>
                                    <div class="line-clamp">Instructions to Principal Entities under Telecom Commercial Communication Customer Preference Regulations, 2018 </div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/COMP65468.zip"> <img src="/assets/images/icon-zip.svg" alt="icon-zip" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65467</p>
                                    <div class="line-clamp">Joint Standard Operating Procedure (SOP) for release of 1% Security Deposit</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65467.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65466</p>
                                    <div class="line-clamp">Listing of further issue of securities</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65466.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65465</p>
                                    <div class="line-clamp">Listing of further issue of North Eastern Carrying Corporation Limited</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65465.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Surveillance &amp; Investigation</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/SURV/65464</p>
                                    <div class="line-clamp">Applicability of Enhanced Surveillance Measure (ESM)</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/SURV65464.zip"> <img src="/assets/images/icon-zip.svg" alt="icon-zip" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65463</p>
                                    <div class="line-clamp">Listing of further issues of Cellecor Gadgets Limited</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65463.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65462</p>
                                    <div class="line-clamp">Listing of Equity Shares of Ushanti Colour Chem Limited</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65462.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65461</p>
                                    <div class="line-clamp">Listing of further issue of Kesoram Industries Limited</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65461.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="line-comm-hd">Listing</h3>
                                <h4>December  06, 2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="pb-2">NSE/CML/65460</p>
                                    <div class="line-clamp">Listing of privately placed securities on capital market segment</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/content/circulars/CML65460.pdf"> <img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row link_row">
                <div class="col-md-12">
                    <div class="link-view-all text-end mt-3"><a href="/resources/exchange-communication-circulars" id="view-all">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a></div>
                </div>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="press-release" role="tabpanel">
        <div class="container posrel">
            <div class="lr-m-15">
                <div class="corporate_slider">
                
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h4>06-Dec-2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="subtitle">Surveillance</p>
                                    <div class="line-cont"><p>Clarification by Bajaj Healthcare Limited<br />
Clarification by Chemfab Alkalis Limited<br />
Clarification by Elgi Rubber Company Limited<br />
Clarification by Lambodhara Textiles Limited<br />
Clarification by Lincoln Pharmaceuticals Limited<br />
Clarification by Lincoln Pharmaceuticals Limited<br />
Clarification by MM Forgings Limited<br />
Clarification by Maharashtra Seamless Limited<br />
Clarification by Medicamen Biotech Limited<br />
News about One 97 Communications Limited<br />
Clarification by Savita Oil Technologies Limited</p>
</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/PR_surv_06122024.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h4>06-Dec-2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="subtitle">NSE CLEARING</p>
                                    <div class="line-cont"><p>Market-wide Position Limit PVRINOX and RBLBANK</p>
</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/PR_nsccl_06122024.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h4>05-Dec-2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="subtitle">Corporate Communications</p>
                                    <div class="line-cont"><p>Caution for Investors&nbsp;</p>
</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/PR_cc_05122024_0.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h4>05-Dec-2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="subtitle">Corporate Communications</p>
                                    <div class="line-cont"><p>Caution for Invedtors</p>
</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/PR_cc_05122024_1.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                
                    <div class="item">
                        <div class="card">
                            <div class="card-header">
                                <h4>05-Dec-2024</h4>
                            </div>
                            <div class="card-body">
                                <div class="content">
                                    <p class="subtitle">Corporate Communications</p>
                                    <div class="line-cont"><p>Caution for Investors</p>
</div>
                                </div>
                                <div class="content">
                                    <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-12/PR_cc_05122024.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                
                </div>
            </div>
            <div class="row link_row">
                <div class="col-md-12">
                    <div class="link-view-all text-end mt-3">
                        <a href="/resources/exchange-communication-press-releases" id="view-all">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="media-coverage" role="tabpanel">
        <div class="container posrel">
            <div class="lr-m-15">
                <div class="corporate_slider">
                    
                        <div class="item">
                            <div class="card">
                                <figure><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Media_thumb_14.jpg" class="img-fluid" alt="" title="" /></figure>
                                <div class="card-header"><h4>30-Oct-2024</h4></div>
                                <div class="card-body">
                                    <div class="content">
                                        <p class="subtitle">Corporate Communications </p>
                                        <div class="line-cont"><p>NSE crosses 20 crore (200 million) total client accounts</p>
</div>
                                    </div>
                                    <div class="content">
                                        <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/PR_cc_30102024_1.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <div class="item">
                            <div class="card">
                                <figure><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Social%20Stock%20Exchange_0.jpg" class="img-fluid" alt="" title="" /></figure>
                                <div class="card-header"><h4>28-Oct-2024</h4></div>
                                <div class="card-body">
                                    <div class="content">
                                        <p class="subtitle">Corporate Communications </p>
                                        <div class="line-cont"><p>NSE-SSE Awareness Seminar organized in Hyderabad Over 70 NPOs and key investors, donors and philanthropists participate to deliberate on the theme “Accelerating Social Impact with Social Stock Exchange”</p>
</div>
                                    </div>
                                    <div class="content">
                                        <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/PR_cc_28102024_0.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <div class="item">
                            <div class="card">
                                <figure><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Media%20coverage%20%204.jpg" class="img-fluid" alt="" title="" /></figure>
                                <div class="card-header"><h4>18-Oct-2024</h4></div>
                                <div class="card-body">
                                    <div class="content">
                                        <p class="subtitle">Corporate Communications </p>
                                        <div class="line-cont"><p>State Budget Analysis by National Stock Exchange (NSE) - Capex pace moderates in FY25BE</p>
</div>
                                    </div>
                                    <div class="content">
                                        <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/PR_cc_18102024_0.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <div class="item">
                            <div class="card">
                                <figure><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Social%20Stock%20Exchange.jpg" class="img-fluid" alt="" title="" /></figure>
                                <div class="card-header"><h4>08-Oct-2024</h4></div>
                                <div class="card-body">
                                    <div class="content">
                                        <p class="subtitle">Corporate Communications </p>
                                        <div class="line-cont"><p>4th NSE Social Stock Exchange Awareness Seminar organised in Kochi, Kerala</p>
</div>
                                    </div>
                                    <div class="content">
                                        <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/PR_cc_08102024_0.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <div class="item">
                            <div class="card">
                                <figure><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Corporate%20announcements%201.jpg" class="img-fluid" alt="" title="" /></figure>
                                <div class="card-header"><h4>06-Oct-2024</h4></div>
                                <div class="card-body">
                                    <div class="content">
                                        <p class="subtitle">Corporate Communications </p>
                                        <div class="line-cont"><p>Caution - fake circulars/letters issued on behalf of NSE Clearing Limited (NCL)</p>
</div>
                                    </div>
                                    <div class="content">
                                        <p><a target="_blank" href="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/PR_cc_06102024_0.pdf"><img src="/assets/images/icon-pdf.svg" alt="icon-pdf" />Download </a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                </div>
            </div>
            <div class="row link_row">
                <div class="col-md-12">
                    <div class="link-view-all text-end mt-3">
                        <a href="/resources/exchange-communication-media-center" id="view-all">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
</div>
    </div>
</section>

    

    
        <section class="nse_academy slider-with-dots">
    <div class="container">
    <h2 class="section_heading" id="web-banner"></h2>
    <div class="row">
    <div class="col-md-8 p-0">
    <div class="academy_slider">
    
    
    
    
    
    
    
    
    
    
    
    <div class="item"><a href="https://www.nseacademy.info/pages/higher_education/anna-university-pg-certification-programme-in-financial-analytics"><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-11/Anna%20University%20%20%281%29.png" alt="Anna University and NSE Academy PG Certification in Financial Analytics Banner" title="Anna University and NSE Academy PG Certification in Financial Analytics Banner" /></a></div>
    <div class="item"><a href="https://www.nseindia.com/learn/courses-for-working-professionals"><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-08/Exec%20courses.jpg" alt="Executive Certificate Programs" title="Executive Certificate Programs" /></a></div>
    <div class="item"><a href="https://www.nseacademy.info/Macquarie_University_Courses/"><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-09/Corporate%20Treasury%20Macquarie%20University.png" alt="Develop your skills in Corporate Treasury Management" title="Develop your skills in Corporate Treasury Management" /></a></div>
    <div class="item"><a href="https://www.nseacademy.info/pages/self-paced/Grant_Thornton_Advanced_Online_Courses/"><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-10/NSE%20Website%20banners_final.jpg" alt="3 Online Programs In THEMED TRACK" title="3 Online Programs In THEMED TRACK" /></a></div>
    <div class="item"><a href="https://www.ncfm-india.com/ORE/Offline_Classroom_Sessions/"><img src="https://nsearchives.nseindia.com/web/sites/default/files/2024-09/FATA%20OFFLINE%20-%203.png" alt="Technical &amp; Fundamental Analysis in Capital Market Classroom Course" title="Technical &amp; Fundamental Analysis in Capital Market Classroom Course" /></a></div>
    </div>
    <button  role="button" aria-label="playpause" class="play_pause_btn position-absolute"><i class="fa fa-pause-circle"></i></button>
    </div>
    <div class="col-md-4 p-0 bg-bluberry">
    <div class="latest_courses">
    <h3 id="latestCourses">Latest UPDATES</h3>
    <ul>
    
    
    <li><a target="_blank" href="https://www.nseindia.com/resources/coffee-table-book">Coffee Table Book <span class="readmore"><img src="/assets/images/Read_more_CTA.svg" width="12" height="9" alt="ViewAll" title="View All"></span></a></li>
    
    
    
    <li><a target="_blank" href="/research/publications-reports-nse-market-pulse">Market Pulse <span class="readmore"><img src="/assets/images/Read_more_CTA.svg" width="12" height="9" alt="ViewAll" title="View All"></span></a></li>
    
    
    
    <li><a target="_blank" href="https://www.niftyindices.com/reports/etf-and-index-fund-dashboard">ETF and Index Fund Dashboard <span class="readmore"><img src="/assets/images/Read_more_CTA.svg" width="12" height="9" alt="ViewAll" title="View All"></span></a></li>
    
    
    
    <li><a target="_blank" href="/research/publications-reports-nse-market-insights">Macro Reports <span class="readmore"><img src="/assets/images/Read_more_CTA.svg" width="12" height="9" alt="ViewAll" title="View All"></span></a></li>
    
    
    
    <li><a target="_blank" href="/learn/class-room-courses">New Courses by NSE Academy <span class="readmore"><img src="/assets/images/Read_more_CTA.svg" width="12" height="9" alt="ViewAll" title="View All"></span></a></li>
    
    
    
    <li><a target="_blank" href="https://nsearchives.nseindia.com/archives/Winners_of_National_Quiz_on_Financial_Sector.pdf">Winners of National Quiz on Financial Sector <span class="readmore"><img src="/assets/images/Read_more_CTA.svg" width="12" height="9" alt="ViewAll" title="View All"></span></a></li>
    
    
    
    <li><a target="_blank" href="https://www.nseindia.com/invest/useful-links">Useful Links <span class="readmore"><img src="/assets/images/Read_more_CTA.svg" width="12" height="9" alt="ViewAll" title="View All"></span></a></li>
    
    
    
    
    
    
    </ul>
    </div>
    </div>
    </div>
    </div>
    </section>
    
    
    <div id="home-react-root" style="display: none"></div>
</div>
<div class="modal fade indices_modal" id="selectIndicesModal" role="dialog" tabindex="0">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title" id="selectIndices">Select Indices</h4>
                <p id="indicestext">Choose upto 5 indices that you would like to view the market trend for.</p>
                <button type="button" class="close" role="button" aria-label="Close" data-bs-dismiss="modal"></button>
            </div>
            <!-- Modal body -->
            <div class="modal-body">
                <div class="row">

                    <div class="col-md-8">
                        <div class="row">
                            <div class="col-md-4 col-sm-4">
                                <div class="select-col">
                                    <h5 id="broadmarketindices">Broad Market Indices</h5>
                                    <ul>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY 50">NIFTY 50</span>
                                                    <input type="checkbox" name="NIFTY 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY NEXT 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY NEXT 50">NIFTY NEXT 50</span>
                                                    <input type="checkbox" name="NIFTY NEXT 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDCAP 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDCAP 50">NIFTY MIDCAP 50</span>
                                                    <input type="checkbox" name="NIFTY MIDCAP 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDCAP 100" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDCAP 100">NIFTY MIDCAP 100</span>
                                                    <input type="checkbox" name="NIFTY MIDCAP 100">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDCAP 150" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDCAP 150">NIFTY MIDCAP 150</span>
                                                    <input type="checkbox" name="NIFTY MIDCAP 150">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY SMALLCAP 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY SMALLCAP 50">NIFTY SMALLCAP 50</span>
                                                    <input type="checkbox" name="NIFTY SMALLCAP 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY SMALLCAP 100" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY SMALLCAP 100">NIFTY SMALLCAP 100</span>
                                                    <input type="checkbox" name="NIFTY SMALLCAP 100">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY SMALLCAP 250" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY SMALLCAP 250">NIFTY SMALLCAP 250</span>
                                                    <input type="checkbox" name="NIFTY SMALLCAP 250">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDSMALLCAP 400" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDSMALLCAP 400">NIFTY MIDSMALLCAP 400</span>
                                                    <input type="checkbox" name="NIFTY MIDSMALLCAP 400">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY 100" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY 100">NIFTY 100</span>
                                                    <input type="checkbox" name="NIFTY 100">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY 200" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY 200">NIFTY 200</span>
                                                    <input type="checkbox" name="NIFTY 200">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY500 MULTICAP 50:25:25" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY500 MULTICAP 50:25:25">NIFTY500 MULTICAP 50:25:25</span>
                                                    <input type="checkbox" name="NIFTY500 MULTICAP 50:25:25">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY LARGEMIDCAP 250" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY LARGEMIDCAP 250">NIFTY LARGEMIDCAP 250</span>
                                                    <input type="checkbox" name="NIFTY LARGEMIDCAP 250">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDCAP SELECT" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDCAP SELECT">NIFTY MIDCAP SELECT</span>
                                                    <input type="checkbox" name="NIFTY MIDCAP SELECT">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY TOTAL MARKET" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY TOTAL MARKET">NIFTY TOTAL MARKET</span>
                                                    <input type="checkbox" name="NIFTY TOTAL MARKET">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MICROCAP 250" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MICROCAP 250">NIFTY MICROCAP 250</span>
                                                    <input type="checkbox" name="NIFTY MICROCAP 250">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY 500" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY 500">NIFTY 500</span>
                                                    <input type="checkbox" name="NIFTY 500">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-4 col-sm-4">
                                <div class="select-col">
                                    <h5 id="sectoralindices">Sectoral Indices</h5>
                                    <ul>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY AUTO" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY AUTO">NIFTY AUTO</span>
                                                    <input type="checkbox" name="NIFTY AUTO">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY BANK" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY BANK">NIFTY BANK</span>
                                                    <input type="checkbox" name="NIFTY BANK">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY ENERGY" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY ENERGY">NIFTY ENERGY</span>
                                                    <input type="checkbox" name="NIFTY ENERGY">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY FINANCIAL SERVICES" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY FINANCIAL SERVICES">NIFTY FINANCIAL SERVICES</span>
                                                    <input type="checkbox" name="NIFTY FINANCIAL SERVICES">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY FINANCIAL SERVICES 25/50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY FINANCIAL SERVICES 25/50">NIFTY FINANCIAL SERVICES 25/50</span>
                                                    <input type="checkbox" name="NIFTY FINANCIAL SERVICES 25/50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY FMCG" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY FMCG">NIFTY FMCG</span>
                                                    <input type="checkbox" name="NIFTY FMCG">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY IT" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY IT">NIFTY IT</span>
                                                    <input type="checkbox" name="NIFTY IT">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MEDIA" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MEDIA">NIFTY MEDIA</span>
                                                    <input type="checkbox" name="NIFTY MEDIA">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY METAL" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY METAL">NIFTY METAL</span>
                                                    <input type="checkbox" name="NIFTY METAL">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY PHARMA" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY PHARMA">NIFTY PHARMA</span>
                                                    <input type="checkbox" name="NIFTY PHARMA">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY PSU BANK" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY PSU BANK">NIFTY PSU BANK</span>
                                                    <input type="checkbox" name="NIFTY PSU BANK">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY REALTY" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY REALTY">NIFTY REALTY</span>
                                                    <input type="checkbox" name="NIFTY REALTY">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY PRIVATE BANK" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY PRIVATE BANK">NIFTY PRIVATE BANK</span>
                                                    <input type="checkbox" name="NIFTY PRIVATE BANK">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY HEALTHCARE INDEX" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY HEALTHCARE INDEX">NIFTY HEALTHCARE INDEX</span>
                                                    <input type="checkbox" name="NIFTY HEALTHCARE INDEX">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY CONSUMER DURABLES" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY CONSUMER DURABLES">NIFTY CONSUMER DURABLES</span>
                                                    <input type="checkbox" name="NIFTY CONSUMER DURABLES">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY OIL &amp; GAS" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY OIL &amp; GAS">NIFTY OIL &amp; GAS</span>
                                                    <input type="checkbox" name="NIFTY OIL &amp; GAS">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDSMALL HEALTHCARE" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDSMALL HEALTHCARE">NIFTY MIDSMALL HEALTHCARE</span>
                                                    <input type="checkbox" name="NIFTY MIDSMALL HEALTHCARE">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-4 col-sm-4">
                                <div class="select-col">
                                    <h5 id="strategyindices">Strategy Indices</h5>
                                    <ul>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY DIVIDEND OPPORTUNITIES 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY DIVIDEND OPPORTUNITIES 50">NIFTY DIVIDEND OPPORTUNITIES 50</span>
                                                    <input type="checkbox" name="NIFTY DIVIDEND OPPORTUNITIES 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY50 VALUE 20" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY50 VALUE 20">NIFTY50 VALUE 20</span>
                                                    <input type="checkbox" name="NIFTY50 VALUE 20">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY100 QUALITY 30" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY100 QUALITY 30">NIFTY100 QUALITY 30</span>
                                                    <input type="checkbox" name="NIFTY100 QUALITY 30">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY50 EQUAL WEIGHT" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY50 EQUAL WEIGHT">NIFTY50 EQUAL WEIGHT</span>
                                                    <input type="checkbox" name="NIFTY50 EQUAL WEIGHT">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY100 EQUAL WEIGHT" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY100 EQUAL WEIGHT">NIFTY100 EQUAL WEIGHT</span>
                                                    <input type="checkbox" name="NIFTY100 EQUAL WEIGHT">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY100 LOW VOLATILITY 30" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY100 LOW VOLATILITY 30">NIFTY100 LOW VOLATILITY 30</span>
                                                    <input type="checkbox" name="NIFTY100 LOW VOLATILITY 30">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY ALPHA 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY ALPHA 50">NIFTY ALPHA 50</span>
                                                    <input type="checkbox" name="NIFTY ALPHA 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY200 QUALITY 30" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY200 QUALITY 30">NIFTY200 QUALITY 30</span>
                                                    <input type="checkbox" name="NIFTY200 QUALITY 30">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY ALPHA LOW-VOLATILITY 30" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY ALPHA LOW-VOLATILITY 30">NIFTY ALPHA LOW-VOLATILITY 30</span>
                                                    <input type="checkbox" name="NIFTY ALPHA LOW-VOLATILITY 30">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY200 MOMENTUM 30" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY200 MOMENTUM 30">NIFTY200 MOMENTUM 30</span>
                                                    <input type="checkbox" name="NIFTY200 MOMENTUM 30">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDCAP150 QUALITY 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDCAP150 QUALITY 50">NIFTY MIDCAP150 QUALITY 50</span>
                                                    <input type="checkbox" name="NIFTY MIDCAP150 QUALITY 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY200 ALPHA 30" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY200 ALPHA 30">NIFTY200 ALPHA 30</span>
                                                    <input type="checkbox" name="NIFTY200 ALPHA 30">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDCAP150 MOMENTUM 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDCAP150 MOMENTUM 50">NIFTY MIDCAP150 MOMENTUM 50</span>
                                                    <input type="checkbox" name="NIFTY MIDCAP150 MOMENTUM 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY500 MOMENTUM 50" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY500 MOMENTUM 50">NIFTY500 MOMENTUM 50</span>
                                                    <input type="checkbox" name="NIFTY500 MOMENTUM 50">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDSMALLCAP400 MOMENTUM QUALITY 100" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDSMALLCAP400 MOMENTUM QUALITY 100">NIFTY MIDSMALLCAP400 MOMENTUM QUALITY 100</span>
                                                    <input type="checkbox" name="NIFTY MIDSMALLCAP400 MOMENTUM QUALITY 100">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY SMALLCAP250 MOMENTUM QUALITY 100" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY SMALLCAP250 MOMENTUM QUALITY 100">NIFTY SMALLCAP250 MOMENTUM QUALITY 100</span>
                                                    <input type="checkbox" name="NIFTY SMALLCAP250 MOMENTUM QUALITY 100">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY TOP 10 EQUAL WEIGHT" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY TOP 10 EQUAL WEIGHT">NIFTY TOP 10 EQUAL WEIGHT</span>
                                                    <input type="checkbox" name="NIFTY TOP 10 EQUAL WEIGHT">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="row">
                            <div class="col-md-12 col-sm-6">
                                <div class="select-col">
                                    <h5 id="thematicindices">Thematic Indices</h5>
                                    <ul>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY COMMODITIES" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY COMMODITIES">NIFTY COMMODITIES</span>
                                                    <input type="checkbox" name="NIFTY COMMODITIES">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY INDIA CONSUMPTION" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY INDIA CONSUMPTION">NIFTY INDIA CONSUMPTION</span>
                                                    <input type="checkbox" name="NIFTY INDIA CONSUMPTION">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY CPSE" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY CPSE">NIFTY CPSE</span>
                                                    <input type="checkbox" name="NIFTY CPSE">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY INFRASTRUCTURE" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY INFRASTRUCTURE">NIFTY INFRASTRUCTURE</span>
                                                    <input type="checkbox" name="NIFTY INFRASTRUCTURE">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MNC" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MNC">NIFTY MNC</span>
                                                    <input type="checkbox" name="NIFTY MNC">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY GROWTH SECTORS 15" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY GROWTH SECTORS 15">NIFTY GROWTH SECTORS 15</span>
                                                    <input type="checkbox" name="NIFTY GROWTH SECTORS 15">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY PSE" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY PSE">NIFTY PSE</span>
                                                    <input type="checkbox" name="NIFTY PSE">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY SERVICES SECTOR" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY SERVICES SECTOR">NIFTY SERVICES SECTOR</span>
                                                    <input type="checkbox" name="NIFTY SERVICES SECTOR">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY100 LIQUID 15" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY100 LIQUID 15">NIFTY100 LIQUID 15</span>
                                                    <input type="checkbox" name="NIFTY100 LIQUID 15">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY MIDCAP LIQUID 15" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY MIDCAP LIQUID 15">NIFTY MIDCAP LIQUID 15</span>
                                                    <input type="checkbox" name="NIFTY MIDCAP LIQUID 15">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY INDIA DIGITAL" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY INDIA DIGITAL">NIFTY INDIA DIGITAL</span>
                                                    <input type="checkbox" name="NIFTY INDIA DIGITAL">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY100 ESG" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY100 ESG">NIFTY100 ESG</span>
                                                    <input type="checkbox" name="NIFTY100 ESG">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY INDIA MANUFACTURING" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY INDIA MANUFACTURING">NIFTY INDIA MANUFACTURING</span>
                                                    <input type="checkbox" name="NIFTY INDIA MANUFACTURING">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY INDIA CORPORATE GROUP INDEX - TATA GROUP 25% CAP" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY INDIA CORPORATE GROUP INDEX - TATA GROUP 25% CAP">NIFTY INDIA CORPORATE GROUP INDEX - TATA GROUP 25% CAP</span>
                                                    <input type="checkbox" name="NIFTY INDIA CORPORATE GROUP INDEX - TATA GROUP 25% CAP">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY500 MULTICAP INDIA MANUFACTURING 50:30:20" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY500 MULTICAP INDIA MANUFACTURING 50:30:20">NIFTY500 MULTICAP INDIA MANUFACTURING 50:30:20</span>
                                                    <input type="checkbox" name="NIFTY500 MULTICAP INDIA MANUFACTURING 50:30:20">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY500 MULTICAP INFRASTRUCTURE 50:30:20" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY500 MULTICAP INFRASTRUCTURE 50:30:20">NIFTY500 MULTICAP INFRASTRUCTURE 50:30:20</span>
                                                    <input type="checkbox" name="NIFTY500 MULTICAP INFRASTRUCTURE 50:30:20">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY INDIA DEFENCE" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY INDIA DEFENCE">NIFTY INDIA DEFENCE</span>
                                                    <input type="checkbox" name="NIFTY INDIA DEFENCE">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY INDIA TOURISM" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY INDIA TOURISM">NIFTY INDIA TOURISM</span>
                                                    <input type="checkbox" name="NIFTY INDIA TOURISM">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="NIFTY CAPITAL MARKETS" class="chk_container">
                                                    <span data-nse-translate-symbol="symbol" data-nse-translate-symbol-value="NIFTY CAPITAL MARKETS">NIFTY CAPITAL MARKETS</span>
                                                    <input type="checkbox" name="NIFTY CAPITAL MARKETS">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                    </ul>
                                </div>
                            </div>
                            <!--<div class="col-md-6 col-sm-6">
                                <div class="select-col">
                                    <h5>Fixed Income Indices</h5>
                                    <ul>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="Securities in F&amp;O" class="chk_container">Securities in F&amp;O
                                                    <input type="checkbox" name="Securities in F&amp;O">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                            <li>
                                                <label role="checkbox" aria-checked="false" aria-label="Permitted to Trade" class="chk_container">Permitted to Trade
                                                    <input type="checkbox" name="Permitted to Trade">
                                                    <span class="checkmark"></span>
                                                </label>
                                            </li>
                                        
                                    </ul>
                                </div>
                            </div>-->
                        </div>

                    </div>
                </div>
            </div>
            <!-- Modal footer -->
            <div class="modal-footer">
                <div class="btn_wrap">
                    <a href="#" class="btn btn-common useDefaultBtn" id="useDefault">Use Default</a>
                    <a href="#" class="btn btn-common btn-solid confirmBtn" id="confirm">Confirm</a>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content" style="max-width: 646px;">
        <div class="modal-header" style="border-bottom: 0px;padding: 0.5rem 0.5rem 1rem;"> <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" style="right: 27px; top:10px;"></button></div>
        <div class="modal-body">
            <a id="modalAnchorLink">
                <img id="modalImgURL" class="img-fluid"/>
            </a>
        </div>
      </div>
    </div>
  </div>

<script src="/dist/js/sections/home.js" async></script>
<script src="/assets/js/stock/highstock.js" differ></script>
<!-- <script src="/assets/js/highcharts.js"></script> -->
<script src="/assets/js/modules/exporting.js" differ></script>
<script src="/assets/js/modules/export-data.js" differ></script>
<script src="/assets/js/modules/accessibility.js" differ></script>
<!-- {
    name: data.labels && data.labels[Object.keys(data.labels)[0]].mostActiveEquities,
    id: "most-active",
    sel:false,
    file:"most-active-equities",
    tabData: []
}, -->
</div>
    <div id="error-snackbar"></div>
    <footer class="nav-folderized mt-1">
    <div class="container">
        <div class="row">
            <div class="col-md-12 disclaimer">
                <!-- <h6 id="disclaimer1"></h6> -->
            <!-- <p id="disclaimer_text1"></p> -->
            <!-- <p id="disclaimer_text2"></p> -->
        </div>
            
                <div class="col-md-3">
                    <div class="foot-col foot-nav">
                        <h6>About NSE</h6>
                        <ul>
                            <li><a href="/national-stock-exchange/about-nse-company">About Us</a></li><li><a href="/structure-key-personnel/corporate-structure">Structure &amp; Key Personnel</a></li><li><a href="/investor-relations/announcements">Investor Relations</a></li><li><a href="/national-stock-exchange/awards-recognition">Awards and Recognitions</a></li><li><a href="/regulations/exchange-market-regulations-rules-byelaws-nseil">Regulations</a></li><li><a href="/event-gallery">Event Gallery</a></li><li><a href="/resources/exchange-communication-media-center">Media</a></li><li><a href="/resources/exchange-communication-holidays">Holidays</a></li><li><a href="/careers-at-nse">Careers</a></li><li><a href="/contact/contact-us">Contact Us</a></li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="foot-col foot-nav">
                        <h6>NSE Group Companies</h6>
                        <ul>
                            <li><a href="/nse-academy/nse-academy-overview">NSE Academy</a></li><li><a href="/nse-clearing">NSE Clearing</a></li><li><a href="/nse-data-and-analytics">NSE Data &amp; Analytics</a></li><li><a href="/nse-foundation/about-us">NSE Foundation</a></li><li><a href="/nse-indices">NSE Indices</a></li><li><a href="/nse-international-exchange/about">NSE International Exchange</a></li><li><a href="/nseint_clearing/nse-international-clearing-overview">NSE International Clearing</a></li><li><a href="/nse-investments">NSE Investments</a></li><li><a href="/nseit">NSEIT</a></li><li><a href="/national-stock-exchange/our-group">View all</a></li>
                        </ul>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="foot-col foot-nav">
                        <h6>Products &amp; Services</h6>
                        <ul>
                            <li><a href="/products-services/about-equity-market">Equity Market</a></li><li><a href="/products-services/about-indices">Indices</a></li><li><a href="/products-services/emerge-platform-about-sme">Emerge Platform</a></li><li><a href="/products-services/mf-about-mfss">Mutual Funds</a></li><li><a href="/products-services/about-equity-derivatives">Equity Derivatives</a></li><li><a href="/products-services/about-currency-derivatives">Currency Derivatives</a></li><li><a href="/products-services/about-commodity-derivatives">Commodity Derivatives</a></li><li><a href="/products-services/about-interest-rate-derivatives">Interest Rate Derivatives</a></li><li><a href="/products-services/fixed-income-debt-overview">Fixed Income and Debt</a></li><li><a href="/products-services/about-initial-public-offerings">Public Issues</a></li>
                        </ul>
                    </div>
                </div>
            <div class="col-md-4">
                <div class="foot-col last">
                    <div class="sep_links">
                        <ul>
                            <li><a href="/nse-disclaimer" id="disclaimer">Disclaimer</a></li>
                            <li><a href="/privacy-policy" id="privacy-policy">Privacy Policy</a></li>
                            <li><a href="/nse-terms-of-use" id="terms-of-use">Terms of Use</a></li>
                            <li><a href="/nse-copyright" id="copyright">Copyright</a></li>
                            <li><a href="/sitemap" id="site-map">Site Map</a></li>
                            <li><a href="/website-policies" id="website-policies">Website Policies</a></li> 
                            <li><a href="https://inspection.nseindia.com/empanelment_auditor/auditor/auditorRegistration/" id="empanelment-auditors" target="_blank">Empanelment of Internal Auditors of Members</a></li>
                            <li><a href="https://inspection.nseindia.com/empanelment_auditor/auditor/viewEmpanelledAuditors/" id="empaneled-audit" target="_blank">List of Empaneled Audit Firms</a></li>
                        </ul>
                    </div>
                    <div class="mobapp_links">
                        <ul class="d-flex w-100">
                            <!-- <li>
                                <h6>NSE MOBILE</h6>
                                <p>
                                    <a href="https://itunes.apple.com/in/app/nse-mobile-trading/id426758841?mt=8" target="_blank" rel="nofollow noopener" title=" Download NSE MOBILE on Apple Store">
                                        <img src="/assets/images/download-apple-store.svg" alt="Download NSE MOBILE on Apple Store" title=" Download NSE MOBILE on Apple Store">
                                    </a>
                                    <a href="https://play.google.com/store/apps/details?id=com.msf.nse&hl=en_IN" target="_blank" rel="nofollow noopener" title="Download NSE MOBILE on Google Play Store">
                                        <img src="/assets/images/download-google-store.svg" alt="Download NSE MOBILE on Google Play Store" title="Download NSE MOBILE on Google Play Store">
                                    </a>
                                </p>
                            </li> -->
                            <li>
                                <h6 id="nse-nmfii">NSE NMFII </h6>
                                <p>
                                    <a href="https://itunes.apple.com/us/app/nse-nmf-ii/id1227619380?mt=8" target="_blank" rel="nofollow noopener" rel="nofollow noopener" title="Download NSE NMFII on Apple Store">
                                        <img src="/assets/images/download-apple-store.svg" alt="Download NSE NMFII on Apple Store" title=" Download NSE NMFII on Apple Store">
                                    </a>
                                    <a href="https://play.google.com/store/apps/details?id=coms.nsenmf.nsenmf&hl=en" target="_blank" rel="nofollow noopener" title="Download NSE NMFII on Google Play Store">
                                        <img src="/assets/images/download-google-store.svg" alt="Download NSE NMFII on Google Play Store" title="Download NSE NMFII on Google Play Store">
                                    </a>
                                </p>
                            </li>
                            <li>
                                <h6 id="nse-go-bid">NSE  GO-BID  </h6>
                                <p>
                                    <a href="https://play.google.com/store/apps/details?id=com.xlx.eipodc" target="_blank" rel="nofollow noopener" title="Download NSE MOBILE on Google Play Store">
                                        <img src="/assets/images/download-google-store.svg" alt="Download NSE GO-BID on Google Play Store" title="Download NSE GO-BID on Google Play Store">
                                    </a>
                                </p>
                            </li>
                        </ul>
                    </div>
                    <div class="follow_links">
                        <h6 id="follow-us-on">Follow us on</h6>
                        <ul class="d-flex  w-100">
                            <li><a href="https://www.facebook.com/NationalStockExchange/" target="_blank" rel="nofollow noopener" alt="Follow us our Facebook" title="Follow us our Facebook"><i class="fa-brands fa-facebook-f"></i></a></li>
                            <li class="instagram_iconli"><span><a href="https://twitter.com/NSEIndia?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor" target="_blank" rel="nofollow noopener" title="Follow us on Twitter"><img src="/assets/images/twitter.svg" style="height: 22px; width: 22px;" class="instagram_icon" alt="Twitter"></a></span></li>   
                            <li><a href="https://in.linkedin.com/company/national-stock-exchange-of-india-limited" target="_blank" rel="nofollow noopener" alt="Follow us our LinkedIn" title="Follow us our LinkedIn"><i class="fa-brands fa-linkedin-in"></i></a></li>
                            <li><a href="https://www.youtube.com/user/NSEIL1india" target="_blank" rel="nofollow noopener" alt="Subscribe us our Youtube" title="Subscribe us our Youtube"><i class="fa-brands fa-youtube"></i></i></a></li>
                            <li class="instagram_iconli"><span><a href="https://www.instagram.com/nseindia" target="_blank" rel="nofollow noopener" title="Follow us our Instagram"><img src="/assets/images/Instagram.png" class="instagram_icon" alt="Instagram"></a></span></li>
                            <li class="instagram_iconli"><span><a href="https://www.threads.net/@nseindia" target="_blank" rel="nofollow noopener" title="Follow us on Threads"><img src="/assets/images/threads.svg" style="height: 22px; width: 22px;" class="instagram_icon" alt="Threads"></a></span></li>
                            <li id="footerRSSFeed"><a href="https://www.nseindia.com/rss-feed" target="_blank" rel="nofollow noopener" alt="Follow us our RSS" title="Follow us our RSS"><i class="fa fa-rss"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="row copyright"><a href="/nse-copyright" ><span id="copy-right-text">Copyright </span><span> &copy</span><span> 2024</span></a><span  id="footer-resolution">National Stock Exchange of India Ltd. All rights reserved. Best viewed in Chrome and 1366 X 768 resolution. Recommended to use latest browser versions.</span></div>
    </div>
</footer> <!-- Alert Message Band --->

<!-- Alert Message Band End --->
<div id="quickLinkBtn">
    <h5 id="quick-link">Quick Links</h5>
</div>
<div id="quickLinkBand" class="footer_strip">
    <ul class="footer-tabs align-items-center justify-content-center">
        <li><a onclick="getNifty50Data()" href="javascript:;"><h5 id="quick-link"> QUICK LINKS</h5></a></li>
        <li><a onclick="getNifty50Data(); loadQuickLinkModal('merged_reports')" href="javascript:;" data-bs-toggle="modal" data-bs-dismiss="modal" data-bs-target="#qlink_investors" class="link_investors"><h5 id="for-investors">FOR INVESTORS</h5></a></li>
        <li><a href="javascript:;" onclick="loadQuickLinkModal('qlink_corporates')" class="link_corporates"><h5 id="for-corporate">FOR CORPORATES</h5></a></li>
        <li><a href="javascript:;" onclick="loadQuickLinkModal('qlink_members')" class="link_members"><h5 id="for-member">FOR MEMBERS</h5></a></li>
        <li><!--<a class="oldSite" href="https://www.nseindia.com/index_nse.htm" target="_blank"><h5>OLD WEBSITE</h5></a>--></li>
    </ul>
</div>
<!-- quick links modal investors -->
<div class="modal fade qlinks_modal" id="qlink_investors" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-full">
        <div class="modal-content">
            <div class="modal-header">
                <div class="container posrel">
                    <h2 class="modal-title text-uppercase">Quick Links for Investors</h2>
                    <p class="m-0">Dashboard for end of day reports download, quick market snapshot and important announcements.</p>
                    <button type="button" class="close" role="button" aria-label="Close" data-bs-dismiss="modal"></button>
                </div>
            </div>
            <div class="modal-body pt-0">
                <section class="common-tabs quicklinks-tabs">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-8">
                                <nav class="text-uppercase border-0">
                                    <div class="nav nav-tabs" role="tablist"> <a class="nav-item nav-link active" data-bs-toggle="tab" href="#qinvest_equity_mr" role="tab" aria-selected="true">Equity Market Report</a>
                                        <a class="nav-item nav-link" data-bs-toggle="tab" href="#qinvest_deriv_mr" role="tab" aria-selected="false">Derivatives Market Report</a>
                                        <a class="nav-item nav-link" data-bs-toggle="tab" href="#qinvest_debt_mr" role="tab" aria-selected="false">Debt Market Report</a>
                                    </div>
                                </nav>
                                <div class="tab-content">
                                    <div class="tab-pane fade show active" id="qinvest_equity_mr" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div id="QLEquityMarket_SelectAll" class="col-md-6 col-6">
                                                    <label data-container="QLEquityMarket" class="chk_container selectAll" aria-label="Select All Reports">Select All Reports
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a onclick="downloadReports('#QLEquityMarket', 'daily')" href="javascript:;" class="link ms-4"> Multiple file Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <div class="link-view-all text-end">
                                                        <a href="/all-reports">Customize Reports for Download <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="QLEquityMarket" class="row my-3"></div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="qinvest_deriv_mr" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div id="QLEquityMarket_SelectAll2" class="col-md-6 col-6">
                                                    <label data-container="QLDerivativeMarket" class="chk_container selectAll" id="selectAllQL" role="checkbox" aria-checked="false" aria-label="Select All Reports">Select All Reports
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a href="javascript:;" onclick="downloadReports('#QLDerivativeMarket', 'daily')" class="link ms-4"> Multiple file Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <div class="link-view-all text-end">
                                                        <a href="/all-reports-derivatives">Customize Reports for Download <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="QLDerivativeMarket" class="row my-3"></div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="qinvest_debt_mr" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div id="QLDebtMarket_SelectAll" class="col-md-6 col-6">
                                                    <label data-container="QLDebtMarket" class="chk_container selectAll" role="checkbox" aria-checked="false" aria-label="Select All Reports">Select All Reports
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a onclick="downloadReports('#QLDebtMarket', 'daily')" href="javascript:;" class="link ms-4"> Multiple file Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <div class="link-view-all text-end">
                                                        <a href="/all-reports-debt">Customize Reports for Download <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                    </div>
                                                </div>
                                            </div>
                                            <div id="QLDebtMarket" class="row my-3"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div id="qlMarketStatus" class="mktsnapshot_section">
                                    <div class="card shadow-box">
                                        <div class="card-header">
                                            <div class="row">
                                                <div class="col-md-7">
                                                    <h4 id="market-snapshot">Market Snapshot</h4>
                                                    <p class="m-0"><span class="asondate">As on <span></span> IST</span></p>
                                                </div>
                                                <div class="col-md-5">
                                                    <div class="link-view-all text-end">
                                                        <a href="/market-data/analysis-and-tools-capital-market-snapshot">View Details <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="mkt_updown">
                                                <label class="m-0">NIFTY50</label>
                                                <div class="content">
                                                    <span class="val">-</span>
                                                    <span class="arrow arrow-up-green"><span class="invisibleText">High</span></span>
                                                    <span class="val_per">-</span>
                                                </div>
                                            </div>
                                            <hr class="m-edge">
                                            <div class="stats_ochl">
                                                <div class="row">
                                                    <div class="col-md-3 col-sm-3 col-3">
                                                        <label>Open</label>
                                                        <p id="qlopen">-</p>
                                                    </div>
                                                    <div class="col-md-3 col-sm-3 col-3">
                                                        <label>High</label>
                                                        <p id="qlhigh">-</p>
                                                    </div>
                                                    <div class="col-md-3 col-sm-3 col-3">
                                                        <label>Low</label>
                                                        <p id="qllow">-</p>
                                                    </div>
                                                    <div class="col-md-3 col-sm-3 col-3">
                                                        <label>Close</label>
                                                        <p id="qlclose">-</p>
                                                    </div>
                                                </div>
                                            </div>
                                            <hr class="m-edge">
                                            <div class="stats_ochl">
                                                <div class="row">
                                                    <div class="col-md-4 col-4">
                                                        <div class="d-flex flex-column">
                                                            <p class="val_heading">Volume <small>(Lakhs)</small></p>
                                                            <p class="mkt_val" id="qlvolume"></p>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4 col-4">
                                                        <div class="d-flex flex-column">
                                                            <p class="val_heading">Value <small>(Lakhs)</small></p>
                                                            <p class="mkt_val" id="qlvalue"></p>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4 col-4">
                                                        <div class="d-flex flex-column">
                                                            <p class="val_heading" title="Free Float Market Capitalization (in Rs. Lakhs)">FFM .Cap <small>(Lakhs)</small></p>
                                                            <p class="mkt_val" id="qlffmc"></p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="mktslider mt-2">
                                                <div class="slider_wrap">
                                                    <div class="rangeslider-wrap">
                                                        <input id="qlrangeslider2" type="range" min="283.50" max="300.00" step="0.05" value="285" aria-labelledby="market-snapshot"
                                                        aria-valuemin="283.50"
                                                        aria-valuemax="300.00"
                                                        aria-valuenow="285" aria-orientation="horizontal"/>
                                                    </div>
                                                </div>
                                                <div class="labels">
                                                    <label id="qlwhlMin" class="left m-0 me-auto">- <small>-</small></label>
                                                    <label id="qlwhlMax" class="right m-0 ms-auto"><small>-</small> -</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
</div>
<!-- end quick links modal investors -->
<!-- quick link for corporates -->
<div class="modal fade qlinks_modal" id="qlink_corporates" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-full">
        <div class="modal-content">
            <div class="modal-header">
                <div class="container posrel">
                    <div class="row">
                        <div class="col-md-12 d-flex flex-row">
                            <h2 class="modal-title text-uppercase">Quick Links for Corporates</h2>
                            <p class="m-0">Dashboard for tracking corporate filings</p>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-12">
                            <h3 class="text-uppercase">Latest Corporate Filings</h3>
                        </div>
                    </div>
                    <button type="button" class="close" role="button" aria-label="Close" data-bs-dismiss="modal"></button>
                </div>
            </div>
            <div class="modal-body pt-0">
                <section class="common-tabs quicklinks-tabs">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-8">
                                <nav class="text-uppercase border-0">
                                    <ul id="QLCorpTab" class="nav nav-tabs" role="tablist">
                                        <li class="nav-item"><a role="tab" aria-selected="true" class="nav-link active" data-bs-toggle="tab" href="#qlink_corporate_01">All Companies</a></li>
                                    </ul>
                                </nav>
                                <div id="QLCorpContainer" class="tab-content">
                                    <div class="tab-pane fade show active" id="qlink_corporate_01" role="tabpanel">
                                        <div class="shadow-box withpadding round-border min-card-height">
                                            <div class="all_companies mt-3">
                                                <div class="form-group">
                                                    <label id="companySearchLbl">Use this section to track the latest corporate filings by 5 companies of your choice</label>
                                                    <div class="search_companies">
                                                        <div class="row">
                                                            <div class="col-md-8 position-relative">
                                                                <label class="input-group">
                                                                    <input type="text" aria-labelledby="companySearchLbl" class="form-control QLAutocomplete typeahead" placeholder="Search by company name or symbol" aria-label="" aria-describedby="basic-addon1">
                                                                    <div class="input-group-append">
                                                                        <button class="btn border border-start-0" type="button"><img src="/assets/images/Get_Quote_search.svg" width="16" height="16" alt="Get Quote Search" title="Get Quote Search" /></button>
                                                                    </div>
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="selected_list mt-4">
                                                    <h6>Showing <span id="companyCount">0</span> of 5 selected Companies</h6>
                                                    <div id="QLCorporateCompanies" class="row mt-3"></div>
                                                    <div class="btn_wrap mt-2">
                                                        <a onclick="genComTab()" href="javascript:;" class="btn flat-button-orange">Launch</a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="qlink_corporate_02" role="tabpanel">
                                        <div class="shadow-box withpadding round-border min-card-height">
                                            <div class="table-wrap borderSet maxHeight-350 scrollWrap">
                                                <div id="QLCorpWrapper" class="wordBreak"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="latest_circulars">
                                    <h4 class="section-heading text-uppercase">Latest Circulars</h4>
                                    <div class="card shadow-box">
                                        <nav class="text-uppercase border-0">
                                            <ul class="nav nav-tabs nav-justified withborder" role="tablist">
                                                <li class="nav-item"><a role="tab" aria-selected="true" class="nav-link active" data-bs-toggle="tab" href="#circulars_equity">Equity</a></li>
                                                <li class="nav-item"><a role="tab" aria-selected="false" class="nav-link" data-bs-toggle="tab" href="#circulars_debt">DEBT</a></li>
                                            </ul>
                                        </nav>
                                        <div class="tab-content">
                                            <div class="tab-pane fade show active" id="circulars_equity" role="tabpanel">
                                                <div id="circulars_equity_data"></div>
                                                <div class="link-view-all text-end mt-2 mb-2 me-2">
                                                    <a href="/companies-listing/circular-for-listed-companies-equity-market">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                </div>
                                            </div>
                                            <div class="tab-pane fade" id="circulars_debt" role="tabpanel">
                                                <div id="circulars_debt_data"></div>
                                                <div class="link-view-all text-end mt-2 mb-2 me-2">
                                                    <a href="/companies-listing/circular-for-listed-companies-debt-market">View All <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-3">
                                        <a href="/companies-listing/corporate-filings-application" class="btn rounded_orange_btn">Go to Corporates Dashboard</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
</div>
<!-- end quick link for corporates -->
<!-- quick links modal members -->
<div class="modal fade qlinks_modal" id="qlink_members" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-full">
        <div class="modal-content">
            <div class="modal-header">
                <div class="container posrel">
                    <h2 class="modal-title text-uppercase">Quick Links for Members</h2>
                    <button type="button" class="close" role="button" aria-label="Close" data-bs-dismiss="modal"></button>
                </div>
            </div>
            <div class="modal-body">
                <section class="common-tabs quicklinks-tabs">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-8">
                                <nav class="text-uppercase border-0">
                                    <ul class="nav nav-tabs" role="tablist">
                                        <li class="nav-item"><a role="tab" aria-selected="true" class="nav-link active" data-bs-toggle="tab" href="#q_members_circulars">Latest Circulars</a></li>
                                        <li class="nav-item"><a role="tab" aria-selected="false" class="nav-link med-nav-link" data-bs-toggle="tab" href="#q_members_trading">Trading</a></li>
                                        <li class="nav-item"><a role="tab" aria-selected="false" class="nav-link med-nav-link" data-bs-toggle="tab" href="#q_members_clearing">Clearing</a></li>
                                        <li class="nav-item"><a role="tab" aria-selected="false" class="nav-link med-nav-link" data-bs-toggle="tab" href="#q_members_listing">Listing</a></li>
                                        <li class="nav-item"><a role="tab" aria-selected="false" class="nav-link med-nav-link" data-bs-toggle="tab" href="#q_members_compliance">Compliance</a></li>
                                        <li class="nav-item"><a role="tab" aria-selected="false" class="nav-link med-nav-link" data-bs-toggle="tab" href="#q_members_others">Others</a></li>
                                    </ul>
                                </nav>
                                <div class="tab-content">
                                    <div class="tab-pane fade show active" id="q_members_circulars" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div class="col-md-6 col-6">
                                                    <label data-container="memberCircular" class="chk_container selectAll">Select All
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a onclick="genDownloadLink('memberCircular')" href="javascript:;" class="link ms-4"> Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <a href="/resources/exchange-communication-circulars" class="link">View All Circulars <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                </div>
                                            </div>
                                            <div class="circular_press_media circular_container">
                                                <div id="memberCircular" class="position-relative"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-12 col-12 text-end">
                                                <a href="http://feeds.feedburner.com/nseindia/circulars" target="_blank" class="link">Subscribe to RSS Feed <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="q_members_trading" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div class="col-md-6 col-6">
                                                    <label data-container="memberTrading" class="chk_container selectAll">Select All
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a onclick="genDownloadLink('memberTrading')" href="javascript:;" class="link ms-4"> Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <a href="/resources/exchange-communication-circulars" class="link">View All Circulars <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                </div>
                                            </div>
                                            <div class="circular_press_media circular_container">
                                                <div id="memberTrading" class="position-relative"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-12 col-12 text-end">
                                                <a href="http://feeds.feedburner.com/nseindia/circulars" target="_blank" class="link">Subscribe to RSS Feed <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="q_members_clearing" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div class="col-md-6 col-6">
                                                    <label data-container="memberClearing" class="chk_container selectAll">Select All
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a onclick="genDownloadLink('memberClearing')" href="javascript:;" class="link ms-4"> Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <a href="/resources/exchange-communication-circulars" class="link">View All Circulars <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                </div>
                                            </div>
                                            <div class="circular_press_media circular_container">
                                                <div id="memberClearing" class="position-relative"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-12 col-12 text-end">
                                                <a href="http://feeds.feedburner.com/nseindia/circulars" target="_blank" class="link">Subscribe to RSS Feed <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="q_members_listing" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div class="col-md-6 col-6">
                                                    <label data-container="memberListing" class="chk_container selectAll">Select All
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a onclick="genDownloadLink('memberListing')" href="javascript:;" class="link ms-4"> Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <a href="/resources/exchange-communication-circulars" class="link">View All Circulars <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                </div>
                                            </div>
                                            <div class="circular_press_media circular_container">
                                                <div id="memberListing" class="position-relative"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-12 col-12 text-end">
                                                <a href="http://feeds.feedburner.com/nseindia/circulars" target="_blank" class="link">Subscribe to RSS Feed <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="q_members_compliance" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div class="col-md-6 col-6">
                                                    <label data-container="memberCompliance" class="chk_container selectAll">Select All
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a onclick="genDownloadLink('memberCompliance')" href="javascript:;" class="link ms-4"> Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <a href="/resources/exchange-communication-circulars" class="link">View All Circulars <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                </div>
                                            </div>
                                            <div class="circular_press_media circular_container">
                                                <div id="memberCompliance" class="position-relative"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-12 col-12 text-end">
                                                <a href="http://feeds.feedburner.com/nseindia/circulars" target="_blank" class="link">Subscribe to RSS Feed <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="q_members_others" role="tabpanel">
                                        <div class="shadow-box withpadding round-border">
                                            <div class="row align-items-center mt-3 mb-4">
                                                <div class="col-md-6 col-6">
                                                    <label data-container="memberOthers" class="chk_container selectAll">Select All
                                                        <input type="checkbox">
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <a onclick="genDownloadLink('memberOthers')" href="javascript:;" class="link ms-4"> Download <i class="fa fa-download"></i></a>
                                                </div>
                                                <div class="col-md-6 col-6 text-end">
                                                    <a href="/resources/exchange-communication-circulars" class="link">View All Circulars <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                                </div>
                                            </div>
                                            <div class="circular_press_media circular_container">
                                                <div id="memberOthers" class="position-relative"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-12 col-12 text-end">
                                                <a href="http://feeds.feedburner.com/nseindia/circulars" target="_blank" class="link">Subscribe to RSS Feed <img src="/assets/images/Read_more_CTA.svg" width="14" height="10" alt="ViewAll" title="View All"></a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mktsnapshot_section">
                                    <div class="card shadow-box">
                                        <div class="card-header">
                                            <h4>Members Message Area</h4>
                                        </div>
                                        <div class="card-body">
                                            <p class="m-0"> Exchange has published Member Help Guide and new FAQs for Access to Markets. Visit the link: https://www.nseindia.com/trade/all-member-faqs</p>
                                        </div>
                                    </div>
                                    <div class="card shadow-box mt-3">
                                        <div class="card-header">
                                            <h4>Contact for Support</h4>
                                        </div>
                                        <div class="card-body">
                                            - Trade Support Toll Free no : <a href="tel:1800 266 0050">1800 266 0050</a> (Select IVR option 1)</br>Charged no : <a href="tel:022 68645400">022 68645400</a>/ <a href="tel:022 50998100">022 50998100 </a> (Select IVR option 1)</br>Timings : 8:00 AM to 2:00 AM on subsequent day (Monday to Friday)
                                            <br><br>- Member Compliance Support Toll Free no : <a href="tel:1800 266 0050">1800 266 0050</a> (Select IVR option 3)</br>Charged no : <a href="tel:022 68645400">022 68645400</a>/ <a href="tel:022 50998100">022 50998100 </a> (Select IVR option 3)</br>Timings : 9:30 AM to 5:45 PM (Monday to Friday)                                            
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
</div>
<!-- end quick links modal members -->
<!-- select indices modal-->

<!-- end select indices modal-->
<script src="/dist/js/components/quick-links.js" async></script> <!-- <script type="text/javascript" src="/assets/js/jquery-3.6.0.min.js"></script> -->
<script type="text/javascript" src="/assets/js/polyfill.min.js"></script>
<script type="text/javascript" src="/assets/js/popper.min.js"></script>
<script type="text/javascript" src="/assets/js/bootstrap.min.js"></script>
<script type="text/javascript" src="/assets/js/slick.min.js"></script>
<script type="text/javascript" src="/assets/js/rangeslider.min.js"></script>
<script type="text/javascript" src="/assets/js/excellentexport.js"></script>
<script type="text/javascript" src="/assets/js/typeahead.bundle.js"></script>
<script type="text/javascript" src="/assets/js/multilingual/multilang.js"></script>
<script type="text/javascript" src="/dist/js/static/public/assets/js/common.js"></script>
<script type="text/javascript" src="/dist/js/static/public/assets/js/regulatoryStatusModule.js"></script>
<script src="/assets/js/multilingual/P9_Language.js" defer></script>
  <noscript><img src="https://www.nseindia.com/akam/13/pixel_5828864c?a=dD03NmEwYmQ2ODExOWI4ZmQ4NmIyNWJmZjY0M2U0MTBlNTEyMGZlZTlmJmpzPW9mZg==" style="visibility: hidden; position: absolute; left: -999px; top: -999px;" /></noscript><script type="text/javascript"  src="/Vj4c66/7OJ/Kxb/DmRKpA/umYwVmQcQfXk/GQ41Sg5kMgI/WSdsFw8/4SS0B"></script></body>
</html>
","status":200,"url":"https://www.nseindia.com/"},"revalidate":31536000,"tags":[]}